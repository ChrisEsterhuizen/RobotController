
SensorsWithPath.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c544  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800c714  0800c714  0001c714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c968  0800c968  0001c968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c970  0800c970  0001c970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c974  0800c974  0001c974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  20000000  0800c978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000708  200000b8  0800ca2c  000200b8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200007c0  0800ca2c  000207c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012f50  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002369  00000000  00000000  00033034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001238  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001148  00000000  00000000  000365d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000089d6  00000000  00000000  00037720  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005d73  00000000  00000000  000400f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00045e69  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000579c  00000000  00000000  00045ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c6fc 	.word	0x0800c6fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0800c6fc 	.word	0x0800c6fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_uldivmod>:
 8000af4:	b953      	cbnz	r3, 8000b0c <__aeabi_uldivmod+0x18>
 8000af6:	b94a      	cbnz	r2, 8000b0c <__aeabi_uldivmod+0x18>
 8000af8:	2900      	cmp	r1, #0
 8000afa:	bf08      	it	eq
 8000afc:	2800      	cmpeq	r0, #0
 8000afe:	bf1c      	itt	ne
 8000b00:	f04f 31ff 	movne.w	r1, #4294967295
 8000b04:	f04f 30ff 	movne.w	r0, #4294967295
 8000b08:	f000 b97a 	b.w	8000e00 <__aeabi_idiv0>
 8000b0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b14:	f000 f806 	bl	8000b24 <__udivmoddi4>
 8000b18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b20:	b004      	add	sp, #16
 8000b22:	4770      	bx	lr

08000b24 <__udivmoddi4>:
 8000b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b28:	468c      	mov	ip, r1
 8000b2a:	460d      	mov	r5, r1
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	9e08      	ldr	r6, [sp, #32]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d151      	bne.n	8000bd8 <__udivmoddi4+0xb4>
 8000b34:	428a      	cmp	r2, r1
 8000b36:	4617      	mov	r7, r2
 8000b38:	d96d      	bls.n	8000c16 <__udivmoddi4+0xf2>
 8000b3a:	fab2 fe82 	clz	lr, r2
 8000b3e:	f1be 0f00 	cmp.w	lr, #0
 8000b42:	d00b      	beq.n	8000b5c <__udivmoddi4+0x38>
 8000b44:	f1ce 0c20 	rsb	ip, lr, #32
 8000b48:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b4c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b50:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b54:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b58:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b5c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b60:	0c25      	lsrs	r5, r4, #16
 8000b62:	fbbc f8fa 	udiv	r8, ip, sl
 8000b66:	fa1f f987 	uxth.w	r9, r7
 8000b6a:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b6e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b72:	fb08 f309 	mul.w	r3, r8, r9
 8000b76:	42ab      	cmp	r3, r5
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x6c>
 8000b7a:	19ed      	adds	r5, r5, r7
 8000b7c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b80:	f080 8123 	bcs.w	8000dca <__udivmoddi4+0x2a6>
 8000b84:	42ab      	cmp	r3, r5
 8000b86:	f240 8120 	bls.w	8000dca <__udivmoddi4+0x2a6>
 8000b8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8e:	443d      	add	r5, r7
 8000b90:	1aed      	subs	r5, r5, r3
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b98:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ba0:	fb00 f909 	mul.w	r9, r0, r9
 8000ba4:	45a1      	cmp	r9, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x98>
 8000ba8:	19e4      	adds	r4, r4, r7
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 810a 	bcs.w	8000dc6 <__udivmoddi4+0x2a2>
 8000bb2:	45a1      	cmp	r9, r4
 8000bb4:	f240 8107 	bls.w	8000dc6 <__udivmoddi4+0x2a2>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	eba4 0409 	sub.w	r4, r4, r9
 8000bc0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d061      	beq.n	8000c8e <__udivmoddi4+0x16a>
 8000bca:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bce:	2300      	movs	r3, #0
 8000bd0:	6034      	str	r4, [r6, #0]
 8000bd2:	6073      	str	r3, [r6, #4]
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	d907      	bls.n	8000bec <__udivmoddi4+0xc8>
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	d054      	beq.n	8000c8a <__udivmoddi4+0x166>
 8000be0:	2100      	movs	r1, #0
 8000be2:	e886 0021 	stmia.w	r6, {r0, r5}
 8000be6:	4608      	mov	r0, r1
 8000be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bec:	fab3 f183 	clz	r1, r3
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	f040 808e 	bne.w	8000d12 <__udivmoddi4+0x1ee>
 8000bf6:	42ab      	cmp	r3, r5
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xdc>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2d0>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb65 0503 	sbc.w	r5, r5, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	46ac      	mov	ip, r5
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d03f      	beq.n	8000c8e <__udivmoddi4+0x16a>
 8000c0e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b912      	cbnz	r2, 8000c1e <__udivmoddi4+0xfa>
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c1e:	fab7 fe87 	clz	lr, r7
 8000c22:	f1be 0f00 	cmp.w	lr, #0
 8000c26:	d134      	bne.n	8000c92 <__udivmoddi4+0x16e>
 8000c28:	1beb      	subs	r3, r5, r7
 8000c2a:	0c3a      	lsrs	r2, r7, #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	2101      	movs	r1, #1
 8000c32:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c36:	0c25      	lsrs	r5, r4, #16
 8000c38:	fb02 3318 	mls	r3, r2, r8, r3
 8000c3c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c40:	fb0c f308 	mul.w	r3, ip, r8
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x134>
 8000c48:	19ed      	adds	r5, r5, r7
 8000c4a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x132>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	f200 80d1 	bhi.w	8000df8 <__udivmoddi4+0x2d4>
 8000c56:	4680      	mov	r8, r0
 8000c58:	1aed      	subs	r5, r5, r3
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c60:	fb02 5510 	mls	r5, r2, r0, r5
 8000c64:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c68:	fb0c fc00 	mul.w	ip, ip, r0
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x15c>
 8000c70:	19e4      	adds	r4, r4, r7
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x15a>
 8000c78:	45a4      	cmp	ip, r4
 8000c7a:	f200 80b8 	bhi.w	8000dee <__udivmoddi4+0x2ca>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 040c 	sub.w	r4, r4, ip
 8000c84:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c88:	e79d      	b.n	8000bc6 <__udivmoddi4+0xa2>
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	f1ce 0420 	rsb	r4, lr, #32
 8000c96:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c9a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c9e:	fa20 f804 	lsr.w	r8, r0, r4
 8000ca2:	0c3a      	lsrs	r2, r7, #16
 8000ca4:	fa25 f404 	lsr.w	r4, r5, r4
 8000ca8:	ea48 0803 	orr.w	r8, r8, r3
 8000cac:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cb0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000cb4:	fb02 4411 	mls	r4, r2, r1, r4
 8000cb8:	fa1f fc87 	uxth.w	ip, r7
 8000cbc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cc0:	fb01 f30c 	mul.w	r3, r1, ip
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cca:	d909      	bls.n	8000ce0 <__udivmoddi4+0x1bc>
 8000ccc:	19ed      	adds	r5, r5, r7
 8000cce:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cd2:	f080 808a 	bcs.w	8000dea <__udivmoddi4+0x2c6>
 8000cd6:	42ab      	cmp	r3, r5
 8000cd8:	f240 8087 	bls.w	8000dea <__udivmoddi4+0x2c6>
 8000cdc:	3902      	subs	r1, #2
 8000cde:	443d      	add	r5, r7
 8000ce0:	1aeb      	subs	r3, r5, r3
 8000ce2:	fa1f f588 	uxth.w	r5, r8
 8000ce6:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cea:	fb02 3310 	mls	r3, r2, r0, r3
 8000cee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cf2:	fb00 f30c 	mul.w	r3, r0, ip
 8000cf6:	42ab      	cmp	r3, r5
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x1e6>
 8000cfa:	19ed      	adds	r5, r5, r7
 8000cfc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d00:	d26f      	bcs.n	8000de2 <__udivmoddi4+0x2be>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d96d      	bls.n	8000de2 <__udivmoddi4+0x2be>
 8000d06:	3802      	subs	r0, #2
 8000d08:	443d      	add	r5, r7
 8000d0a:	1aeb      	subs	r3, r5, r3
 8000d0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d10:	e78f      	b.n	8000c32 <__udivmoddi4+0x10e>
 8000d12:	f1c1 0720 	rsb	r7, r1, #32
 8000d16:	fa22 f807 	lsr.w	r8, r2, r7
 8000d1a:	408b      	lsls	r3, r1
 8000d1c:	fa05 f401 	lsl.w	r4, r5, r1
 8000d20:	ea48 0303 	orr.w	r3, r8, r3
 8000d24:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d28:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d32:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d36:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d3a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d3e:	fa1f f883 	uxth.w	r8, r3
 8000d42:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d46:	fb09 f408 	mul.w	r4, r9, r8
 8000d4a:	42ac      	cmp	r4, r5
 8000d4c:	fa02 f201 	lsl.w	r2, r2, r1
 8000d50:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x244>
 8000d56:	18ed      	adds	r5, r5, r3
 8000d58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d5c:	d243      	bcs.n	8000de6 <__udivmoddi4+0x2c2>
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	d941      	bls.n	8000de6 <__udivmoddi4+0x2c2>
 8000d62:	f1a9 0902 	sub.w	r9, r9, #2
 8000d66:	441d      	add	r5, r3
 8000d68:	1b2d      	subs	r5, r5, r4
 8000d6a:	fa1f fe8e 	uxth.w	lr, lr
 8000d6e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d72:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d76:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d7a:	fb00 f808 	mul.w	r8, r0, r8
 8000d7e:	45a0      	cmp	r8, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x26e>
 8000d82:	18e4      	adds	r4, r4, r3
 8000d84:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d88:	d229      	bcs.n	8000dde <__udivmoddi4+0x2ba>
 8000d8a:	45a0      	cmp	r8, r4
 8000d8c:	d927      	bls.n	8000dde <__udivmoddi4+0x2ba>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	441c      	add	r4, r3
 8000d92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d96:	eba4 0408 	sub.w	r4, r4, r8
 8000d9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d9e:	454c      	cmp	r4, r9
 8000da0:	46c6      	mov	lr, r8
 8000da2:	464d      	mov	r5, r9
 8000da4:	d315      	bcc.n	8000dd2 <__udivmoddi4+0x2ae>
 8000da6:	d012      	beq.n	8000dce <__udivmoddi4+0x2aa>
 8000da8:	b156      	cbz	r6, 8000dc0 <__udivmoddi4+0x29c>
 8000daa:	ebba 030e 	subs.w	r3, sl, lr
 8000dae:	eb64 0405 	sbc.w	r4, r4, r5
 8000db2:	fa04 f707 	lsl.w	r7, r4, r7
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431f      	orrs	r7, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	6037      	str	r7, [r6, #0]
 8000dbe:	6074      	str	r4, [r6, #4]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e6f8      	b.n	8000bbc <__udivmoddi4+0x98>
 8000dca:	4690      	mov	r8, r2
 8000dcc:	e6e0      	b.n	8000b90 <__udivmoddi4+0x6c>
 8000dce:	45c2      	cmp	sl, r8
 8000dd0:	d2ea      	bcs.n	8000da8 <__udivmoddi4+0x284>
 8000dd2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dd6:	eb69 0503 	sbc.w	r5, r9, r3
 8000dda:	3801      	subs	r0, #1
 8000ddc:	e7e4      	b.n	8000da8 <__udivmoddi4+0x284>
 8000dde:	4628      	mov	r0, r5
 8000de0:	e7d7      	b.n	8000d92 <__udivmoddi4+0x26e>
 8000de2:	4640      	mov	r0, r8
 8000de4:	e791      	b.n	8000d0a <__udivmoddi4+0x1e6>
 8000de6:	4681      	mov	r9, r0
 8000de8:	e7be      	b.n	8000d68 <__udivmoddi4+0x244>
 8000dea:	4601      	mov	r1, r0
 8000dec:	e778      	b.n	8000ce0 <__udivmoddi4+0x1bc>
 8000dee:	3802      	subs	r0, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	e745      	b.n	8000c80 <__udivmoddi4+0x15c>
 8000df4:	4608      	mov	r0, r1
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xe6>
 8000df8:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfc:	443d      	add	r5, r7
 8000dfe:	e72b      	b.n	8000c58 <__udivmoddi4+0x134>

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000e0c:	2254      	movs	r2, #84	; 0x54
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <MPU6050_Init+0x1c>)
 8000e12:	f00a fba9 	bl	800b568 <memcpy>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000d4 	.word	0x200000d4

08000e24 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8000e34:	23d0      	movs	r3, #208	; 0xd0
 8000e36:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	b299      	uxth	r1, r3
 8000e40:	f107 020c 	add.w	r2, r7, #12
 8000e44:	230a      	movs	r3, #10
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <I2C_Read+0x4c>)
 8000e4c:	f006 fd4c 	bl	80078e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	b299      	uxth	r1, r3
 8000e54:	79bb      	ldrb	r3, [r7, #6]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	2364      	movs	r3, #100	; 0x64
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <I2C_Read+0x4c>)
 8000e62:	f006 fe3f 	bl	8007ae4 <HAL_I2C_Master_Receive>
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000d4 	.word	0x200000d4

08000e74 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8000e8c:	23d0      	movs	r3, #208	; 0xd0
 8000e8e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	b299      	uxth	r1, r3
 8000e94:	f107 020c 	add.w	r2, r7, #12
 8000e98:	2364      	movs	r3, #100	; 0x64
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <I2C_Write8+0x38>)
 8000ea0:	f006 fd22 	bl	80078e8 <HAL_I2C_Master_Transmit>
}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000d4 	.word	0x200000d4

08000eb0 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
	//Clock Source
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	206b      	movs	r0, #107	; 0x6b
 8000ec0:	f7ff ffd8 	bl	8000e74 <I2C_Write8>
	HAL_Delay(100);
 8000ec4:	2064      	movs	r0, #100	; 0x64
 8000ec6:	f005 f985 	bl	80061d4 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	019b      	lsls	r3, r3, #6
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	206b      	movs	r0, #107	; 0x6b
 8000ef2:	f7ff ffbf 	bl	8000e74 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8000ef6:	2064      	movs	r0, #100	; 0x64
 8000ef8:	f005 f96c 	bl	80061d4 <HAL_Delay>

	//Set the Digital Low Pass Filter
	Buffer = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	78db      	ldrb	r3, [r3, #3]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	201a      	movs	r0, #26
 8000f10:	f7ff ffb0 	bl	8000e74 <I2C_Write8>

	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0318 	and.w	r3, r3, #24
 8000f24:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	201b      	movs	r0, #27
 8000f2c:	f7ff ffa2 	bl	8000e74 <I2C_Write8>

	//Select the Accelerometer Full Scale Range
	Buffer = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	789b      	ldrb	r3, [r3, #2]
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f003 0318 	and.w	r3, r3, #24
 8000f40:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	4619      	mov	r1, r3
 8000f46:	201c      	movs	r0, #28
 8000f48:	f7ff ff94 	bl	8000e74 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8000f4c:	2004      	movs	r0, #4
 8000f4e:	f000 f857 	bl	8001000 <MPU6050_Set_SMPRT_DIV>


	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	789b      	ldrb	r3, [r3, #2]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d81a      	bhi.n	8000f90 <MPU6050_Config+0xe0>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <MPU6050_Config+0xb0>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08000f79 	.word	0x08000f79
 8000f68:	08000f81 	.word	0x08000f81
 8000f6c:	08000f89 	.word	0x08000f89
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MPU6050_Config+0x12c>)
 8000f72:	4a1b      	ldr	r2, [pc, #108]	; (8000fe0 <MPU6050_Config+0x130>)
 8000f74:	601a      	str	r2, [r3, #0]
			break;
 8000f76:	e00c      	b.n	8000f92 <MPU6050_Config+0xe2>

		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MPU6050_Config+0x12c>)
 8000f7a:	4a1a      	ldr	r2, [pc, #104]	; (8000fe4 <MPU6050_Config+0x134>)
 8000f7c:	601a      	str	r2, [r3, #0]
				break;
 8000f7e:	e008      	b.n	8000f92 <MPU6050_Config+0xe2>

		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MPU6050_Config+0x12c>)
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <MPU6050_Config+0x138>)
 8000f84:	601a      	str	r2, [r3, #0]
			break;
 8000f86:	e004      	b.n	8000f92 <MPU6050_Config+0xe2>

		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MPU6050_Config+0x12c>)
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <MPU6050_Config+0x13c>)
 8000f8c:	601a      	str	r2, [r3, #0]
			break;
 8000f8e:	e000      	b.n	8000f92 <MPU6050_Config+0xe2>

		default:
			break;
 8000f90:	bf00      	nop
	}
	//Gyroscope Scaling Factor
	switch (config->Gyro_Full_Scale)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d81a      	bhi.n	8000fd0 <MPU6050_Config+0x120>
 8000f9a:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <MPU6050_Config+0xf0>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	08000fb1 	.word	0x08000fb1
 8000fa4:	08000fb9 	.word	0x08000fb9
 8000fa8:	08000fc1 	.word	0x08000fc1
 8000fac:	08000fc9 	.word	0x08000fc9
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MPU6050_Config+0x140>)
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <MPU6050_Config+0x144>)
 8000fb4:	601a      	str	r2, [r3, #0]
			break;
 8000fb6:	e00c      	b.n	8000fd2 <MPU6050_Config+0x122>

		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <MPU6050_Config+0x140>)
 8000fba:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <MPU6050_Config+0x148>)
 8000fbc:	601a      	str	r2, [r3, #0]
				break;
 8000fbe:	e008      	b.n	8000fd2 <MPU6050_Config+0x122>

		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MPU6050_Config+0x140>)
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <MPU6050_Config+0x14c>)
 8000fc4:	601a      	str	r2, [r3, #0]
			break;
 8000fc6:	e004      	b.n	8000fd2 <MPU6050_Config+0x122>

		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MPU6050_Config+0x140>)
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <MPU6050_Config+0x130>)
 8000fcc:	601a      	str	r2, [r3, #0]
			break;
 8000fce:	e000      	b.n	8000fd2 <MPU6050_Config+0x122>

		default:
			break;
 8000fd0:	bf00      	nop
	}

}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000128 	.word	0x20000128
 8000fe0:	3d7a0000 	.word	0x3d7a0000
 8000fe4:	3dfa0000 	.word	0x3dfa0000
 8000fe8:	3e7a0000 	.word	0x3e7a0000
 8000fec:	3efa0000 	.word	0x3efa0000
 8000ff0:	2000012c 	.word	0x2000012c
 8000ff4:	3bfa0000 	.word	0x3bfa0000
 8000ff8:	3c7a0000 	.word	0x3c7a0000
 8000ffc:	3cfa0000 	.word	0x3cfa0000

08001000 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4619      	mov	r1, r3
 800100e:	2019      	movs	r0, #25
 8001010:	f7ff ff30 	bl	8000e74 <I2C_Write8>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MPU6050_Get_Accel_RawData>:

}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	3301      	adds	r3, #1
 800102a:	2201      	movs	r2, #1
 800102c:	4619      	mov	r1, r3
 800102e:	203a      	movs	r0, #58	; 0x3a
 8001030:	f7ff fef8 	bl	8000e24 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001034:	7f7b      	ldrb	r3, [r7, #29]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d04f      	beq.n	80010da <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	2206      	movs	r2, #6
 8001040:	4619      	mov	r1, r3
 8001042:	203b      	movs	r0, #59	; 0x3b
 8001044:	f7ff feee 	bl	8000e24 <I2C_Read>

		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001048:	7d3b      	ldrb	r3, [r7, #20]
 800104a:	b29b      	uxth	r3, r3
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b29a      	uxth	r2, r3
 8001050:	7d7b      	ldrb	r3, [r7, #21]
 8001052:	b29b      	uxth	r3, r3
 8001054:	4413      	add	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	b21a      	sxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 800105e:	7dbb      	ldrb	r3, [r7, #22]
 8001060:	b29b      	uxth	r3, r3
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b29a      	uxth	r2, r3
 8001066:	7dfb      	ldrb	r3, [r7, #23]
 8001068:	b29b      	uxth	r3, r3
 800106a:	4413      	add	r3, r2
 800106c:	b29b      	uxth	r3, r3
 800106e:	b21a      	sxth	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001074:	7e3b      	ldrb	r3, [r7, #24]
 8001076:	b29b      	uxth	r3, r3
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b29a      	uxth	r2, r3
 800107c:	7e7b      	ldrb	r3, [r7, #25]
 800107e:	b29b      	uxth	r3, r3
 8001080:	4413      	add	r3, r2
 8001082:	b29b      	uxth	r3, r3
 8001084:	b21a      	sxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2206      	movs	r2, #6
 8001090:	4619      	mov	r1, r3
 8001092:	2043      	movs	r0, #67	; 0x43
 8001094:	f7ff fec6 	bl	8000e24 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001098:	7b3b      	ldrb	r3, [r7, #12]
 800109a:	b29b      	uxth	r3, r3
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b29a      	uxth	r2, r3
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MPU6050_Get_Accel_RawData+0xc8>)
 80010ac:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b21a      	sxth	r2, r3
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MPU6050_Get_Accel_RawData+0xc8>)
 80010c2:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80010c4:	7c3b      	ldrb	r3, [r7, #16]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	7c7b      	ldrb	r3, [r7, #17]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4413      	add	r3, r2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <MPU6050_Get_Accel_RawData+0xc8>)
 80010d8:	809a      	strh	r2, [r3, #4]
	}
}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000130 	.word	0x20000130

080010e8 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff91 	bl	800101c <MPU6050_Get_Accel_RawData>

	//Accel Scale data
	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
 80010fa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001170 <MPU6050_Get_Accel_Scale+0x88>
 800110a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <MPU6050_Get_Accel_Scale+0x8c>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
 800111e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001170 <MPU6050_Get_Accel_Scale+0x88>
 800112e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MPU6050_Get_Accel_Scale+0x8c>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
 8001142:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001170 <MPU6050_Get_Accel_Scale+0x88>
 8001152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MPU6050_Get_Accel_Scale+0x8c>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	00000000 	.word	0x00000000
 8001174:	20000128 	.word	0x20000128

08001178 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MPU6050_Get_Gyro_RawData+0x34>)
 8001182:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MPU6050_Get_Gyro_RawData+0x34>)
 800118c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <MPU6050_Get_Gyro_RawData+0x34>)
 8001196:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	809a      	strh	r2, [r3, #4]

}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000130 	.word	0x20000130

080011b0 <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ffdb 	bl	8001178 <MPU6050_Get_Gyro_RawData>

	//Gyro Scale data
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 80011c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MPU6050_Get_Gyro_Scale+0x70>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 80011de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <MPU6050_Get_Gyro_Scale+0x70>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 80011fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MPU6050_Get_Gyro_Scale+0x70>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000012c 	.word	0x2000012c

08001224 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart2, Rx_data, 4);

	if (Rx_data[0] == 's') {
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_UART_RxCpltCallback+0x2c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b73      	cmp	r3, #115	; 0x73
 8001232:	d109      	bne.n	8001248 <HAL_UART_RxCpltCallback+0x24>
		HAL_UART_Transmit(&huart1, (uint8_t *)Tx_data, strlen(Tx_data), 10);
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <HAL_UART_RxCpltCallback+0x30>)
 8001236:	f7fe ffeb 	bl	8000210 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	230a      	movs	r3, #10
 8001240:	4904      	ldr	r1, [pc, #16]	; (8001254 <HAL_UART_RxCpltCallback+0x30>)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_UART_RxCpltCallback+0x34>)
 8001244:	f009 f9bb 	bl	800a5be <HAL_UART_Transmit>

	}

}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000034c 	.word	0x2000034c
 8001254:	20000024 	.word	0x20000024
 8001258:	20000514 	.word	0x20000514

0800125c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8001262:	f004 ff45 	bl	80060f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001266:	f002 fc7d 	bl	8003b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126a:	f003 f97f 	bl	800456c <MX_GPIO_Init>
  MX_DMA_Init();
 800126e:	f003 f95d 	bl	800452c <MX_DMA_Init>
  MX_TIM1_Init();
 8001272:	f002 fd5d 	bl	8003d30 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001276:	f002 fe45 	bl	8003f04 <MX_TIM3_Init>
  MX_TIM4_Init();
 800127a:	f002 feb9 	bl	8003ff0 <MX_TIM4_Init>
  MX_TIM8_Init();
 800127e:	f002 ff9d 	bl	80041bc <MX_TIM8_Init>
  MX_TIM11_Init();
 8001282:	f003 f863 	bl	800434c <MX_TIM11_Init>
  MX_TIM2_Init();
 8001286:	f002 fdcd 	bl	8003e24 <MX_TIM2_Init>
  MX_TIM5_Init();
 800128a:	f002 ff27 	bl	80040dc <MX_TIM5_Init>
  MX_TIM10_Init();
 800128e:	f003 f80f 	bl	80042b0 <MX_TIM10_Init>
  MX_TIM13_Init();
 8001292:	f003 f8a9 	bl	80043e8 <MX_TIM13_Init>
  MX_ADC1_Init();
 8001296:	f002 fcd1 	bl	8003c3c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800129a:	f003 f8f3 	bl	8004484 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800129e:	f003 f91b 	bl	80044d8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80012a2:	f002 fd17 	bl	8003cd4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //PWM
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80012a6:	2100      	movs	r1, #0
 80012a8:	48a7      	ldr	r0, [pc, #668]	; (8001548 <main+0x2ec>)
 80012aa:	f007 ff1d 	bl	80090e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80012ae:	2100      	movs	r1, #0
 80012b0:	48a6      	ldr	r0, [pc, #664]	; (800154c <main+0x2f0>)
 80012b2:	f007 ff19 	bl	80090e8 <HAL_TIM_PWM_Start>

  //Input Capture
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80012b6:	2100      	movs	r1, #0
 80012b8:	48a5      	ldr	r0, [pc, #660]	; (8001550 <main+0x2f4>)
 80012ba:	f007 ffab 	bl	8009214 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80012be:	2100      	movs	r1, #0
 80012c0:	48a4      	ldr	r0, [pc, #656]	; (8001554 <main+0x2f8>)
 80012c2:	f007 ffa7 	bl	8009214 <HAL_TIM_IC_Start_IT>

  //Ulrasonic ECHO Capture and TRIG Start
  HAL_TIM_Base_Start(&htim1);
 80012c6:	48a4      	ldr	r0, [pc, #656]	; (8001558 <main+0x2fc>)
 80012c8:	f007 feb5 	bl	8009036 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80012cc:	48a3      	ldr	r0, [pc, #652]	; (800155c <main+0x300>)
 80012ce:	f007 feb2 	bl	8009036 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 80012d2:	48a3      	ldr	r0, [pc, #652]	; (8001560 <main+0x304>)
 80012d4:	f007 feaf 	bl	8009036 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 80012d8:	48a2      	ldr	r0, [pc, #648]	; (8001564 <main+0x308>)
 80012da:	f007 feac 	bl	8009036 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 80012de:	48a2      	ldr	r0, [pc, #648]	; (8001568 <main+0x30c>)
 80012e0:	f007 fea9 	bl	8009036 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 80012e4:	48a0      	ldr	r0, [pc, #640]	; (8001568 <main+0x30c>)
 80012e6:	f007 fea6 	bl	8009036 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80012ea:	2100      	movs	r1, #0
 80012ec:	489e      	ldr	r0, [pc, #632]	; (8001568 <main+0x30c>)
 80012ee:	f007 fefb 	bl	80090e8 <HAL_TIM_PWM_Start>


  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_2);
 80012f2:	2104      	movs	r1, #4
 80012f4:	489b      	ldr	r0, [pc, #620]	; (8001564 <main+0x308>)
 80012f6:	f007 ff6a 	bl	80091ce <HAL_TIM_IC_Start>


  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 80012fa:	2104      	movs	r1, #4
 80012fc:	4896      	ldr	r0, [pc, #600]	; (8001558 <main+0x2fc>)
 80012fe:	f007 ff66 	bl	80091ce <HAL_TIM_IC_Start>


  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8001302:	2104      	movs	r1, #4
 8001304:	4895      	ldr	r0, [pc, #596]	; (800155c <main+0x300>)
 8001306:	f007 ff62 	bl	80091ce <HAL_TIM_IC_Start>


  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 800130a:	2104      	movs	r1, #4
 800130c:	4894      	ldr	r0, [pc, #592]	; (8001560 <main+0x304>)
 800130e:	f007 ff5e 	bl	80091ce <HAL_TIM_IC_Start>

  TIM11->CCR1 = 3;
 8001312:	4b96      	ldr	r3, [pc, #600]	; (800156c <main+0x310>)
 8001314:	2203      	movs	r2, #3
 8001316:	635a      	str	r2, [r3, #52]	; 0x34

  //Start Condition for motors
  //motor A
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2102      	movs	r1, #2
 800131c:	4894      	ldr	r0, [pc, #592]	; (8001570 <main+0x314>)
 800131e:	f006 f979 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001328:	4891      	ldr	r0, [pc, #580]	; (8001570 <main+0x314>)
 800132a:	f006 f973 	bl	8007614 <HAL_GPIO_WritePin>
  //motor B
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001334:	488e      	ldr	r0, [pc, #568]	; (8001570 <main+0x314>)
 8001336:	f006 f96d 	bl	8007614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001340:	488b      	ldr	r0, [pc, #556]	; (8001570 <main+0x314>)
 8001342:	f006 f967 	bl	8007614 <HAL_GPIO_WritePin>


  //UART RX DMA
  HAL_UART_Receive_DMA(&huart1, Rx_data, 1);
 8001346:	2201      	movs	r2, #1
 8001348:	498a      	ldr	r1, [pc, #552]	; (8001574 <main+0x318>)
 800134a:	488b      	ldr	r0, [pc, #556]	; (8001578 <main+0x31c>)
 800134c:	f009 f9d0 	bl	800a6f0 <HAL_UART_Receive_DMA>


  //1.Initialize the MPU 6050 Module I2C interface
  MPU6050_Init(&hi2c2);
 8001350:	488a      	ldr	r0, [pc, #552]	; (800157c <main+0x320>)
 8001352:	f7ff fd57 	bl	8000e04 <MPU6050_Init>
  //2. Configure the Accelerometer and Gyro Parameters
  myMPUConfig.Accel_Full_Scale = AFS_SEL_4g;
 8001356:	2301      	movs	r3, #1
 8001358:	70bb      	strb	r3, [r7, #2]
  myMPUConfig.Gyro_Full_Scale = FS_SEL_2000;
 800135a:	2303      	movs	r3, #3
 800135c:	707b      	strb	r3, [r7, #1]
  myMPUConfig.ClockSource = Internal_8MHz;
 800135e:	2300      	movs	r3, #0
 8001360:	703b      	strb	r3, [r7, #0]
  myMPUConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;    //Digital LPF
 8001362:	2301      	movs	r3, #1
 8001364:	70fb      	strb	r3, [r7, #3]
  myMPUConfig.Gyro_Full_Scale = FS_SEL_500;
 8001366:	2301      	movs	r3, #1
 8001368:	707b      	strb	r3, [r7, #1]
  myMPUConfig.Sleep_Mode_Bit = 0;				 //0 - Normal mode || 1 - Sleep Mode
 800136a:	2300      	movs	r3, #0
 800136c:	713b      	strb	r3, [r7, #4]
  MPU6050_Config(&myMPUConfig);
 800136e:	463b      	mov	r3, r7
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fd9d 	bl	8000eb0 <MPU6050_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(startFlag == true){
 8001376:	4b82      	ldr	r3, [pc, #520]	; (8001580 <main+0x324>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f002 83b9 	beq.w	8003af2 <main+0x2896>
		  //TurnLED on
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2120      	movs	r1, #32
 8001384:	487f      	ldr	r0, [pc, #508]	; (8001584 <main+0x328>)
 8001386:	f006 f945 	bl	8007614 <HAL_GPIO_WritePin>

		  //READ CURRENT POSITION FROM ULTRASONIC SENSORS
		  readUltrasonicDistance();
 800138a:	f003 f999 	bl	80046c0 <readUltrasonicDistance>

		  //DETERMINE CURRENT POSITION ON WINDOW
		  positionToDo = positionScan();
 800138e:	f003 fd01 	bl	8004d94 <positionScan>
 8001392:	4602      	mov	r2, r0
 8001394:	4b7c      	ldr	r3, [pc, #496]	; (8001588 <main+0x32c>)
 8001396:	601a      	str	r2, [r3, #0]
//				//HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
//				//turnLeftTrackReverse();
//			}

		  //readContamination();
		  switch (positionToDo) {
 8001398:	4b7b      	ldr	r3, [pc, #492]	; (8001588 <main+0x32c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	2b0b      	cmp	r3, #11
 80013a0:	f202 83b0 	bhi.w	8003b04 <main+0x28a8>
 80013a4:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <main+0x150>)
 80013a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013aa:	bf00      	nop
 80013ac:	080013dd 	.word	0x080013dd
 80013b0:	080015c5 	.word	0x080015c5
 80013b4:	08001835 	.word	0x08001835
 80013b8:	08001a9b 	.word	0x08001a9b
 80013bc:	08001d09 	.word	0x08001d09
 80013c0:	08001f3d 	.word	0x08001f3d
 80013c4:	080026ab 	.word	0x080026ab
 80013c8:	08002869 	.word	0x08002869
 80013cc:	08002ae5 	.word	0x08002ae5
 80013d0:	08002d99 	.word	0x08002d99
 80013d4:	080031f1 	.word	0x080031f1
 80013d8:	0800360b 	.word	0x0800360b

		  //BOTTOM RIGHT
			case 1:

				//STOP FOR 2.5 SEC
				stop();
 80013dc:	f003 fef2 	bl	80051c4 <stop>
				HAL_Delay(2500);
 80013e0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80013e4:	f004 fef6 	bl	80061d4 <HAL_Delay>

				//RE-READ ULTRASONIC SENSORS AND RECHECK POSITION
				readUltrasonicDistance();
 80013e8:	f003 f96a 	bl	80046c0 <readUltrasonicDistance>
				positionToDo = positionScan();
 80013ec:	f003 fcd2 	bl	8004d94 <positionScan>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b65      	ldr	r3, [pc, #404]	; (8001588 <main+0x32c>)
 80013f4:	601a      	str	r2, [r3, #0]
				if(positionToDo == 1){
 80013f6:	4b64      	ldr	r3, [pc, #400]	; (8001588 <main+0x32c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f042 8385 	bne.w	8003b0a <main+0x28ae>

					//UART CURRENT POSITION
					UARTposition(positionToDo);
 8001400:	4b61      	ldr	r3, [pc, #388]	; (8001588 <main+0x32c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f003 ff73 	bl	80052f0 <UARTposition>
//					UARTRight(right);
//					UARTFront(front);
//					UARTBottom(bottom);

					//SET AND CLEAR APPROPRIATE FLAGS
					bottomRightFlag = true;
 800140a:	4b60      	ldr	r3, [pc, #384]	; (800158c <main+0x330>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
					rightFlag = true;
 8001410:	4b5f      	ldr	r3, [pc, #380]	; (8001590 <main+0x334>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
					LeftFlag = false;
 8001416:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <main+0x338>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
					topFlag = false;
 800141c:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <main+0x33c>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]


					//Read Contamination Status
					readContamination();
 8001422:	f004 f873 	bl	800550c <readContamination>


					if(dayNight == 0){
 8001426:	4b5d      	ldr	r3, [pc, #372]	; (800159c <main+0x340>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d142      	bne.n	80014b4 <main+0x258>
						if( (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold) ){
 800142e:	4b5c      	ldr	r3, [pc, #368]	; (80015a0 <main+0x344>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b5c      	ldr	r3, [pc, #368]	; (80015a4 <main+0x348>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d31a      	bcc.n	8001470 <main+0x214>
 800143a:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <main+0x34c>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b59      	ldr	r3, [pc, #356]	; (80015a4 <main+0x348>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d314      	bcc.n	8001470 <main+0x214>
 8001446:	4b59      	ldr	r3, [pc, #356]	; (80015ac <main+0x350>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <main+0x348>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d30e      	bcc.n	8001470 <main+0x214>
 8001452:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <main+0x354>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <main+0x348>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d308      	bcc.n	8001470 <main+0x214>
 800145e:	4b55      	ldr	r3, [pc, #340]	; (80015b4 <main+0x358>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b50      	ldr	r3, [pc, #320]	; (80015a4 <main+0x348>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d302      	bcc.n	8001470 <main+0x214>
							//UART CONTAMINATION STATUS
							//UARTContaminationFound();
							//CONTAMINATION ACTIONS
							cleaningAction();
 800146a:	f004 f933 	bl	80056d4 <cleaningAction>
 800146e:	e069      	b.n	8001544 <main+0x2e8>
						}else{
							//UART CONTAMINATION STATUS
							//UARTContaminationNOTFound();
							//CHERCK IF OTHER CORNERS HAVE BEEN LEFT OUT
							if( (topRightFlag == 0) || (bottomLeftFlag == 0) || (topLeftFlag == 0) ){
 8001470:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <main+0x35c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10d      	bne.n	800149a <main+0x23e>
 800147e:	4b4f      	ldr	r3, [pc, #316]	; (80015bc <main+0x360>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f083 0301 	eor.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <main+0x23e>
 800148c:	4b4c      	ldr	r3, [pc, #304]	; (80015c0 <main+0x364>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d008      	beq.n	80014ac <main+0x250>
								moveForward();
 800149a:	f003 fe75 	bl	8005188 <moveForward>
								HAL_Delay(8000);
 800149e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80014a2:	f004 fe97 	bl	80061d4 <HAL_Delay>
								stop();
 80014a6:	f003 fe8d 	bl	80051c4 <stop>
 80014aa:	e04b      	b.n	8001544 <main+0x2e8>
							}else{
								stop();
 80014ac:	f003 fe8a 	bl	80051c4 <stop>
					}



				}
				break;
 80014b0:	f002 bb2b 	b.w	8003b0a <main+0x28ae>
					}else if (dayNight == 1) {
 80014b4:	4b39      	ldr	r3, [pc, #228]	; (800159c <main+0x340>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	f042 8326 	bne.w	8003b0a <main+0x28ae>
						if( (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold) ){
 80014be:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <main+0x344>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <main+0x348>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d81a      	bhi.n	8001500 <main+0x2a4>
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <main+0x34c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <main+0x348>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d814      	bhi.n	8001500 <main+0x2a4>
 80014d6:	4b35      	ldr	r3, [pc, #212]	; (80015ac <main+0x350>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <main+0x348>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d80e      	bhi.n	8001500 <main+0x2a4>
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <main+0x354>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <main+0x348>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d808      	bhi.n	8001500 <main+0x2a4>
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <main+0x358>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <main+0x348>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d802      	bhi.n	8001500 <main+0x2a4>
							cleaningAction();
 80014fa:	f004 f8eb 	bl	80056d4 <cleaningAction>
 80014fe:	e021      	b.n	8001544 <main+0x2e8>
							if( (topRightFlag == 0) || (bottomLeftFlag == 0) || (topLeftFlag == 0) ){
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <main+0x35c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	f083 0301 	eor.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <main+0x2ce>
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <main+0x360>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f083 0301 	eor.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d106      	bne.n	800152a <main+0x2ce>
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <main+0x364>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	f083 0301 	eor.w	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d008      	beq.n	800153c <main+0x2e0>
								moveForward();
 800152a:	f003 fe2d 	bl	8005188 <moveForward>
								HAL_Delay(8000);
 800152e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001532:	f004 fe4f 	bl	80061d4 <HAL_Delay>
								stop();
 8001536:	f003 fe45 	bl	80051c4 <stop>
 800153a:	e003      	b.n	8001544 <main+0x2e8>
								stop();
 800153c:	f003 fe42 	bl	80051c4 <stop>
				break;
 8001540:	f002 bae3 	b.w	8003b0a <main+0x28ae>
 8001544:	f002 bae1 	b.w	8003b0a <main+0x28ae>
 8001548:	200002b0 	.word	0x200002b0
 800154c:	200004d4 	.word	0x200004d4
 8001550:	200006f4 	.word	0x200006f4
 8001554:	20000364 	.word	0x20000364
 8001558:	20000678 	.word	0x20000678
 800155c:	200003ac 	.word	0x200003ac
 8001560:	20000244 	.word	0x20000244
 8001564:	200001fc 	.word	0x200001fc
 8001568:	200005b8 	.word	0x200005b8
 800156c:	40014800 	.word	0x40014800
 8001570:	40020400 	.word	0x40020400
 8001574:	2000034c 	.word	0x2000034c
 8001578:	20000514 	.word	0x20000514
 800157c:	200002f0 	.word	0x200002f0
 8001580:	20000154 	.word	0x20000154
 8001584:	40020000 	.word	0x40020000
 8001588:	200004c4 	.word	0x200004c4
 800158c:	20000155 	.word	0x20000155
 8001590:	200002a4 	.word	0x200002a4
 8001594:	20000294 	.word	0x20000294
 8001598:	20000400 	.word	0x20000400
 800159c:	20000040 	.word	0x20000040
 80015a0:	200006f0 	.word	0x200006f0
 80015a4:	2000016c 	.word	0x2000016c
 80015a8:	2000079c 	.word	0x2000079c
 80015ac:	200004c0 	.word	0x200004c0
 80015b0:	200006ec 	.word	0x200006ec
 80015b4:	200006dc 	.word	0x200006dc
 80015b8:	20000156 	.word	0x20000156
 80015bc:	20000157 	.word	0x20000157
 80015c0:	20000158 	.word	0x20000158

		   //RIGHT
			case 2:

				//UART CURRENT POSITION
				UARTposition(positionToDo);
 80015c4:	4b8d      	ldr	r3, [pc, #564]	; (80017fc <main+0x5a0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fe91 	bl	80052f0 <UARTposition>
//				UARTRight(right);
//				UARTFront(front);
//				UARTBottom(bottom);

				//SET AND CLEAR APPROPRIATE FLAGS
				rightFlag = true;
 80015ce:	4b8c      	ldr	r3, [pc, #560]	; (8001800 <main+0x5a4>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
				LeftFlag = false;
 80015d4:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <main+0x5a8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]


				//Read Contamination Status
				readContamination();
 80015da:	f003 ff97 	bl	800550c <readContamination>

				if(dayNight==0){
 80015de:	4b8a      	ldr	r3, [pc, #552]	; (8001808 <main+0x5ac>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f040 8081 	bne.w	80016ea <main+0x48e>
					if( (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold) ){
 80015e8:	4b88      	ldr	r3, [pc, #544]	; (800180c <main+0x5b0>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b88      	ldr	r3, [pc, #544]	; (8001810 <main+0x5b4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d31a      	bcc.n	800162a <main+0x3ce>
 80015f4:	4b87      	ldr	r3, [pc, #540]	; (8001814 <main+0x5b8>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b85      	ldr	r3, [pc, #532]	; (8001810 <main+0x5b4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d314      	bcc.n	800162a <main+0x3ce>
 8001600:	4b85      	ldr	r3, [pc, #532]	; (8001818 <main+0x5bc>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b82      	ldr	r3, [pc, #520]	; (8001810 <main+0x5b4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d30e      	bcc.n	800162a <main+0x3ce>
 800160c:	4b83      	ldr	r3, [pc, #524]	; (800181c <main+0x5c0>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b7f      	ldr	r3, [pc, #508]	; (8001810 <main+0x5b4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d308      	bcc.n	800162a <main+0x3ce>
 8001618:	4b81      	ldr	r3, [pc, #516]	; (8001820 <main+0x5c4>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b7c      	ldr	r3, [pc, #496]	; (8001810 <main+0x5b4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d302      	bcc.n	800162a <main+0x3ce>
						//UART CONTAMINATION STATUS
						//UARTContaminationFound();
						//CONTAMINATION ACTIONS
						cleaningAction();
 8001624:	f004 f856 	bl	80056d4 <cleaningAction>
 8001628:	e0e5      	b.n	80017f6 <main+0x59a>
						//UART CONTAMINATION STATUS
						//UARTContaminationNOTFound();
						//CHECK DIRECTION OF MOVEMENT

						//INCREMENT COUNTER
						right_counter++;
 800162a:	4b7e      	ldr	r3, [pc, #504]	; (8001824 <main+0x5c8>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b7c      	ldr	r3, [pc, #496]	; (8001824 <main+0x5c8>)
 8001634:	801a      	strh	r2, [r3, #0]
						if(right_counter == 100){
 8001636:	4b7b      	ldr	r3, [pc, #492]	; (8001824 <main+0x5c8>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d146      	bne.n	80016cc <main+0x470>
							right_counter=0;
 800163e:	4b79      	ldr	r3, [pc, #484]	; (8001824 <main+0x5c8>)
 8001640:	2200      	movs	r2, #0
 8001642:	801a      	strh	r2, [r3, #0]
							stop();
 8001644:	f003 fdbe 	bl	80051c4 <stop>
							HAL_Delay(250);
 8001648:	20fa      	movs	r0, #250	; 0xfa
 800164a:	f004 fdc3 	bl	80061d4 <HAL_Delay>
							//RE-ADJUST ALLIGNMENT
								readAccelerometer();
 800164e:	f003 fff9 	bl	8005644 <readAccelerometer>
								if(ACCxValue > accThreshold_x){
 8001652:	4b75      	ldr	r3, [pc, #468]	; (8001828 <main+0x5cc>)
 8001654:	ed93 7a00 	vldr	s14, [r3]
 8001658:	4b74      	ldr	r3, [pc, #464]	; (800182c <main+0x5d0>)
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	dd13      	ble.n	8001690 <main+0x434>
									while(ACCxValue > accThreshold_x){
 8001668:	e006      	b.n	8001678 <main+0x41c>
										readAccelerometer();
 800166a:	f003 ffeb 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 800166e:	200a      	movs	r0, #10
 8001670:	f004 fdb0 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 8001674:	f003 fe1e 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){
 8001678:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <main+0x5cc>)
 800167a:	ed93 7a00 	vldr	s14, [r3]
 800167e:	4b6b      	ldr	r3, [pc, #428]	; (800182c <main+0x5d0>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	dced      	bgt.n	800166a <main+0x40e>
 800168e:	e01d      	b.n	80016cc <main+0x470>
									}
								}else if(ACCxValue < accThreshold_x){
 8001690:	4b65      	ldr	r3, [pc, #404]	; (8001828 <main+0x5cc>)
 8001692:	ed93 7a00 	vldr	s14, [r3]
 8001696:	4b65      	ldr	r3, [pc, #404]	; (800182c <main+0x5d0>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	d512      	bpl.n	80016cc <main+0x470>
									while(ACCxValue < accThreshold_x){
 80016a6:	e006      	b.n	80016b6 <main+0x45a>
										readAccelerometer();
 80016a8:	f003 ffcc 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 80016ac:	200a      	movs	r0, #10
 80016ae:	f004 fd91 	bl	80061d4 <HAL_Delay>
										turnRightTrackReverse();
 80016b2:	f003 fde1 	bl	8005278 <turnRightTrackReverse>
									while(ACCxValue < accThreshold_x){
 80016b6:	4b5c      	ldr	r3, [pc, #368]	; (8001828 <main+0x5cc>)
 80016b8:	ed93 7a00 	vldr	s14, [r3]
 80016bc:	4b5b      	ldr	r3, [pc, #364]	; (800182c <main+0x5d0>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d4ed      	bmi.n	80016a8 <main+0x44c>
									}
								}
						}

						if (topFlag == false) {
 80016cc:	4b58      	ldr	r3, [pc, #352]	; (8001830 <main+0x5d4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	f083 0301 	eor.w	r3, r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <main+0x486>
							moveForward();
 80016da:	f003 fd55 	bl	8005188 <moveForward>
						}else{
							moveReverse();
						}
				}
				}
				break;
 80016de:	f002 ba17 	b.w	8003b10 <main+0x28b4>
							moveReverse();
 80016e2:	f003 fd8d 	bl	8005200 <moveReverse>
				break;
 80016e6:	f002 ba13 	b.w	8003b10 <main+0x28b4>
				}else if (dayNight==1) {
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <main+0x5ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	f042 820e 	bne.w	8003b10 <main+0x28b4>
					if( (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold) ){
 80016f4:	4b45      	ldr	r3, [pc, #276]	; (800180c <main+0x5b0>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b45      	ldr	r3, [pc, #276]	; (8001810 <main+0x5b4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d81a      	bhi.n	8001736 <main+0x4da>
 8001700:	4b44      	ldr	r3, [pc, #272]	; (8001814 <main+0x5b8>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b42      	ldr	r3, [pc, #264]	; (8001810 <main+0x5b4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d814      	bhi.n	8001736 <main+0x4da>
 800170c:	4b42      	ldr	r3, [pc, #264]	; (8001818 <main+0x5bc>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <main+0x5b4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d80e      	bhi.n	8001736 <main+0x4da>
 8001718:	4b40      	ldr	r3, [pc, #256]	; (800181c <main+0x5c0>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <main+0x5b4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d808      	bhi.n	8001736 <main+0x4da>
 8001724:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <main+0x5c4>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b39      	ldr	r3, [pc, #228]	; (8001810 <main+0x5b4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d802      	bhi.n	8001736 <main+0x4da>
						cleaningAction();
 8001730:	f003 ffd0 	bl	80056d4 <cleaningAction>
 8001734:	e05f      	b.n	80017f6 <main+0x59a>
						right_counter++;
 8001736:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <main+0x5c8>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b39      	ldr	r3, [pc, #228]	; (8001824 <main+0x5c8>)
 8001740:	801a      	strh	r2, [r3, #0]
						if(right_counter == 100){
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <main+0x5c8>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d146      	bne.n	80017d8 <main+0x57c>
							right_counter=0;
 800174a:	4b36      	ldr	r3, [pc, #216]	; (8001824 <main+0x5c8>)
 800174c:	2200      	movs	r2, #0
 800174e:	801a      	strh	r2, [r3, #0]
							stop();
 8001750:	f003 fd38 	bl	80051c4 <stop>
							HAL_Delay(250);
 8001754:	20fa      	movs	r0, #250	; 0xfa
 8001756:	f004 fd3d 	bl	80061d4 <HAL_Delay>
								readAccelerometer();
 800175a:	f003 ff73 	bl	8005644 <readAccelerometer>
								if(ACCxValue > accThreshold_x){
 800175e:	4b32      	ldr	r3, [pc, #200]	; (8001828 <main+0x5cc>)
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	4b31      	ldr	r3, [pc, #196]	; (800182c <main+0x5d0>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	dd13      	ble.n	800179c <main+0x540>
									while(ACCxValue > accThreshold_x){
 8001774:	e006      	b.n	8001784 <main+0x528>
										readAccelerometer();
 8001776:	f003 ff65 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 800177a:	200a      	movs	r0, #10
 800177c:	f004 fd2a 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 8001780:	f003 fd98 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <main+0x5cc>)
 8001786:	ed93 7a00 	vldr	s14, [r3]
 800178a:	4b28      	ldr	r3, [pc, #160]	; (800182c <main+0x5d0>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001798:	dced      	bgt.n	8001776 <main+0x51a>
 800179a:	e01d      	b.n	80017d8 <main+0x57c>
								}else if(ACCxValue < accThreshold_x){
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <main+0x5cc>)
 800179e:	ed93 7a00 	vldr	s14, [r3]
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <main+0x5d0>)
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d512      	bpl.n	80017d8 <main+0x57c>
									while(ACCxValue < accThreshold_x){
 80017b2:	e006      	b.n	80017c2 <main+0x566>
										readAccelerometer();
 80017b4:	f003 ff46 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 80017b8:	200a      	movs	r0, #10
 80017ba:	f004 fd0b 	bl	80061d4 <HAL_Delay>
										turnRightTrackReverse();
 80017be:	f003 fd5b 	bl	8005278 <turnRightTrackReverse>
									while(ACCxValue < accThreshold_x){
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <main+0x5cc>)
 80017c4:	ed93 7a00 	vldr	s14, [r3]
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <main+0x5d0>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d4ed      	bmi.n	80017b4 <main+0x558>
						if (topFlag == false) {
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <main+0x5d4>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	f083 0301 	eor.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <main+0x592>
							moveForward();
 80017e6:	f003 fccf 	bl	8005188 <moveForward>
				break;
 80017ea:	f002 b991 	b.w	8003b10 <main+0x28b4>
							moveReverse();
 80017ee:	f003 fd07 	bl	8005200 <moveReverse>
				break;
 80017f2:	f002 b98d 	b.w	8003b10 <main+0x28b4>
 80017f6:	f002 b98b 	b.w	8003b10 <main+0x28b4>
 80017fa:	bf00      	nop
 80017fc:	200004c4 	.word	0x200004c4
 8001800:	200002a4 	.word	0x200002a4
 8001804:	20000294 	.word	0x20000294
 8001808:	20000040 	.word	0x20000040
 800180c:	200006f0 	.word	0x200006f0
 8001810:	2000016c 	.word	0x2000016c
 8001814:	2000079c 	.word	0x2000079c
 8001818:	200004c0 	.word	0x200004c0
 800181c:	200006ec 	.word	0x200006ec
 8001820:	200006dc 	.word	0x200006dc
 8001824:	20000170 	.word	0x20000170
 8001828:	200006cc 	.word	0x200006cc
 800182c:	20000038 	.word	0x20000038
 8001830:	20000400 	.word	0x20000400

		   //TOP RIGHT
			case 3:
				stop();
 8001834:	f003 fcc6 	bl	80051c4 <stop>
				HAL_Delay(2500);
 8001838:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800183c:	f004 fcca 	bl	80061d4 <HAL_Delay>

				//RE-READ ULTRASONIC SENSORS AND RECHECK POSITION
				readUltrasonicDistance();
 8001840:	f002 ff3e 	bl	80046c0 <readUltrasonicDistance>
				positionToDo = positionScan();
 8001844:	f003 faa6 	bl	8004d94 <positionScan>
 8001848:	4602      	mov	r2, r0
 800184a:	4baa      	ldr	r3, [pc, #680]	; (8001af4 <main+0x898>)
 800184c:	601a      	str	r2, [r3, #0]
				if(positionToDo == 3){
 800184e:	4ba9      	ldr	r3, [pc, #676]	; (8001af4 <main+0x898>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b03      	cmp	r3, #3
 8001854:	f042 815f 	bne.w	8003b16 <main+0x28ba>

					//UART CURRENT POSITION
					UARTposition(positionToDo);
 8001858:	4ba6      	ldr	r3, [pc, #664]	; (8001af4 <main+0x898>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fd47 	bl	80052f0 <UARTposition>
//					UARTRight(right);
//					UARTFront(front);
//					UARTBottom(bottom);

					//SET AND CLEAR APPROPRIATE FLAGS
					topRightFlag = true;
 8001862:	4ba5      	ldr	r3, [pc, #660]	; (8001af8 <main+0x89c>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
					rightFlag = true;
 8001868:	4ba4      	ldr	r3, [pc, #656]	; (8001afc <main+0x8a0>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
					topFlag = true;
 800186e:	4ba4      	ldr	r3, [pc, #656]	; (8001b00 <main+0x8a4>)
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
					LeftFlag = false;
 8001874:	4ba3      	ldr	r3, [pc, #652]	; (8001b04 <main+0x8a8>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]


					//Read Contamination Status
					readContamination();
 800187a:	f003 fe47 	bl	800550c <readContamination>
					if(dayNight==0){
 800187e:	4ba2      	ldr	r3, [pc, #648]	; (8001b08 <main+0x8ac>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f040 8081 	bne.w	800198a <main+0x72e>
						if(  (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold) ){
 8001888:	4ba0      	ldr	r3, [pc, #640]	; (8001b0c <main+0x8b0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4ba0      	ldr	r3, [pc, #640]	; (8001b10 <main+0x8b4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d31a      	bcc.n	80018ca <main+0x66e>
 8001894:	4b9f      	ldr	r3, [pc, #636]	; (8001b14 <main+0x8b8>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b9d      	ldr	r3, [pc, #628]	; (8001b10 <main+0x8b4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d314      	bcc.n	80018ca <main+0x66e>
 80018a0:	4b9d      	ldr	r3, [pc, #628]	; (8001b18 <main+0x8bc>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b9a      	ldr	r3, [pc, #616]	; (8001b10 <main+0x8b4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d30e      	bcc.n	80018ca <main+0x66e>
 80018ac:	4b9b      	ldr	r3, [pc, #620]	; (8001b1c <main+0x8c0>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b97      	ldr	r3, [pc, #604]	; (8001b10 <main+0x8b4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d308      	bcc.n	80018ca <main+0x66e>
 80018b8:	4b99      	ldr	r3, [pc, #612]	; (8001b20 <main+0x8c4>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b94      	ldr	r3, [pc, #592]	; (8001b10 <main+0x8b4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d302      	bcc.n	80018ca <main+0x66e>
							//UART CONTAMINATION STATUS
							//UARTContaminationFound();
							//CONTAMINATION ACTIONS
							cleaningAction();
 80018c4:	f003 ff06 	bl	80056d4 <cleaningAction>
 80018c8:	e0e5      	b.n	8001a96 <main+0x83a>
						}else{
							//UART CONTAMINATION STATUS
							//UARTContaminationNOTFound();
							//CHECK CORNERS ALREADY DONE OR NOT DONE

							if ((bottomRightFlag == true) && (bottomLeftFlag == false) && (topLeftFlag == false)) {
 80018ca:	4b96      	ldr	r3, [pc, #600]	; (8001b24 <main+0x8c8>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d038      	beq.n	8001944 <main+0x6e8>
 80018d2:	4b95      	ldr	r3, [pc, #596]	; (8001b28 <main+0x8cc>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	f083 0301 	eor.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d031      	beq.n	8001944 <main+0x6e8>
 80018e0:	4b92      	ldr	r3, [pc, #584]	; (8001b2c <main+0x8d0>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f083 0301 	eor.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d02a      	beq.n	8001944 <main+0x6e8>
								//REVERSE
								moveReverse();
 80018ee:	f003 fc87 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 80018f2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80018f6:	f004 fc6d 	bl	80061d4 <HAL_Delay>

								//TURN RIGHT TRACK REVERSE
								turnRightTrackReverse();
 80018fa:	f003 fcbd 	bl	8005278 <turnRightTrackReverse>
								HAL_Delay(8000);
 80018fe:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001902:	f004 fc67 	bl	80061d4 <HAL_Delay>

								//REVERSE
								moveReverse();
 8001906:	f003 fc7b 	bl	8005200 <moveReverse>
								HAL_Delay(2000);
 800190a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800190e:	f004 fc61 	bl	80061d4 <HAL_Delay>

								//Turn LEFT TRACK REVERSE
								readAccelerometer();
 8001912:	f003 fe97 	bl	8005644 <readAccelerometer>
								while(ACCyValue > accThreshold){
 8001916:	e003      	b.n	8001920 <main+0x6c4>
									readAccelerometer();
 8001918:	f003 fe94 	bl	8005644 <readAccelerometer>
									turnLeftTrackReverse();
 800191c:	f003 fcca 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCyValue > accThreshold){
 8001920:	4b83      	ldr	r3, [pc, #524]	; (8001b30 <main+0x8d4>)
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	4b83      	ldr	r3, [pc, #524]	; (8001b34 <main+0x8d8>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001934:	dcf0      	bgt.n	8001918 <main+0x6bc>
								}

								//REVERSE
								moveReverse();
 8001936:	f003 fc63 	bl	8005200 <moveReverse>
								HAL_Delay(300);
 800193a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800193e:	f004 fc49 	bl	80061d4 <HAL_Delay>
 8001942:	e0a8      	b.n	8001a96 <main+0x83a>

							}else if (((bottomRightFlag == true) && (bottomLeftFlag == true) && (topLeftFlag == true))) {
 8001944:	4b77      	ldr	r3, [pc, #476]	; (8001b24 <main+0x8c8>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00e      	beq.n	800196a <main+0x70e>
 800194c:	4b76      	ldr	r3, [pc, #472]	; (8001b28 <main+0x8cc>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00a      	beq.n	800196a <main+0x70e>
 8001954:	4b75      	ldr	r3, [pc, #468]	; (8001b2c <main+0x8d0>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <main+0x70e>
								//REVERSE BACK TO BOTTOM CORNER
								moveReverse();
 800195c:	f003 fc50 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8001960:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001964:	f004 fc36 	bl	80061d4 <HAL_Delay>
 8001968:	e095      	b.n	8001a96 <main+0x83a>

							}else if ((bottomRightFlag == false)) {
 800196a:	4b6e      	ldr	r3, [pc, #440]	; (8001b24 <main+0x8c8>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	f083 0301 	eor.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	f002 80ce 	beq.w	8003b16 <main+0x28ba>
								//REVERSE BACK TO BOTTOM CORNER
								moveReverse();
 800197a:	f003 fc41 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 800197e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001982:	f004 fc27 	bl	80061d4 <HAL_Delay>
						}
					}


				}
				break;
 8001986:	f002 b8c6 	b.w	8003b16 <main+0x28ba>
					}else if (dayNight==1) {
 800198a:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <main+0x8ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	f042 80c1 	bne.w	8003b16 <main+0x28ba>
						if(  (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold) ){
 8001994:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <main+0x8b0>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b5d      	ldr	r3, [pc, #372]	; (8001b10 <main+0x8b4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d81a      	bhi.n	80019d6 <main+0x77a>
 80019a0:	4b5c      	ldr	r3, [pc, #368]	; (8001b14 <main+0x8b8>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <main+0x8b4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d814      	bhi.n	80019d6 <main+0x77a>
 80019ac:	4b5a      	ldr	r3, [pc, #360]	; (8001b18 <main+0x8bc>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <main+0x8b4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d80e      	bhi.n	80019d6 <main+0x77a>
 80019b8:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <main+0x8c0>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b54      	ldr	r3, [pc, #336]	; (8001b10 <main+0x8b4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d808      	bhi.n	80019d6 <main+0x77a>
 80019c4:	4b56      	ldr	r3, [pc, #344]	; (8001b20 <main+0x8c4>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b51      	ldr	r3, [pc, #324]	; (8001b10 <main+0x8b4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d802      	bhi.n	80019d6 <main+0x77a>
							cleaningAction();
 80019d0:	f003 fe80 	bl	80056d4 <cleaningAction>
 80019d4:	e05f      	b.n	8001a96 <main+0x83a>
							if ((bottomRightFlag == true) && (bottomLeftFlag == false) && (topLeftFlag == false)) {
 80019d6:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <main+0x8c8>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d038      	beq.n	8001a50 <main+0x7f4>
 80019de:	4b52      	ldr	r3, [pc, #328]	; (8001b28 <main+0x8cc>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	f083 0301 	eor.w	r3, r3, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d031      	beq.n	8001a50 <main+0x7f4>
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <main+0x8d0>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	f083 0301 	eor.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d02a      	beq.n	8001a50 <main+0x7f4>
								moveReverse();
 80019fa:	f003 fc01 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 80019fe:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001a02:	f004 fbe7 	bl	80061d4 <HAL_Delay>
								turnRightTrackReverse();
 8001a06:	f003 fc37 	bl	8005278 <turnRightTrackReverse>
								HAL_Delay(8000);
 8001a0a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001a0e:	f004 fbe1 	bl	80061d4 <HAL_Delay>
								moveReverse();
 8001a12:	f003 fbf5 	bl	8005200 <moveReverse>
								HAL_Delay(2000);
 8001a16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a1a:	f004 fbdb 	bl	80061d4 <HAL_Delay>
								readAccelerometer();
 8001a1e:	f003 fe11 	bl	8005644 <readAccelerometer>
								while(ACCyValue > accThreshold){
 8001a22:	e003      	b.n	8001a2c <main+0x7d0>
									readAccelerometer();
 8001a24:	f003 fe0e 	bl	8005644 <readAccelerometer>
									turnLeftTrackReverse();
 8001a28:	f003 fc44 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCyValue > accThreshold){
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <main+0x8d4>)
 8001a2e:	ed93 7a00 	vldr	s14, [r3]
 8001a32:	4b40      	ldr	r3, [pc, #256]	; (8001b34 <main+0x8d8>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	dcf0      	bgt.n	8001a24 <main+0x7c8>
								moveReverse();
 8001a42:	f003 fbdd 	bl	8005200 <moveReverse>
								HAL_Delay(300);
 8001a46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a4a:	f004 fbc3 	bl	80061d4 <HAL_Delay>
 8001a4e:	e022      	b.n	8001a96 <main+0x83a>
							}else if (((bottomRightFlag == true) && (bottomLeftFlag == true) && (topLeftFlag == true))) {
 8001a50:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <main+0x8c8>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00e      	beq.n	8001a76 <main+0x81a>
 8001a58:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <main+0x8cc>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00a      	beq.n	8001a76 <main+0x81a>
 8001a60:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <main+0x8d0>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <main+0x81a>
								moveReverse();
 8001a68:	f003 fbca 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8001a6c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001a70:	f004 fbb0 	bl	80061d4 <HAL_Delay>
 8001a74:	e00f      	b.n	8001a96 <main+0x83a>
							}else if ((bottomRightFlag == false)) {
 8001a76:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <main+0x8c8>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	f083 0301 	eor.w	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f002 8048 	beq.w	8003b16 <main+0x28ba>
								moveReverse();
 8001a86:	f003 fbbb 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8001a8a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001a8e:	f004 fba1 	bl	80061d4 <HAL_Delay>
				break;
 8001a92:	f002 b840 	b.w	8003b16 <main+0x28ba>
 8001a96:	f002 b83e 	b.w	8003b16 <main+0x28ba>

		   //MIDDLE
			case 4:

				//UART CURRENT POSITION
				UARTposition(positionToDo);
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <main+0x898>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fc26 	bl	80052f0 <UARTposition>
//				UARTRight(right);
//				UARTFront(front);
//				UARTBottom(bottom);

				//Read Contamination Status
				readContamination();
 8001aa4:	f003 fd32 	bl	800550c <readContamination>
				if(dayNight==0){
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <main+0x8ac>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 80a3 	bne.w	8001bf8 <main+0x99c>
					if(  (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold) ){
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <main+0x8b0>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <main+0x8b4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d33c      	bcc.n	8001b38 <main+0x8dc>
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <main+0x8b8>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <main+0x8b4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d336      	bcc.n	8001b38 <main+0x8dc>
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <main+0x8bc>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <main+0x8b4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d330      	bcc.n	8001b38 <main+0x8dc>
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <main+0x8c0>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <main+0x8b4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d32a      	bcc.n	8001b38 <main+0x8dc>
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <main+0x8c4>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <main+0x8b4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d324      	bcc.n	8001b38 <main+0x8dc>
						//UART CONTAMINATION STATUS
						//UARTContaminationFound();
						//CONTAMINATION ACTIONS
						cleaningAction();
 8001aee:	f003 fdf1 	bl	80056d4 <cleaningAction>
 8001af2:	e107      	b.n	8001d04 <main+0xaa8>
 8001af4:	200004c4 	.word	0x200004c4
 8001af8:	20000156 	.word	0x20000156
 8001afc:	200002a4 	.word	0x200002a4
 8001b00:	20000400 	.word	0x20000400
 8001b04:	20000294 	.word	0x20000294
 8001b08:	20000040 	.word	0x20000040
 8001b0c:	200006f0 	.word	0x200006f0
 8001b10:	2000016c 	.word	0x2000016c
 8001b14:	2000079c 	.word	0x2000079c
 8001b18:	200004c0 	.word	0x200004c0
 8001b1c:	200006ec 	.word	0x200006ec
 8001b20:	200006dc 	.word	0x200006dc
 8001b24:	20000155 	.word	0x20000155
 8001b28:	20000157 	.word	0x20000157
 8001b2c:	20000158 	.word	0x20000158
 8001b30:	200003fc 	.word	0x200003fc
 8001b34:	20000034 	.word	0x20000034
					}else{
						//UART CONTAMINATION STATUS
						//UARTContaminationNOTFound();

						//INCREMENT COUNTER
						middle_counter++;
 8001b38:	4bb9      	ldr	r3, [pc, #740]	; (8001e20 <main+0xbc4>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4bb7      	ldr	r3, [pc, #732]	; (8001e20 <main+0xbc4>)
 8001b42:	801a      	strh	r2, [r3, #0]
						if(middle_counter == 100){
 8001b44:	4bb6      	ldr	r3, [pc, #728]	; (8001e20 <main+0xbc4>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d146      	bne.n	8001bda <main+0x97e>
							middle_counter=0;
 8001b4c:	4bb4      	ldr	r3, [pc, #720]	; (8001e20 <main+0xbc4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	801a      	strh	r2, [r3, #0]
							stop();
 8001b52:	f003 fb37 	bl	80051c4 <stop>
							HAL_Delay(250);
 8001b56:	20fa      	movs	r0, #250	; 0xfa
 8001b58:	f004 fb3c 	bl	80061d4 <HAL_Delay>
							//RE-ADJUST ALLIGNMENT
								readAccelerometer();
 8001b5c:	f003 fd72 	bl	8005644 <readAccelerometer>
	//							if(ACCyValue > accThreshold){
	//								turnLeftTrack();
	//								turnRightTrack();
	//							}
								if(ACCxValue > accThreshold_x){
 8001b60:	4bb0      	ldr	r3, [pc, #704]	; (8001e24 <main+0xbc8>)
 8001b62:	ed93 7a00 	vldr	s14, [r3]
 8001b66:	4bb0      	ldr	r3, [pc, #704]	; (8001e28 <main+0xbcc>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	dd13      	ble.n	8001b9e <main+0x942>
									while(ACCxValue > accThreshold_x){
 8001b76:	e006      	b.n	8001b86 <main+0x92a>
										readAccelerometer();
 8001b78:	f003 fd64 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 8001b7c:	200a      	movs	r0, #10
 8001b7e:	f004 fb29 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 8001b82:	f003 fb97 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){
 8001b86:	4ba7      	ldr	r3, [pc, #668]	; (8001e24 <main+0xbc8>)
 8001b88:	ed93 7a00 	vldr	s14, [r3]
 8001b8c:	4ba6      	ldr	r3, [pc, #664]	; (8001e28 <main+0xbcc>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	dced      	bgt.n	8001b78 <main+0x91c>
 8001b9c:	e01d      	b.n	8001bda <main+0x97e>
									}
								}else if(ACCxValue < accThreshold_x){
 8001b9e:	4ba1      	ldr	r3, [pc, #644]	; (8001e24 <main+0xbc8>)
 8001ba0:	ed93 7a00 	vldr	s14, [r3]
 8001ba4:	4ba0      	ldr	r3, [pc, #640]	; (8001e28 <main+0xbcc>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	d512      	bpl.n	8001bda <main+0x97e>
									while(ACCxValue < accThreshold_x){
 8001bb4:	e006      	b.n	8001bc4 <main+0x968>
										readAccelerometer();
 8001bb6:	f003 fd45 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f004 fb0a 	bl	80061d4 <HAL_Delay>
										turnRightTrackReverse();
 8001bc0:	f003 fb5a 	bl	8005278 <turnRightTrackReverse>
									while(ACCxValue < accThreshold_x){
 8001bc4:	4b97      	ldr	r3, [pc, #604]	; (8001e24 <main+0xbc8>)
 8001bc6:	ed93 7a00 	vldr	s14, [r3]
 8001bca:	4b97      	ldr	r3, [pc, #604]	; (8001e28 <main+0xbcc>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	d4ed      	bmi.n	8001bb6 <main+0x95a>
									}
								}
						}
						//CHECK DIRECTION OF MOVEMENT
						  if(topFlag == false){
 8001bda:	4b94      	ldr	r3, [pc, #592]	; (8001e2c <main+0xbd0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f083 0301 	eor.w	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <main+0x994>
							  moveForward();
 8001be8:	f003 face 	bl	8005188 <moveForward>
							  moveReverse();
						  }
					}
				}

				break;
 8001bec:	f001 bf96 	b.w	8003b1c <main+0x28c0>
							  moveReverse();
 8001bf0:	f003 fb06 	bl	8005200 <moveReverse>
				break;
 8001bf4:	f001 bf92 	b.w	8003b1c <main+0x28c0>
				}else if (dayNight==1) {
 8001bf8:	4b8d      	ldr	r3, [pc, #564]	; (8001e30 <main+0xbd4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	f041 878d 	bne.w	8003b1c <main+0x28c0>
					if(  (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold) ){
 8001c02:	4b8c      	ldr	r3, [pc, #560]	; (8001e34 <main+0xbd8>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b8c      	ldr	r3, [pc, #560]	; (8001e38 <main+0xbdc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d81a      	bhi.n	8001c44 <main+0x9e8>
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <main+0xbe0>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <main+0xbdc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d814      	bhi.n	8001c44 <main+0x9e8>
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <main+0xbe4>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b86      	ldr	r3, [pc, #536]	; (8001e38 <main+0xbdc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d80e      	bhi.n	8001c44 <main+0x9e8>
 8001c26:	4b87      	ldr	r3, [pc, #540]	; (8001e44 <main+0xbe8>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b83      	ldr	r3, [pc, #524]	; (8001e38 <main+0xbdc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d808      	bhi.n	8001c44 <main+0x9e8>
 8001c32:	4b85      	ldr	r3, [pc, #532]	; (8001e48 <main+0xbec>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <main+0xbdc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d802      	bhi.n	8001c44 <main+0x9e8>
						cleaningAction();
 8001c3e:	f003 fd49 	bl	80056d4 <cleaningAction>
 8001c42:	e05f      	b.n	8001d04 <main+0xaa8>
						middle_counter++;
 8001c44:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <main+0xbc4>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b74      	ldr	r3, [pc, #464]	; (8001e20 <main+0xbc4>)
 8001c4e:	801a      	strh	r2, [r3, #0]
						if(middle_counter == 100){
 8001c50:	4b73      	ldr	r3, [pc, #460]	; (8001e20 <main+0xbc4>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	2b64      	cmp	r3, #100	; 0x64
 8001c56:	d146      	bne.n	8001ce6 <main+0xa8a>
							middle_counter=0;
 8001c58:	4b71      	ldr	r3, [pc, #452]	; (8001e20 <main+0xbc4>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
							stop();
 8001c5e:	f003 fab1 	bl	80051c4 <stop>
							HAL_Delay(250);
 8001c62:	20fa      	movs	r0, #250	; 0xfa
 8001c64:	f004 fab6 	bl	80061d4 <HAL_Delay>
								readAccelerometer();
 8001c68:	f003 fcec 	bl	8005644 <readAccelerometer>
								if(ACCxValue > accThreshold_x){
 8001c6c:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <main+0xbc8>)
 8001c6e:	ed93 7a00 	vldr	s14, [r3]
 8001c72:	4b6d      	ldr	r3, [pc, #436]	; (8001e28 <main+0xbcc>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	dd13      	ble.n	8001caa <main+0xa4e>
									while(ACCxValue > accThreshold_x){
 8001c82:	e006      	b.n	8001c92 <main+0xa36>
										readAccelerometer();
 8001c84:	f003 fcde 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 8001c88:	200a      	movs	r0, #10
 8001c8a:	f004 faa3 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 8001c8e:	f003 fb11 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){
 8001c92:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <main+0xbc8>)
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	4b63      	ldr	r3, [pc, #396]	; (8001e28 <main+0xbcc>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	dced      	bgt.n	8001c84 <main+0xa28>
 8001ca8:	e01d      	b.n	8001ce6 <main+0xa8a>
								}else if(ACCxValue < accThreshold_x){
 8001caa:	4b5e      	ldr	r3, [pc, #376]	; (8001e24 <main+0xbc8>)
 8001cac:	ed93 7a00 	vldr	s14, [r3]
 8001cb0:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <main+0xbcc>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	d512      	bpl.n	8001ce6 <main+0xa8a>
									while(ACCxValue < accThreshold_x){
 8001cc0:	e006      	b.n	8001cd0 <main+0xa74>
										readAccelerometer();
 8001cc2:	f003 fcbf 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 8001cc6:	200a      	movs	r0, #10
 8001cc8:	f004 fa84 	bl	80061d4 <HAL_Delay>
										turnRightTrackReverse();
 8001ccc:	f003 fad4 	bl	8005278 <turnRightTrackReverse>
									while(ACCxValue < accThreshold_x){
 8001cd0:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <main+0xbc8>)
 8001cd2:	ed93 7a00 	vldr	s14, [r3]
 8001cd6:	4b54      	ldr	r3, [pc, #336]	; (8001e28 <main+0xbcc>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	d4ed      	bmi.n	8001cc2 <main+0xa66>
						  if(topFlag == false){
 8001ce6:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <main+0xbd0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	f083 0301 	eor.w	r3, r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <main+0xaa0>
							  moveForward();
 8001cf4:	f003 fa48 	bl	8005188 <moveForward>
				break;
 8001cf8:	f001 bf10 	b.w	8003b1c <main+0x28c0>
							  moveReverse();
 8001cfc:	f003 fa80 	bl	8005200 <moveReverse>
				break;
 8001d00:	f001 bf0c 	b.w	8003b1c <main+0x28c0>
 8001d04:	f001 bf0a 	b.w	8003b1c <main+0x28c0>

		   //BOTTOM
			case 5:

				//STOP FOR 2.5 SEC
				stop();
 8001d08:	f003 fa5c 	bl	80051c4 <stop>
				HAL_Delay(2500);
 8001d0c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001d10:	f004 fa60 	bl	80061d4 <HAL_Delay>

				//RE-READ ULTRASONIC SENSORS AND RECHECK POSITION
				readUltrasonicDistance();
 8001d14:	f002 fcd4 	bl	80046c0 <readUltrasonicDistance>
				positionToDo = positionScan();
 8001d18:	f003 f83c 	bl	8004d94 <positionScan>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b4b      	ldr	r3, [pc, #300]	; (8001e4c <main+0xbf0>)
 8001d20:	601a      	str	r2, [r3, #0]
				if(positionToDo == 5){
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <main+0xbf0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	f041 86fb 	bne.w	8003b22 <main+0x28c6>

					//UART CURRENT POSITION
					UARTposition(positionToDo);
 8001d2c:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <main+0xbf0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fadd 	bl	80052f0 <UARTposition>
//					UARTRight(right);
//					UARTFront(front);
//					UARTBottom(bottom);

					//SET AND CLEAR APPROPRIATE FLAGS
					topFlag = false;
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <main+0xbd0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]


					//Read Contamination Status
					readContamination();
 8001d3c:	f003 fbe6 	bl	800550c <readContamination>
					if(dayNight==0){
 8001d40:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <main+0xbd4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 8083 	bne.w	8001e50 <main+0xbf4>
						if(  (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold) ){
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <main+0xbd8>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <main+0xbdc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d31a      	bcc.n	8001d8c <main+0xb30>
 8001d56:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <main+0xbe0>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <main+0xbdc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d314      	bcc.n	8001d8c <main+0xb30>
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <main+0xbe4>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <main+0xbdc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d30e      	bcc.n	8001d8c <main+0xb30>
 8001d6e:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <main+0xbe8>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <main+0xbdc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d308      	bcc.n	8001d8c <main+0xb30>
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <main+0xbec>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <main+0xbdc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d302      	bcc.n	8001d8c <main+0xb30>
							//UART CONTAMINATION STATUS
							//UARTContaminationFound();
							//CONTAMINATION ACTIONS
							cleaningAction();
 8001d86:	f003 fca5 	bl	80056d4 <cleaningAction>
 8001d8a:	e0d5      	b.n	8001f38 <main+0xcdc>
						}else{
							//UART CONTAMINATION STATUS
							//UARTContaminationNOTFound();

							//RE-ADJUST ALLIGNMENT
							readAccelerometer();
 8001d8c:	f003 fc5a 	bl	8005644 <readAccelerometer>
							if(ACCxValue > accThreshold_x){
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <main+0xbc8>)
 8001d92:	ed93 7a00 	vldr	s14, [r3]
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <main+0xbcc>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	dd13      	ble.n	8001dce <main+0xb72>
								while(ACCxValue > accThreshold_x){
 8001da6:	e006      	b.n	8001db6 <main+0xb5a>
									readAccelerometer();
 8001da8:	f003 fc4c 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 8001dac:	200a      	movs	r0, #10
 8001dae:	f004 fa11 	bl	80061d4 <HAL_Delay>
									turnLeftTrackReverse();
 8001db2:	f003 fa7f 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCxValue > accThreshold_x){
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <main+0xbc8>)
 8001db8:	ed93 7a00 	vldr	s14, [r3]
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <main+0xbcc>)
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	dced      	bgt.n	8001da8 <main+0xb4c>
 8001dcc:	e01d      	b.n	8001e0a <main+0xbae>
								}
							}else if(ACCxValue < accThreshold_x){
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <main+0xbc8>)
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <main+0xbcc>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	d512      	bpl.n	8001e0a <main+0xbae>
								while(ACCxValue < accThreshold_x){
 8001de4:	e006      	b.n	8001df4 <main+0xb98>
									readAccelerometer();
 8001de6:	f003 fc2d 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 8001dea:	200a      	movs	r0, #10
 8001dec:	f004 f9f2 	bl	80061d4 <HAL_Delay>
									turnRightTrackReverse();
 8001df0:	f003 fa42 	bl	8005278 <turnRightTrackReverse>
								while(ACCxValue < accThreshold_x){
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <main+0xbc8>)
 8001df6:	ed93 7a00 	vldr	s14, [r3]
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <main+0xbcc>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	d4ed      	bmi.n	8001de6 <main+0xb8a>
//							//STOP
//							stop();
//							HAL_Delay(200);

							//MOVE UP FROM BOTTOM FRAME
							moveForward();
 8001e0a:	f003 f9bd 	bl	8005188 <moveForward>
							HAL_Delay(11000);
 8001e0e:	f642 20f8 	movw	r0, #11000	; 0x2af8
 8001e12:	f004 f9df 	bl	80061d4 <HAL_Delay>
							stop();
 8001e16:	f003 f9d5 	bl	80051c4 <stop>
							stop();
						}
					}

				}
				break;
 8001e1a:	f001 be82 	b.w	8003b22 <main+0x28c6>
 8001e1e:	bf00      	nop
 8001e20:	20000172 	.word	0x20000172
 8001e24:	200006cc 	.word	0x200006cc
 8001e28:	20000038 	.word	0x20000038
 8001e2c:	20000400 	.word	0x20000400
 8001e30:	20000040 	.word	0x20000040
 8001e34:	200006f0 	.word	0x200006f0
 8001e38:	2000016c 	.word	0x2000016c
 8001e3c:	2000079c 	.word	0x2000079c
 8001e40:	200004c0 	.word	0x200004c0
 8001e44:	200006ec 	.word	0x200006ec
 8001e48:	200006dc 	.word	0x200006dc
 8001e4c:	200004c4 	.word	0x200004c4
					}else if (dayNight==1) {
 8001e50:	4bb5      	ldr	r3, [pc, #724]	; (8002128 <main+0xecc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	f041 8664 	bne.w	8003b22 <main+0x28c6>
						if(  (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold) ){
 8001e5a:	4bb4      	ldr	r3, [pc, #720]	; (800212c <main+0xed0>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4bb4      	ldr	r3, [pc, #720]	; (8002130 <main+0xed4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d81a      	bhi.n	8001e9c <main+0xc40>
 8001e66:	4bb3      	ldr	r3, [pc, #716]	; (8002134 <main+0xed8>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4bb1      	ldr	r3, [pc, #708]	; (8002130 <main+0xed4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d814      	bhi.n	8001e9c <main+0xc40>
 8001e72:	4bb1      	ldr	r3, [pc, #708]	; (8002138 <main+0xedc>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4bae      	ldr	r3, [pc, #696]	; (8002130 <main+0xed4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d80e      	bhi.n	8001e9c <main+0xc40>
 8001e7e:	4baf      	ldr	r3, [pc, #700]	; (800213c <main+0xee0>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4bab      	ldr	r3, [pc, #684]	; (8002130 <main+0xed4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d808      	bhi.n	8001e9c <main+0xc40>
 8001e8a:	4bad      	ldr	r3, [pc, #692]	; (8002140 <main+0xee4>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4ba8      	ldr	r3, [pc, #672]	; (8002130 <main+0xed4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d802      	bhi.n	8001e9c <main+0xc40>
							cleaningAction();
 8001e96:	f003 fc1d 	bl	80056d4 <cleaningAction>
 8001e9a:	e04d      	b.n	8001f38 <main+0xcdc>
							readAccelerometer();
 8001e9c:	f003 fbd2 	bl	8005644 <readAccelerometer>
							if(ACCxValue > accThreshold_x){
 8001ea0:	4ba8      	ldr	r3, [pc, #672]	; (8002144 <main+0xee8>)
 8001ea2:	ed93 7a00 	vldr	s14, [r3]
 8001ea6:	4ba8      	ldr	r3, [pc, #672]	; (8002148 <main+0xeec>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	dd13      	ble.n	8001ede <main+0xc82>
								while(ACCxValue > accThreshold_x){
 8001eb6:	e006      	b.n	8001ec6 <main+0xc6a>
									readAccelerometer();
 8001eb8:	f003 fbc4 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 8001ebc:	200a      	movs	r0, #10
 8001ebe:	f004 f989 	bl	80061d4 <HAL_Delay>
									turnLeftTrackReverse();
 8001ec2:	f003 f9f7 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCxValue > accThreshold_x){
 8001ec6:	4b9f      	ldr	r3, [pc, #636]	; (8002144 <main+0xee8>)
 8001ec8:	ed93 7a00 	vldr	s14, [r3]
 8001ecc:	4b9e      	ldr	r3, [pc, #632]	; (8002148 <main+0xeec>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	dced      	bgt.n	8001eb8 <main+0xc5c>
 8001edc:	e01d      	b.n	8001f1a <main+0xcbe>
							}else if(ACCxValue < accThreshold_x){
 8001ede:	4b99      	ldr	r3, [pc, #612]	; (8002144 <main+0xee8>)
 8001ee0:	ed93 7a00 	vldr	s14, [r3]
 8001ee4:	4b98      	ldr	r3, [pc, #608]	; (8002148 <main+0xeec>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	d512      	bpl.n	8001f1a <main+0xcbe>
								while(ACCxValue < accThreshold_x){
 8001ef4:	e006      	b.n	8001f04 <main+0xca8>
									readAccelerometer();
 8001ef6:	f003 fba5 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 8001efa:	200a      	movs	r0, #10
 8001efc:	f004 f96a 	bl	80061d4 <HAL_Delay>
									turnRightTrackReverse();
 8001f00:	f003 f9ba 	bl	8005278 <turnRightTrackReverse>
								while(ACCxValue < accThreshold_x){
 8001f04:	4b8f      	ldr	r3, [pc, #572]	; (8002144 <main+0xee8>)
 8001f06:	ed93 7a00 	vldr	s14, [r3]
 8001f0a:	4b8f      	ldr	r3, [pc, #572]	; (8002148 <main+0xeec>)
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	d4ed      	bmi.n	8001ef6 <main+0xc9a>
							stop();
 8001f1a:	f003 f953 	bl	80051c4 <stop>
							HAL_Delay(200);
 8001f1e:	20c8      	movs	r0, #200	; 0xc8
 8001f20:	f004 f958 	bl	80061d4 <HAL_Delay>
							moveForward();
 8001f24:	f003 f930 	bl	8005188 <moveForward>
							HAL_Delay(8000);
 8001f28:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001f2c:	f004 f952 	bl	80061d4 <HAL_Delay>
							stop();
 8001f30:	f003 f948 	bl	80051c4 <stop>
				break;
 8001f34:	f001 bdf5 	b.w	8003b22 <main+0x28c6>
 8001f38:	f001 bdf3 	b.w	8003b22 <main+0x28c6>

		   //TOP
			case 6:

				//STOP FOR 2.5 SEC
				stop();
 8001f3c:	f003 f942 	bl	80051c4 <stop>
				HAL_Delay(2500);
 8001f40:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001f44:	f004 f946 	bl	80061d4 <HAL_Delay>

				//RE-READ ULTRASONIC SENSORS AND RECHECK POSITION
				readUltrasonicDistance();
 8001f48:	f002 fbba 	bl	80046c0 <readUltrasonicDistance>
				positionToDo = positionScan();
 8001f4c:	f002 ff22 	bl	8004d94 <positionScan>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b7e      	ldr	r3, [pc, #504]	; (800214c <main+0xef0>)
 8001f54:	601a      	str	r2, [r3, #0]
				if(positionToDo == 6){
 8001f56:	4b7d      	ldr	r3, [pc, #500]	; (800214c <main+0xef0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	f041 85e4 	bne.w	8003b28 <main+0x28cc>

					stop();
 8001f60:	f003 f930 	bl	80051c4 <stop>
					HAL_Delay(700);
 8001f64:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001f68:	f004 f934 	bl	80061d4 <HAL_Delay>

					//UART CURRENT POSITION
					UARTposition(positionToDo);
 8001f6c:	4b77      	ldr	r3, [pc, #476]	; (800214c <main+0xef0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 f9bd 	bl	80052f0 <UARTposition>
//					UARTRight(right);
//					UARTFront(front);
//					UARTBottom(bottom);

					//SET AND CLEAR APPROPRIATE FLAGS
					topFlag = true;
 8001f76:	4b76      	ldr	r3, [pc, #472]	; (8002150 <main+0xef4>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]


					//Read Contamination Status
					readContamination();
 8001f7c:	f003 fac6 	bl	800550c <readContamination>
					if(dayNight==0){
 8001f80:	4b69      	ldr	r3, [pc, #420]	; (8002128 <main+0xecc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 81c5 	bne.w	8002314 <main+0x10b8>
						if(  (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold)  ){
 8001f8a:	4b68      	ldr	r3, [pc, #416]	; (800212c <main+0xed0>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b68      	ldr	r3, [pc, #416]	; (8002130 <main+0xed4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d31a      	bcc.n	8001fcc <main+0xd70>
 8001f96:	4b67      	ldr	r3, [pc, #412]	; (8002134 <main+0xed8>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b65      	ldr	r3, [pc, #404]	; (8002130 <main+0xed4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d314      	bcc.n	8001fcc <main+0xd70>
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <main+0xedc>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b62      	ldr	r3, [pc, #392]	; (8002130 <main+0xed4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d30e      	bcc.n	8001fcc <main+0xd70>
 8001fae:	4b63      	ldr	r3, [pc, #396]	; (800213c <main+0xee0>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <main+0xed4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d308      	bcc.n	8001fcc <main+0xd70>
 8001fba:	4b61      	ldr	r3, [pc, #388]	; (8002140 <main+0xee4>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <main+0xed4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d302      	bcc.n	8001fcc <main+0xd70>
							//UART CONTAMINATION STATUS
							//UARTContaminationFound();
							//CONTAMINATION ACTIONS
							cleaningAction();
 8001fc6:	f003 fb85 	bl	80056d4 <cleaningAction>
 8001fca:	e36c      	b.n	80026a6 <main+0x144a>
							//UART CONTAMINATION STATUS
							//UARTContaminationNOTFound();
							//CHECK DIRECTION OF HORIZONTAL MOVEMENT

							//RE-ADJUST ALLIGNMENT
							readAccelerometer();
 8001fcc:	f003 fb3a 	bl	8005644 <readAccelerometer>
							if(ACCxValue > accThreshold_x){
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <main+0xee8>)
 8001fd2:	ed93 7a00 	vldr	s14, [r3]
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	; (8002148 <main+0xeec>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	dd13      	ble.n	800200e <main+0xdb2>
								while(ACCxValue > accThreshold_x){
 8001fe6:	e006      	b.n	8001ff6 <main+0xd9a>
									readAccelerometer();
 8001fe8:	f003 fb2c 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 8001fec:	200a      	movs	r0, #10
 8001fee:	f004 f8f1 	bl	80061d4 <HAL_Delay>
									turnLeftTrackReverse();
 8001ff2:	f003 f95f 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCxValue > accThreshold_x){
 8001ff6:	4b53      	ldr	r3, [pc, #332]	; (8002144 <main+0xee8>)
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	4b52      	ldr	r3, [pc, #328]	; (8002148 <main+0xeec>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200a:	dced      	bgt.n	8001fe8 <main+0xd8c>
 800200c:	e01d      	b.n	800204a <main+0xdee>
								}
							}else if(ACCxValue < accThreshold_x){
 800200e:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <main+0xee8>)
 8002010:	ed93 7a00 	vldr	s14, [r3]
 8002014:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <main+0xeec>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800201e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002022:	d512      	bpl.n	800204a <main+0xdee>
								while(ACCxValue < accThreshold_x){
 8002024:	e006      	b.n	8002034 <main+0xdd8>
									readAccelerometer();
 8002026:	f003 fb0d 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 800202a:	200a      	movs	r0, #10
 800202c:	f004 f8d2 	bl	80061d4 <HAL_Delay>
									turnRightTrackReverse();
 8002030:	f003 f922 	bl	8005278 <turnRightTrackReverse>
								while(ACCxValue < accThreshold_x){
 8002034:	4b43      	ldr	r3, [pc, #268]	; (8002144 <main+0xee8>)
 8002036:	ed93 7a00 	vldr	s14, [r3]
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <main+0xeec>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	d4ed      	bmi.n	8002026 <main+0xdca>
								}
							}
							stop();
 800204a:	f003 f8bb 	bl	80051c4 <stop>
							HAL_Delay(300);
 800204e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002052:	f004 f8bf 	bl	80061d4 <HAL_Delay>

							//CHECK POSITION STATUS TO DETERMINE TURN DIRECTION
							if ((LeftFlag == false) && (rightFlag == true)) {
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <main+0xef8>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	f083 0301 	eor.w	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d07f      	beq.n	8002164 <main+0xf08>
 8002064:	4b3c      	ldr	r3, [pc, #240]	; (8002158 <main+0xefc>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d07b      	beq.n	8002164 <main+0xf08>
								//REVERSE
								if((left <= Frame_Threshold) ){ //|| (right <= Frame_Threshold)
 800206c:	4b3b      	ldr	r3, [pc, #236]	; (800215c <main+0xf00>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <main+0xf04>)
 800207a:	edd3 7a00 	vldr	s15, [r3]
 800207e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	db24      	blt.n	80020d2 <main+0xe76>
									moveReverse();
 8002088:	f003 f8ba 	bl	8005200 <moveReverse>
									HAL_Delay(3000);
 800208c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002090:	f004 f8a0 	bl	80061d4 <HAL_Delay>

									turnRightTrack();
 8002094:	f003 f8d2 	bl	800523c <turnRightTrack>
									HAL_Delay(6000);
 8002098:	f241 7070 	movw	r0, #6000	; 0x1770
 800209c:	f004 f89a 	bl	80061d4 <HAL_Delay>

									moveReverse();
 80020a0:	f003 f8ae 	bl	8005200 <moveReverse>
									HAL_Delay(500);
 80020a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020a8:	f004 f894 	bl	80061d4 <HAL_Delay>

									//Turn LEFT TRACK REVERSE
									readAccelerometer();
 80020ac:	f003 faca 	bl	8005644 <readAccelerometer>
									while(ACCxValue > accThreshold_x){
 80020b0:	e003      	b.n	80020ba <main+0xe5e>
										readAccelerometer();
 80020b2:	f003 fac7 	bl	8005644 <readAccelerometer>
										turnLeftTrackReverse();
 80020b6:	f003 f8fd 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <main+0xee8>)
 80020bc:	ed93 7a00 	vldr	s14, [r3]
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <main+0xeec>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ce:	dcf0      	bgt.n	80020b2 <main+0xe56>
								if((left <= Frame_Threshold) ){ //|| (right <= Frame_Threshold)
 80020d0:	e2e9      	b.n	80026a6 <main+0x144a>
									}

								}else{
									moveReverse();
 80020d2:	f003 f895 	bl	8005200 <moveReverse>
									HAL_Delay(4000);
 80020d6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80020da:	f004 f87b 	bl	80061d4 <HAL_Delay>

									//TURN RIGHT TRACK REVERSE
									turnRightTrackReverse();
 80020de:	f003 f8cb 	bl	8005278 <turnRightTrackReverse>
									HAL_Delay(8000);
 80020e2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80020e6:	f004 f875 	bl	80061d4 <HAL_Delay>

									//STOP
									stop();
 80020ea:	f003 f86b 	bl	80051c4 <stop>
									HAL_Delay(500);
 80020ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020f2:	f004 f86f 	bl	80061d4 <HAL_Delay>

									moveReverse();
 80020f6:	f003 f883 	bl	8005200 <moveReverse>
									HAL_Delay(2800);
 80020fa:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 80020fe:	f004 f869 	bl	80061d4 <HAL_Delay>

									//Turn LEFT TRACK REVERSE
									readAccelerometer();
 8002102:	f003 fa9f 	bl	8005644 <readAccelerometer>
									while(ACCxValue > accThreshold_x){
 8002106:	e003      	b.n	8002110 <main+0xeb4>
										readAccelerometer();
 8002108:	f003 fa9c 	bl	8005644 <readAccelerometer>
										turnLeftTrackReverse();
 800210c:	f003 f8d2 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <main+0xee8>)
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <main+0xeec>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	dcf0      	bgt.n	8002108 <main+0xeac>
								if((left <= Frame_Threshold) ){ //|| (right <= Frame_Threshold)
 8002126:	e2be      	b.n	80026a6 <main+0x144a>
 8002128:	20000040 	.word	0x20000040
 800212c:	200006f0 	.word	0x200006f0
 8002130:	2000016c 	.word	0x2000016c
 8002134:	2000079c 	.word	0x2000079c
 8002138:	200004c0 	.word	0x200004c0
 800213c:	200006ec 	.word	0x200006ec
 8002140:	200006dc 	.word	0x200006dc
 8002144:	200006cc 	.word	0x200006cc
 8002148:	20000038 	.word	0x20000038
 800214c:	200004c4 	.word	0x200004c4
 8002150:	20000400 	.word	0x20000400
 8002154:	20000294 	.word	0x20000294
 8002158:	200002a4 	.word	0x200002a4
 800215c:	2000003c 	.word	0x2000003c
 8002160:	200003f0 	.word	0x200003f0
									}
								}

							}else if ((LeftFlag == true) && (rightFlag == false)) {
 8002164:	4bc0      	ldr	r3, [pc, #768]	; (8002468 <main+0x120c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d05e      	beq.n	800222a <main+0xfce>
 800216c:	4bbf      	ldr	r3, [pc, #764]	; (800246c <main+0x1210>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	f083 0301 	eor.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d057      	beq.n	800222a <main+0xfce>
								//REVERSE
									if( (right <= Frame_Threshold)){ //(left <= Frame_Threshold) ||
 800217a:	4bbd      	ldr	r3, [pc, #756]	; (8002470 <main+0x1214>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002186:	4bbb      	ldr	r3, [pc, #748]	; (8002474 <main+0x1218>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002194:	db24      	blt.n	80021e0 <main+0xf84>
										moveReverse();
 8002196:	f003 f833 	bl	8005200 <moveReverse>
										HAL_Delay(3000);
 800219a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800219e:	f004 f819 	bl	80061d4 <HAL_Delay>

										//TURN RIGHT TRACK REVERSE
										turnLeftTrackReverse();
 80021a2:	f003 f887 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(6000);
 80021a6:	f241 7070 	movw	r0, #6000	; 0x1770
 80021aa:	f004 f813 	bl	80061d4 <HAL_Delay>

										moveReverse();
 80021ae:	f003 f827 	bl	8005200 <moveReverse>
										HAL_Delay(500);
 80021b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021b6:	f004 f80d 	bl	80061d4 <HAL_Delay>

										//Turn RIGHT TRACK REVERSE
										readAccelerometer();
 80021ba:	f003 fa43 	bl	8005644 <readAccelerometer>
										while(ACCxValue < accThreshold_x){
 80021be:	e003      	b.n	80021c8 <main+0xf6c>
											readAccelerometer();
 80021c0:	f003 fa40 	bl	8005644 <readAccelerometer>
											turnRightTrackReverse();
 80021c4:	f003 f858 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 80021c8:	4bab      	ldr	r3, [pc, #684]	; (8002478 <main+0x121c>)
 80021ca:	ed93 7a00 	vldr	s14, [r3]
 80021ce:	4bab      	ldr	r3, [pc, #684]	; (800247c <main+0x1220>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021dc:	d4f0      	bmi.n	80021c0 <main+0xf64>
									if( (right <= Frame_Threshold)){ //(left <= Frame_Threshold) ||
 80021de:	e262      	b.n	80026a6 <main+0x144a>
										}
									}else{
										moveReverse();
 80021e0:	f003 f80e 	bl	8005200 <moveReverse>
										HAL_Delay(4000);
 80021e4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80021e8:	f003 fff4 	bl	80061d4 <HAL_Delay>

										//TURN RIGHT TRACK REVERSE
										turnLeftTrackReverse();
 80021ec:	f003 f862 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(8000);
 80021f0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80021f4:	f003 ffee 	bl	80061d4 <HAL_Delay>

										moveReverse();
 80021f8:	f003 f802 	bl	8005200 <moveReverse>
										HAL_Delay(2800);
 80021fc:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8002200:	f003 ffe8 	bl	80061d4 <HAL_Delay>

										//Turn RIGHT TRACK REVERSE
										readAccelerometer();
 8002204:	f003 fa1e 	bl	8005644 <readAccelerometer>
										while(ACCxValue < accThreshold_x){
 8002208:	e003      	b.n	8002212 <main+0xfb6>
											readAccelerometer();
 800220a:	f003 fa1b 	bl	8005644 <readAccelerometer>
											turnRightTrackReverse();
 800220e:	f003 f833 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 8002212:	4b99      	ldr	r3, [pc, #612]	; (8002478 <main+0x121c>)
 8002214:	ed93 7a00 	vldr	s14, [r3]
 8002218:	4b98      	ldr	r3, [pc, #608]	; (800247c <main+0x1220>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	d4f0      	bmi.n	800220a <main+0xfae>
									if( (right <= Frame_Threshold)){ //(left <= Frame_Threshold) ||
 8002228:	e23d      	b.n	80026a6 <main+0x144a>
										}
									}

							}else if ((LeftFlag == false) && (rightFlag == false)) {
 800222a:	4b8f      	ldr	r3, [pc, #572]	; (8002468 <main+0x120c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	f083 0301 	eor.w	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	f001 8477 	beq.w	8003b28 <main+0x28cc>
 800223a:	4b8c      	ldr	r3, [pc, #560]	; (800246c <main+0x1210>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	f083 0301 	eor.w	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	f001 846f 	beq.w	8003b28 <main+0x28cc>
								//REVERSE
								moveReverse();
 800224a:	f002 ffd9 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 800224e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002252:	f003 ffbf 	bl	80061d4 <HAL_Delay>
								//REVERSE
								if((left <= Frame_Threshold) ){ //|| (right <= Frame_Threshold)
 8002256:	4b86      	ldr	r3, [pc, #536]	; (8002470 <main+0x1214>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002262:	4b87      	ldr	r3, [pc, #540]	; (8002480 <main+0x1224>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002270:	db24      	blt.n	80022bc <main+0x1060>
									moveReverse();
 8002272:	f002 ffc5 	bl	8005200 <moveReverse>
									HAL_Delay(1500);
 8002276:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800227a:	f003 ffab 	bl	80061d4 <HAL_Delay>

									//TURN RIGHT TRACK REVERSE
									turnRightTrackReverse();
 800227e:	f002 fffb 	bl	8005278 <turnRightTrackReverse>
									HAL_Delay(6000);
 8002282:	f241 7070 	movw	r0, #6000	; 0x1770
 8002286:	f003 ffa5 	bl	80061d4 <HAL_Delay>

									moveReverse();
 800228a:	f002 ffb9 	bl	8005200 <moveReverse>
									HAL_Delay(500);
 800228e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002292:	f003 ff9f 	bl	80061d4 <HAL_Delay>

									//Turn LEFT TRACK REVERSE
									readAccelerometer();
 8002296:	f003 f9d5 	bl	8005644 <readAccelerometer>
									while(ACCxValue > accThreshold_x){ //ACCyValue > accThreshold
 800229a:	e003      	b.n	80022a4 <main+0x1048>
										readAccelerometer();
 800229c:	f003 f9d2 	bl	8005644 <readAccelerometer>
										turnLeftTrackReverse();
 80022a0:	f003 f808 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){ //ACCyValue > accThreshold
 80022a4:	4b74      	ldr	r3, [pc, #464]	; (8002478 <main+0x121c>)
 80022a6:	ed93 7a00 	vldr	s14, [r3]
 80022aa:	4b74      	ldr	r3, [pc, #464]	; (800247c <main+0x1220>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	dcf0      	bgt.n	800229c <main+0x1040>
 80022ba:	e00b      	b.n	80022d4 <main+0x1078>
									}

								}else{
									//TURN RIGHT TRACK REVERSE
									turnRightTrackReverse();
 80022bc:	f002 ffdc 	bl	8005278 <turnRightTrackReverse>
									HAL_Delay(8000);
 80022c0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80022c4:	f003 ff86 	bl	80061d4 <HAL_Delay>

									moveReverse();
 80022c8:	f002 ff9a 	bl	8005200 <moveReverse>
									HAL_Delay(7000);
 80022cc:	f641 3058 	movw	r0, #7000	; 0x1b58
 80022d0:	f003 ff80 	bl	80061d4 <HAL_Delay>
								}

								//STOP
								stop();
 80022d4:	f002 ff76 	bl	80051c4 <stop>
								HAL_Delay(500);
 80022d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022dc:	f003 ff7a 	bl	80061d4 <HAL_Delay>

								//Turn LEFT TRACK REVERSE
								readAccelerometer();
 80022e0:	f003 f9b0 	bl	8005644 <readAccelerometer>
								while(ACCxValue > accThreshold_x){ //ACCyValue > accThreshold
 80022e4:	e003      	b.n	80022ee <main+0x1092>
									readAccelerometer();
 80022e6:	f003 f9ad 	bl	8005644 <readAccelerometer>
									turnLeftTrackReverse();
 80022ea:	f002 ffe3 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCxValue > accThreshold_x){ //ACCyValue > accThreshold
 80022ee:	4b62      	ldr	r3, [pc, #392]	; (8002478 <main+0x121c>)
 80022f0:	ed93 7a00 	vldr	s14, [r3]
 80022f4:	4b61      	ldr	r3, [pc, #388]	; (800247c <main+0x1220>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	dcf0      	bgt.n	80022e6 <main+0x108a>
								}

								//REVERSE
								moveReverse();
 8002304:	f002 ff7c 	bl	8005200 <moveReverse>
								HAL_Delay(2800);
 8002308:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800230c:	f003 ff62 	bl	80061d4 <HAL_Delay>
							}
						}
					}

				}
				break;
 8002310:	f001 bc0a 	b.w	8003b28 <main+0x28cc>
					}else if (dayNight==1) {
 8002314:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <main+0x1228>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	f041 8405 	bne.w	8003b28 <main+0x28cc>
						if(  (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold)  ){
 800231e:	4b5a      	ldr	r3, [pc, #360]	; (8002488 <main+0x122c>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4b5a      	ldr	r3, [pc, #360]	; (800248c <main+0x1230>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d81a      	bhi.n	8002360 <main+0x1104>
 800232a:	4b59      	ldr	r3, [pc, #356]	; (8002490 <main+0x1234>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4b57      	ldr	r3, [pc, #348]	; (800248c <main+0x1230>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d814      	bhi.n	8002360 <main+0x1104>
 8002336:	4b57      	ldr	r3, [pc, #348]	; (8002494 <main+0x1238>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b54      	ldr	r3, [pc, #336]	; (800248c <main+0x1230>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d80e      	bhi.n	8002360 <main+0x1104>
 8002342:	4b55      	ldr	r3, [pc, #340]	; (8002498 <main+0x123c>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4b51      	ldr	r3, [pc, #324]	; (800248c <main+0x1230>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d808      	bhi.n	8002360 <main+0x1104>
 800234e:	4b53      	ldr	r3, [pc, #332]	; (800249c <main+0x1240>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b4e      	ldr	r3, [pc, #312]	; (800248c <main+0x1230>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d802      	bhi.n	8002360 <main+0x1104>
							cleaningAction();
 800235a:	f003 f9bb 	bl	80056d4 <cleaningAction>
 800235e:	e1a2      	b.n	80026a6 <main+0x144a>
							readAccelerometer();
 8002360:	f003 f970 	bl	8005644 <readAccelerometer>
							if(ACCxValue > accThreshold_x){
 8002364:	4b44      	ldr	r3, [pc, #272]	; (8002478 <main+0x121c>)
 8002366:	ed93 7a00 	vldr	s14, [r3]
 800236a:	4b44      	ldr	r3, [pc, #272]	; (800247c <main+0x1220>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	dd13      	ble.n	80023a2 <main+0x1146>
								while(ACCxValue > accThreshold_x){
 800237a:	e006      	b.n	800238a <main+0x112e>
									readAccelerometer();
 800237c:	f003 f962 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 8002380:	200a      	movs	r0, #10
 8002382:	f003 ff27 	bl	80061d4 <HAL_Delay>
									turnLeftTrackReverse();
 8002386:	f002 ff95 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCxValue > accThreshold_x){
 800238a:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <main+0x121c>)
 800238c:	ed93 7a00 	vldr	s14, [r3]
 8002390:	4b3a      	ldr	r3, [pc, #232]	; (800247c <main+0x1220>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800239a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239e:	dced      	bgt.n	800237c <main+0x1120>
 80023a0:	e01d      	b.n	80023de <main+0x1182>
							}else if(ACCxValue < accThreshold_x){
 80023a2:	4b35      	ldr	r3, [pc, #212]	; (8002478 <main+0x121c>)
 80023a4:	ed93 7a00 	vldr	s14, [r3]
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <main+0x1220>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b6:	d512      	bpl.n	80023de <main+0x1182>
								while(ACCxValue < accThreshold_x){
 80023b8:	e006      	b.n	80023c8 <main+0x116c>
									readAccelerometer();
 80023ba:	f003 f943 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 80023be:	200a      	movs	r0, #10
 80023c0:	f003 ff08 	bl	80061d4 <HAL_Delay>
									turnRightTrackReverse();
 80023c4:	f002 ff58 	bl	8005278 <turnRightTrackReverse>
								while(ACCxValue < accThreshold_x){
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <main+0x121c>)
 80023ca:	ed93 7a00 	vldr	s14, [r3]
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <main+0x1220>)
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	d4ed      	bmi.n	80023ba <main+0x115e>
							stop();
 80023de:	f002 fef1 	bl	80051c4 <stop>
							HAL_Delay(300);
 80023e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023e6:	f003 fef5 	bl	80061d4 <HAL_Delay>
							if ((LeftFlag == false) && (rightFlag == true)) {
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <main+0x120c>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f083 0301 	eor.w	r3, r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d07e      	beq.n	80024f6 <main+0x129a>
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <main+0x1210>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d07a      	beq.n	80024f6 <main+0x129a>
								if((left <= Frame_Threshold) ){ //|| (right <= Frame_Threshold)
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <main+0x1214>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <main+0x1224>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	db41      	blt.n	80024a0 <main+0x1244>
									moveReverse();
 800241c:	f002 fef0 	bl	8005200 <moveReverse>
									HAL_Delay(3000);
 8002420:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002424:	f003 fed6 	bl	80061d4 <HAL_Delay>
									turnRightTrack();
 8002428:	f002 ff08 	bl	800523c <turnRightTrack>
									HAL_Delay(6000);
 800242c:	f241 7070 	movw	r0, #6000	; 0x1770
 8002430:	f003 fed0 	bl	80061d4 <HAL_Delay>
									moveReverse();
 8002434:	f002 fee4 	bl	8005200 <moveReverse>
									HAL_Delay(500);
 8002438:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800243c:	f003 feca 	bl	80061d4 <HAL_Delay>
									readAccelerometer();
 8002440:	f003 f900 	bl	8005644 <readAccelerometer>
									while(ACCxValue > accThreshold_x){
 8002444:	e003      	b.n	800244e <main+0x11f2>
										readAccelerometer();
 8002446:	f003 f8fd 	bl	8005644 <readAccelerometer>
										turnLeftTrackReverse();
 800244a:	f002 ff33 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <main+0x121c>)
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <main+0x1220>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	dcf0      	bgt.n	8002446 <main+0x11ea>
								if((left <= Frame_Threshold) ){ //|| (right <= Frame_Threshold)
 8002464:	e11f      	b.n	80026a6 <main+0x144a>
 8002466:	bf00      	nop
 8002468:	20000294 	.word	0x20000294
 800246c:	200002a4 	.word	0x200002a4
 8002470:	2000003c 	.word	0x2000003c
 8002474:	20000348 	.word	0x20000348
 8002478:	200006cc 	.word	0x200006cc
 800247c:	20000038 	.word	0x20000038
 8002480:	200003f0 	.word	0x200003f0
 8002484:	20000040 	.word	0x20000040
 8002488:	200006f0 	.word	0x200006f0
 800248c:	2000016c 	.word	0x2000016c
 8002490:	2000079c 	.word	0x2000079c
 8002494:	200004c0 	.word	0x200004c0
 8002498:	200006ec 	.word	0x200006ec
 800249c:	200006dc 	.word	0x200006dc
									moveReverse();
 80024a0:	f002 feae 	bl	8005200 <moveReverse>
									HAL_Delay(4000);
 80024a4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80024a8:	f003 fe94 	bl	80061d4 <HAL_Delay>
									turnRightTrackReverse();
 80024ac:	f002 fee4 	bl	8005278 <turnRightTrackReverse>
									HAL_Delay(6000);
 80024b0:	f241 7070 	movw	r0, #6000	; 0x1770
 80024b4:	f003 fe8e 	bl	80061d4 <HAL_Delay>
									stop();
 80024b8:	f002 fe84 	bl	80051c4 <stop>
									HAL_Delay(500);
 80024bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024c0:	f003 fe88 	bl	80061d4 <HAL_Delay>
									moveReverse();
 80024c4:	f002 fe9c 	bl	8005200 <moveReverse>
									HAL_Delay(2800);
 80024c8:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 80024cc:	f003 fe82 	bl	80061d4 <HAL_Delay>
									readAccelerometer();
 80024d0:	f003 f8b8 	bl	8005644 <readAccelerometer>
									while(ACCxValue > accThreshold_x){
 80024d4:	e003      	b.n	80024de <main+0x1282>
										readAccelerometer();
 80024d6:	f003 f8b5 	bl	8005644 <readAccelerometer>
										turnLeftTrackReverse();
 80024da:	f002 feeb 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){
 80024de:	4bbc      	ldr	r3, [pc, #752]	; (80027d0 <main+0x1574>)
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	4bbb      	ldr	r3, [pc, #748]	; (80027d4 <main+0x1578>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f2:	dcf0      	bgt.n	80024d6 <main+0x127a>
								if((left <= Frame_Threshold) ){ //|| (right <= Frame_Threshold)
 80024f4:	e0d7      	b.n	80026a6 <main+0x144a>
							}else if ((LeftFlag == true) && (rightFlag == false)) {
 80024f6:	4bb8      	ldr	r3, [pc, #736]	; (80027d8 <main+0x157c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d05e      	beq.n	80025bc <main+0x1360>
 80024fe:	4bb7      	ldr	r3, [pc, #732]	; (80027dc <main+0x1580>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f083 0301 	eor.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d057      	beq.n	80025bc <main+0x1360>
									if( (right <= Frame_Threshold)){ //(left <= Frame_Threshold) ||
 800250c:	4bb4      	ldr	r3, [pc, #720]	; (80027e0 <main+0x1584>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002518:	4bb2      	ldr	r3, [pc, #712]	; (80027e4 <main+0x1588>)
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002526:	db24      	blt.n	8002572 <main+0x1316>
										moveReverse();
 8002528:	f002 fe6a 	bl	8005200 <moveReverse>
										HAL_Delay(3000);
 800252c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002530:	f003 fe50 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 8002534:	f002 febe 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(6000);
 8002538:	f241 7070 	movw	r0, #6000	; 0x1770
 800253c:	f003 fe4a 	bl	80061d4 <HAL_Delay>
										moveReverse();
 8002540:	f002 fe5e 	bl	8005200 <moveReverse>
										HAL_Delay(500);
 8002544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002548:	f003 fe44 	bl	80061d4 <HAL_Delay>
										readAccelerometer();
 800254c:	f003 f87a 	bl	8005644 <readAccelerometer>
										while(ACCxValue < accThreshold_x){
 8002550:	e003      	b.n	800255a <main+0x12fe>
											readAccelerometer();
 8002552:	f003 f877 	bl	8005644 <readAccelerometer>
											turnRightTrackReverse();
 8002556:	f002 fe8f 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 800255a:	4b9d      	ldr	r3, [pc, #628]	; (80027d0 <main+0x1574>)
 800255c:	ed93 7a00 	vldr	s14, [r3]
 8002560:	4b9c      	ldr	r3, [pc, #624]	; (80027d4 <main+0x1578>)
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	d4f0      	bmi.n	8002552 <main+0x12f6>
									if( (right <= Frame_Threshold)){ //(left <= Frame_Threshold) ||
 8002570:	e099      	b.n	80026a6 <main+0x144a>
										moveReverse();
 8002572:	f002 fe45 	bl	8005200 <moveReverse>
										HAL_Delay(4000);
 8002576:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800257a:	f003 fe2b 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 800257e:	f002 fe99 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(8000);
 8002582:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002586:	f003 fe25 	bl	80061d4 <HAL_Delay>
										moveReverse();
 800258a:	f002 fe39 	bl	8005200 <moveReverse>
										HAL_Delay(2800);
 800258e:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8002592:	f003 fe1f 	bl	80061d4 <HAL_Delay>
										readAccelerometer();
 8002596:	f003 f855 	bl	8005644 <readAccelerometer>
										while(ACCxValue < accThreshold_x){
 800259a:	e003      	b.n	80025a4 <main+0x1348>
											readAccelerometer();
 800259c:	f003 f852 	bl	8005644 <readAccelerometer>
											turnRightTrackReverse();
 80025a0:	f002 fe6a 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 80025a4:	4b8a      	ldr	r3, [pc, #552]	; (80027d0 <main+0x1574>)
 80025a6:	ed93 7a00 	vldr	s14, [r3]
 80025aa:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <main+0x1578>)
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	d4f0      	bmi.n	800259c <main+0x1340>
									if( (right <= Frame_Threshold)){ //(left <= Frame_Threshold) ||
 80025ba:	e074      	b.n	80026a6 <main+0x144a>
							}else if ((LeftFlag == false) && (rightFlag == false)) {
 80025bc:	4b86      	ldr	r3, [pc, #536]	; (80027d8 <main+0x157c>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	f083 0301 	eor.w	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f001 82ae 	beq.w	8003b28 <main+0x28cc>
 80025cc:	4b83      	ldr	r3, [pc, #524]	; (80027dc <main+0x1580>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	f083 0301 	eor.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f001 82a6 	beq.w	8003b28 <main+0x28cc>
								moveReverse();
 80025dc:	f002 fe10 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 80025e0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80025e4:	f003 fdf6 	bl	80061d4 <HAL_Delay>
								if((left <= Frame_Threshold) ){ //|| (right <= Frame_Threshold)
 80025e8:	4b7d      	ldr	r3, [pc, #500]	; (80027e0 <main+0x1584>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025f4:	4b7c      	ldr	r3, [pc, #496]	; (80027e8 <main+0x158c>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002602:	db24      	blt.n	800264e <main+0x13f2>
									moveReverse();
 8002604:	f002 fdfc 	bl	8005200 <moveReverse>
									HAL_Delay(1500);
 8002608:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800260c:	f003 fde2 	bl	80061d4 <HAL_Delay>
									turnRightTrackReverse();
 8002610:	f002 fe32 	bl	8005278 <turnRightTrackReverse>
									HAL_Delay(6000);
 8002614:	f241 7070 	movw	r0, #6000	; 0x1770
 8002618:	f003 fddc 	bl	80061d4 <HAL_Delay>
									moveReverse();
 800261c:	f002 fdf0 	bl	8005200 <moveReverse>
									HAL_Delay(500);
 8002620:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002624:	f003 fdd6 	bl	80061d4 <HAL_Delay>
									readAccelerometer();
 8002628:	f003 f80c 	bl	8005644 <readAccelerometer>
									while(ACCxValue > accThreshold_x){ //ACCyValue > accThreshold
 800262c:	e003      	b.n	8002636 <main+0x13da>
										readAccelerometer();
 800262e:	f003 f809 	bl	8005644 <readAccelerometer>
										turnLeftTrackReverse();
 8002632:	f002 fe3f 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){ //ACCyValue > accThreshold
 8002636:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <main+0x1574>)
 8002638:	ed93 7a00 	vldr	s14, [r3]
 800263c:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <main+0x1578>)
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	dcf0      	bgt.n	800262e <main+0x13d2>
 800264c:	e00b      	b.n	8002666 <main+0x140a>
									turnRightTrackReverse();
 800264e:	f002 fe13 	bl	8005278 <turnRightTrackReverse>
									HAL_Delay(8000);
 8002652:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002656:	f003 fdbd 	bl	80061d4 <HAL_Delay>
									moveReverse();
 800265a:	f002 fdd1 	bl	8005200 <moveReverse>
									HAL_Delay(7000);
 800265e:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002662:	f003 fdb7 	bl	80061d4 <HAL_Delay>
								stop();
 8002666:	f002 fdad 	bl	80051c4 <stop>
								HAL_Delay(500);
 800266a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800266e:	f003 fdb1 	bl	80061d4 <HAL_Delay>
								readAccelerometer();
 8002672:	f002 ffe7 	bl	8005644 <readAccelerometer>
								while(ACCxValue > accThreshold_x){ //ACCyValue > accThreshold
 8002676:	e003      	b.n	8002680 <main+0x1424>
									readAccelerometer();
 8002678:	f002 ffe4 	bl	8005644 <readAccelerometer>
									turnLeftTrackReverse();
 800267c:	f002 fe1a 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCxValue > accThreshold_x){ //ACCyValue > accThreshold
 8002680:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <main+0x1574>)
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <main+0x1578>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	dcf0      	bgt.n	8002678 <main+0x141c>
								moveReverse();
 8002696:	f002 fdb3 	bl	8005200 <moveReverse>
								HAL_Delay(2800);
 800269a:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800269e:	f003 fd99 	bl	80061d4 <HAL_Delay>
				break;
 80026a2:	f001 ba41 	b.w	8003b28 <main+0x28cc>
 80026a6:	f001 ba3f 	b.w	8003b28 <main+0x28cc>

		   //BOTTOM LEFT
			case 7:

				//STOP FOR 2.5 SEC
				stop();
 80026aa:	f002 fd8b 	bl	80051c4 <stop>
				HAL_Delay(2500);
 80026ae:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80026b2:	f003 fd8f 	bl	80061d4 <HAL_Delay>

				//RE-READ ULTRASONIC SENSORS AND RECHECK POSITION
				readUltrasonicDistance();
 80026b6:	f002 f803 	bl	80046c0 <readUltrasonicDistance>
				positionToDo = positionScan();
 80026ba:	f002 fb6b 	bl	8004d94 <positionScan>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <main+0x1590>)
 80026c2:	601a      	str	r2, [r3, #0]
				if(positionToDo == 7){
 80026c4:	4b49      	ldr	r3, [pc, #292]	; (80027ec <main+0x1590>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b07      	cmp	r3, #7
 80026ca:	f041 8230 	bne.w	8003b2e <main+0x28d2>

					//UART CURRENT POSITION
					UARTposition(positionToDo);
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <main+0x1590>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f002 fe0c 	bl	80052f0 <UARTposition>
//					UARTRight(right);
//					UARTFront(front);
//					UARTBottom(bottom);

					//SET AND CLEAR APPROPRIATE FLAGS
					bottomLeftFlag = true;
 80026d8:	4b45      	ldr	r3, [pc, #276]	; (80027f0 <main+0x1594>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
					LeftFlag = true;
 80026de:	4b3e      	ldr	r3, [pc, #248]	; (80027d8 <main+0x157c>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
					rightFlag = false;
 80026e4:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <main+0x1580>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
					topFlag = false;
 80026ea:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <main+0x1598>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]


					//Read Contamination Status
					readContamination();
 80026f0:	f002 ff0c 	bl	800550c <readContamination>
					if(dayNight==0){
 80026f4:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <main+0x159c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d142      	bne.n	8002782 <main+0x1526>
						if( (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold)  ){
 80026fc:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <main+0x15a0>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <main+0x15a4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d31a      	bcc.n	800273e <main+0x14e2>
 8002708:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <main+0x15a8>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <main+0x15a4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d314      	bcc.n	800273e <main+0x14e2>
 8002714:	4b3c      	ldr	r3, [pc, #240]	; (8002808 <main+0x15ac>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b39      	ldr	r3, [pc, #228]	; (8002800 <main+0x15a4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d30e      	bcc.n	800273e <main+0x14e2>
 8002720:	4b3a      	ldr	r3, [pc, #232]	; (800280c <main+0x15b0>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <main+0x15a4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d308      	bcc.n	800273e <main+0x14e2>
 800272c:	4b38      	ldr	r3, [pc, #224]	; (8002810 <main+0x15b4>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b33      	ldr	r3, [pc, #204]	; (8002800 <main+0x15a4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d302      	bcc.n	800273e <main+0x14e2>
							//UART CONTAMINATION STATUS
							//UARTContaminationFound();
							//CONTAMINATION ACTIONS
							cleaningAction();
 8002738:	f002 ffcc 	bl	80056d4 <cleaningAction>
 800273c:	e092      	b.n	8002864 <main+0x1608>
						}else{
							//UART CONTAMINATION STATUS
							//UARTContaminationNOTFound();
							//CHERCK IF OTHER CORNERS HAVE BEEN LEFT OUT
							if ((topRightFlag == false) || (topLeftFlag == false) || (bottomRightFlag == false)) {
 800273e:	4b35      	ldr	r3, [pc, #212]	; (8002814 <main+0x15b8>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	f083 0301 	eor.w	r3, r3, #1
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10d      	bne.n	8002768 <main+0x150c>
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <main+0x15bc>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	f083 0301 	eor.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <main+0x150c>
 800275a:	4b30      	ldr	r3, [pc, #192]	; (800281c <main+0x15c0>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	f083 0301 	eor.w	r3, r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <main+0x151e>
								moveForward();
 8002768:	f002 fd0e 	bl	8005188 <moveForward>
								HAL_Delay(8000);
 800276c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002770:	f003 fd30 	bl	80061d4 <HAL_Delay>
								stop();
 8002774:	f002 fd26 	bl	80051c4 <stop>
 8002778:	e074      	b.n	8002864 <main+0x1608>
							}else{
								stop();
 800277a:	f002 fd23 	bl	80051c4 <stop>
							}
						}
					}

				}
				break;
 800277e:	f001 b9d6 	b.w	8003b2e <main+0x28d2>
					}else if (dayNight==1) {
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <main+0x159c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	f041 81d1 	bne.w	8003b2e <main+0x28d2>
						if( (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold)  ){
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <main+0x15a0>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <main+0x15a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d843      	bhi.n	8002820 <main+0x15c4>
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <main+0x15a8>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b18      	ldr	r3, [pc, #96]	; (8002800 <main+0x15a4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d83d      	bhi.n	8002820 <main+0x15c4>
 80027a4:	4b18      	ldr	r3, [pc, #96]	; (8002808 <main+0x15ac>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <main+0x15a4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d837      	bhi.n	8002820 <main+0x15c4>
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <main+0x15b0>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <main+0x15a4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d831      	bhi.n	8002820 <main+0x15c4>
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <main+0x15b4>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <main+0x15a4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d82b      	bhi.n	8002820 <main+0x15c4>
							cleaningAction();
 80027c8:	f002 ff84 	bl	80056d4 <cleaningAction>
 80027cc:	e04a      	b.n	8002864 <main+0x1608>
 80027ce:	bf00      	nop
 80027d0:	200006cc 	.word	0x200006cc
 80027d4:	20000038 	.word	0x20000038
 80027d8:	20000294 	.word	0x20000294
 80027dc:	200002a4 	.word	0x200002a4
 80027e0:	2000003c 	.word	0x2000003c
 80027e4:	20000348 	.word	0x20000348
 80027e8:	200003f0 	.word	0x200003f0
 80027ec:	200004c4 	.word	0x200004c4
 80027f0:	20000157 	.word	0x20000157
 80027f4:	20000400 	.word	0x20000400
 80027f8:	20000040 	.word	0x20000040
 80027fc:	200006f0 	.word	0x200006f0
 8002800:	2000016c 	.word	0x2000016c
 8002804:	2000079c 	.word	0x2000079c
 8002808:	200004c0 	.word	0x200004c0
 800280c:	200006ec 	.word	0x200006ec
 8002810:	200006dc 	.word	0x200006dc
 8002814:	20000156 	.word	0x20000156
 8002818:	20000158 	.word	0x20000158
 800281c:	20000155 	.word	0x20000155
							if ((topRightFlag == false) || (topLeftFlag == false) || (bottomRightFlag == false)) {
 8002820:	4b9f      	ldr	r3, [pc, #636]	; (8002aa0 <main+0x1844>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f083 0301 	eor.w	r3, r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <main+0x15ee>
 800282e:	4b9d      	ldr	r3, [pc, #628]	; (8002aa4 <main+0x1848>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	f083 0301 	eor.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <main+0x15ee>
 800283c:	4b9a      	ldr	r3, [pc, #616]	; (8002aa8 <main+0x184c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <main+0x1600>
								moveForward();
 800284a:	f002 fc9d 	bl	8005188 <moveForward>
								HAL_Delay(8000);
 800284e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002852:	f003 fcbf 	bl	80061d4 <HAL_Delay>
								stop();
 8002856:	f002 fcb5 	bl	80051c4 <stop>
 800285a:	e003      	b.n	8002864 <main+0x1608>
								stop();
 800285c:	f002 fcb2 	bl	80051c4 <stop>
				break;
 8002860:	f001 b965 	b.w	8003b2e <main+0x28d2>
 8002864:	f001 b963 	b.w	8003b2e <main+0x28d2>

		   //LEFT
			case 8:
				//UART CURRENT POSITION
				UARTposition(positionToDo);
 8002868:	4b90      	ldr	r3, [pc, #576]	; (8002aac <main+0x1850>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f002 fd3f 	bl	80052f0 <UARTposition>
//				UARTRight(right);
//				UARTFront(front);
//				UARTBottom(bottom);

				//SET AND CLEAR APPROPRIATE FLAGS
				rightFlag = false;
 8002872:	4b8f      	ldr	r3, [pc, #572]	; (8002ab0 <main+0x1854>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
				LeftFlag = true;
 8002878:	4b8e      	ldr	r3, [pc, #568]	; (8002ab4 <main+0x1858>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]

				//Read Contamination Status
				readContamination();
 800287e:	f002 fe45 	bl	800550c <readContamination>
				if(dayNight==0){
 8002882:	4b8d      	ldr	r3, [pc, #564]	; (8002ab8 <main+0x185c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 8081 	bne.w	800298e <main+0x1732>
					if(  (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold)  ){
 800288c:	4b8b      	ldr	r3, [pc, #556]	; (8002abc <main+0x1860>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b8b      	ldr	r3, [pc, #556]	; (8002ac0 <main+0x1864>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d31a      	bcc.n	80028ce <main+0x1672>
 8002898:	4b8a      	ldr	r3, [pc, #552]	; (8002ac4 <main+0x1868>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b88      	ldr	r3, [pc, #544]	; (8002ac0 <main+0x1864>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d314      	bcc.n	80028ce <main+0x1672>
 80028a4:	4b88      	ldr	r3, [pc, #544]	; (8002ac8 <main+0x186c>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b85      	ldr	r3, [pc, #532]	; (8002ac0 <main+0x1864>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d30e      	bcc.n	80028ce <main+0x1672>
 80028b0:	4b86      	ldr	r3, [pc, #536]	; (8002acc <main+0x1870>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b82      	ldr	r3, [pc, #520]	; (8002ac0 <main+0x1864>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d308      	bcc.n	80028ce <main+0x1672>
 80028bc:	4b84      	ldr	r3, [pc, #528]	; (8002ad0 <main+0x1874>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b7f      	ldr	r3, [pc, #508]	; (8002ac0 <main+0x1864>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d302      	bcc.n	80028ce <main+0x1672>
						//UART CONTAMINATION STATUS
						//UARTContaminationFound();
						//CONTAMINATION ACTIONS
						cleaningAction();
 80028c8:	f002 ff04 	bl	80056d4 <cleaningAction>
 80028cc:	e0e5      	b.n	8002a9a <main+0x183e>
						//UART CONTAMINATION STATUS
						//UARTContaminationNOTFound();
						//CHECK DIRECTION OF MOVEMENT

						//INCREMENT COUNTER
						left_counter++;
 80028ce:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <main+0x1878>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	4b7f      	ldr	r3, [pc, #508]	; (8002ad4 <main+0x1878>)
 80028d8:	801a      	strh	r2, [r3, #0]
						if(left_counter == 100){
 80028da:	4b7e      	ldr	r3, [pc, #504]	; (8002ad4 <main+0x1878>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d146      	bne.n	8002970 <main+0x1714>
							left_counter=0;
 80028e2:	4b7c      	ldr	r3, [pc, #496]	; (8002ad4 <main+0x1878>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	801a      	strh	r2, [r3, #0]
							stop();
 80028e8:	f002 fc6c 	bl	80051c4 <stop>
							HAL_Delay(250);
 80028ec:	20fa      	movs	r0, #250	; 0xfa
 80028ee:	f003 fc71 	bl	80061d4 <HAL_Delay>
							//RE-ADJUST ALLIGNMENT
								readAccelerometer();
 80028f2:	f002 fea7 	bl	8005644 <readAccelerometer>
								if(ACCxValue > accThreshold_x){
 80028f6:	4b78      	ldr	r3, [pc, #480]	; (8002ad8 <main+0x187c>)
 80028f8:	ed93 7a00 	vldr	s14, [r3]
 80028fc:	4b77      	ldr	r3, [pc, #476]	; (8002adc <main+0x1880>)
 80028fe:	edd3 7a00 	vldr	s15, [r3]
 8002902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	dd13      	ble.n	8002934 <main+0x16d8>
									while(ACCxValue > accThreshold_x){
 800290c:	e006      	b.n	800291c <main+0x16c0>
										readAccelerometer();
 800290e:	f002 fe99 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 8002912:	200a      	movs	r0, #10
 8002914:	f003 fc5e 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 8002918:	f002 fccc 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){
 800291c:	4b6e      	ldr	r3, [pc, #440]	; (8002ad8 <main+0x187c>)
 800291e:	ed93 7a00 	vldr	s14, [r3]
 8002922:	4b6e      	ldr	r3, [pc, #440]	; (8002adc <main+0x1880>)
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	dced      	bgt.n	800290e <main+0x16b2>
 8002932:	e01d      	b.n	8002970 <main+0x1714>
									}
								}else if(ACCxValue < accThreshold_x){
 8002934:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <main+0x187c>)
 8002936:	ed93 7a00 	vldr	s14, [r3]
 800293a:	4b68      	ldr	r3, [pc, #416]	; (8002adc <main+0x1880>)
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002948:	d512      	bpl.n	8002970 <main+0x1714>
									while(ACCxValue < accThreshold_x){
 800294a:	e006      	b.n	800295a <main+0x16fe>
										readAccelerometer();
 800294c:	f002 fe7a 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 8002950:	200a      	movs	r0, #10
 8002952:	f003 fc3f 	bl	80061d4 <HAL_Delay>
										turnRightTrackReverse();
 8002956:	f002 fc8f 	bl	8005278 <turnRightTrackReverse>
									while(ACCxValue < accThreshold_x){
 800295a:	4b5f      	ldr	r3, [pc, #380]	; (8002ad8 <main+0x187c>)
 800295c:	ed93 7a00 	vldr	s14, [r3]
 8002960:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <main+0x1880>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	d4ed      	bmi.n	800294c <main+0x16f0>
									}
								}
						}

						if (topFlag == false) {
 8002970:	4b5b      	ldr	r3, [pc, #364]	; (8002ae0 <main+0x1884>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f083 0301 	eor.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <main+0x172a>
							moveForward();
 800297e:	f002 fc03 	bl	8005188 <moveForward>
							moveReverse();
						}
					}
				}

				break;
 8002982:	f001 b8d7 	b.w	8003b34 <main+0x28d8>
							moveReverse();
 8002986:	f002 fc3b 	bl	8005200 <moveReverse>
				break;
 800298a:	f001 b8d3 	b.w	8003b34 <main+0x28d8>
				}else if (dayNight==1) {
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <main+0x185c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	f041 80ce 	bne.w	8003b34 <main+0x28d8>
					if(  (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold)  ){
 8002998:	4b48      	ldr	r3, [pc, #288]	; (8002abc <main+0x1860>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b48      	ldr	r3, [pc, #288]	; (8002ac0 <main+0x1864>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d81a      	bhi.n	80029da <main+0x177e>
 80029a4:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <main+0x1868>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <main+0x1864>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d814      	bhi.n	80029da <main+0x177e>
 80029b0:	4b45      	ldr	r3, [pc, #276]	; (8002ac8 <main+0x186c>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <main+0x1864>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d80e      	bhi.n	80029da <main+0x177e>
 80029bc:	4b43      	ldr	r3, [pc, #268]	; (8002acc <main+0x1870>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <main+0x1864>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d808      	bhi.n	80029da <main+0x177e>
 80029c8:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <main+0x1874>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b3c      	ldr	r3, [pc, #240]	; (8002ac0 <main+0x1864>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d802      	bhi.n	80029da <main+0x177e>
						cleaningAction();
 80029d4:	f002 fe7e 	bl	80056d4 <cleaningAction>
 80029d8:	e05f      	b.n	8002a9a <main+0x183e>
						left_counter++;
 80029da:	4b3e      	ldr	r3, [pc, #248]	; (8002ad4 <main+0x1878>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <main+0x1878>)
 80029e4:	801a      	strh	r2, [r3, #0]
						if(left_counter == 100){
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <main+0x1878>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d146      	bne.n	8002a7c <main+0x1820>
							left_counter=0;
 80029ee:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <main+0x1878>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	801a      	strh	r2, [r3, #0]
							stop();
 80029f4:	f002 fbe6 	bl	80051c4 <stop>
							HAL_Delay(250);
 80029f8:	20fa      	movs	r0, #250	; 0xfa
 80029fa:	f003 fbeb 	bl	80061d4 <HAL_Delay>
								readAccelerometer();
 80029fe:	f002 fe21 	bl	8005644 <readAccelerometer>
								if(ACCxValue > accThreshold_x){
 8002a02:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <main+0x187c>)
 8002a04:	ed93 7a00 	vldr	s14, [r3]
 8002a08:	4b34      	ldr	r3, [pc, #208]	; (8002adc <main+0x1880>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a16:	dd13      	ble.n	8002a40 <main+0x17e4>
									while(ACCxValue > accThreshold_x){
 8002a18:	e006      	b.n	8002a28 <main+0x17cc>
										readAccelerometer();
 8002a1a:	f002 fe13 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 8002a1e:	200a      	movs	r0, #10
 8002a20:	f003 fbd8 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 8002a24:	f002 fc46 	bl	80052b4 <turnLeftTrackReverse>
									while(ACCxValue > accThreshold_x){
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <main+0x187c>)
 8002a2a:	ed93 7a00 	vldr	s14, [r3]
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	; (8002adc <main+0x1880>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	dced      	bgt.n	8002a1a <main+0x17be>
 8002a3e:	e01d      	b.n	8002a7c <main+0x1820>
								}else if(ACCxValue < accThreshold_x){
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <main+0x187c>)
 8002a42:	ed93 7a00 	vldr	s14, [r3]
 8002a46:	4b25      	ldr	r3, [pc, #148]	; (8002adc <main+0x1880>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a54:	d512      	bpl.n	8002a7c <main+0x1820>
									while(ACCxValue < accThreshold_x){
 8002a56:	e006      	b.n	8002a66 <main+0x180a>
										readAccelerometer();
 8002a58:	f002 fdf4 	bl	8005644 <readAccelerometer>
										HAL_Delay(10);
 8002a5c:	200a      	movs	r0, #10
 8002a5e:	f003 fbb9 	bl	80061d4 <HAL_Delay>
										turnRightTrackReverse();
 8002a62:	f002 fc09 	bl	8005278 <turnRightTrackReverse>
									while(ACCxValue < accThreshold_x){
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <main+0x187c>)
 8002a68:	ed93 7a00 	vldr	s14, [r3]
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <main+0x1880>)
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	d4ed      	bmi.n	8002a58 <main+0x17fc>
						if (topFlag == false) {
 8002a7c:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <main+0x1884>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	f083 0301 	eor.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <main+0x1836>
							moveForward();
 8002a8a:	f002 fb7d 	bl	8005188 <moveForward>
				break;
 8002a8e:	f001 b851 	b.w	8003b34 <main+0x28d8>
							moveReverse();
 8002a92:	f002 fbb5 	bl	8005200 <moveReverse>
				break;
 8002a96:	f001 b84d 	b.w	8003b34 <main+0x28d8>
 8002a9a:	f001 b84b 	b.w	8003b34 <main+0x28d8>
 8002a9e:	bf00      	nop
 8002aa0:	20000156 	.word	0x20000156
 8002aa4:	20000158 	.word	0x20000158
 8002aa8:	20000155 	.word	0x20000155
 8002aac:	200004c4 	.word	0x200004c4
 8002ab0:	200002a4 	.word	0x200002a4
 8002ab4:	20000294 	.word	0x20000294
 8002ab8:	20000040 	.word	0x20000040
 8002abc:	200006f0 	.word	0x200006f0
 8002ac0:	2000016c 	.word	0x2000016c
 8002ac4:	2000079c 	.word	0x2000079c
 8002ac8:	200004c0 	.word	0x200004c0
 8002acc:	200006ec 	.word	0x200006ec
 8002ad0:	200006dc 	.word	0x200006dc
 8002ad4:	20000174 	.word	0x20000174
 8002ad8:	200006cc 	.word	0x200006cc
 8002adc:	20000038 	.word	0x20000038
 8002ae0:	20000400 	.word	0x20000400

		   //TOP LEFT
			case 9:
				//STOP FOR 2.5 SEC
				stop();
 8002ae4:	f002 fb6e 	bl	80051c4 <stop>
				HAL_Delay(2500);
 8002ae8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002aec:	f003 fb72 	bl	80061d4 <HAL_Delay>

				//RE-READ ULTRASONIC SENSORS AND RECHECK POSITION
				readUltrasonicDistance();
 8002af0:	f001 fde6 	bl	80046c0 <readUltrasonicDistance>
				positionToDo = positionScan();
 8002af4:	f002 f94e 	bl	8004d94 <positionScan>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b96      	ldr	r3, [pc, #600]	; (8002d54 <main+0x1af8>)
 8002afc:	601a      	str	r2, [r3, #0]
				if(positionToDo == 9){
 8002afe:	4b95      	ldr	r3, [pc, #596]	; (8002d54 <main+0x1af8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	f041 8019 	bne.w	8003b3a <main+0x28de>

					//UART CURRENT POSITION
					UARTposition(positionToDo);
 8002b08:	4b92      	ldr	r3, [pc, #584]	; (8002d54 <main+0x1af8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 fbef 	bl	80052f0 <UARTposition>
//					UARTRight(right);
//					UARTFront(front);
//					UARTBottom(bottom);

					//SET AND CLEAR APPROPRIATE FLAGS
					topLeftFlag = true;
 8002b12:	4b91      	ldr	r3, [pc, #580]	; (8002d58 <main+0x1afc>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
					topFlag = true;
 8002b18:	4b90      	ldr	r3, [pc, #576]	; (8002d5c <main+0x1b00>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
					LeftFlag = true;
 8002b1e:	4b90      	ldr	r3, [pc, #576]	; (8002d60 <main+0x1b04>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
					rightFlag= false;
 8002b24:	4b8f      	ldr	r3, [pc, #572]	; (8002d64 <main+0x1b08>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]

					//Read Contamination Status
					readContamination();
 8002b2a:	f002 fcef 	bl	800550c <readContamination>
					if(dayNight==0){
 8002b2e:	4b8e      	ldr	r3, [pc, #568]	; (8002d68 <main+0x1b0c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 8083 	bne.w	8002c3e <main+0x19e2>
						if(  (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold)  ){
 8002b38:	4b8c      	ldr	r3, [pc, #560]	; (8002d6c <main+0x1b10>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b8c      	ldr	r3, [pc, #560]	; (8002d70 <main+0x1b14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d31a      	bcc.n	8002b7a <main+0x191e>
 8002b44:	4b8b      	ldr	r3, [pc, #556]	; (8002d74 <main+0x1b18>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b89      	ldr	r3, [pc, #548]	; (8002d70 <main+0x1b14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d314      	bcc.n	8002b7a <main+0x191e>
 8002b50:	4b89      	ldr	r3, [pc, #548]	; (8002d78 <main+0x1b1c>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b86      	ldr	r3, [pc, #536]	; (8002d70 <main+0x1b14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d30e      	bcc.n	8002b7a <main+0x191e>
 8002b5c:	4b87      	ldr	r3, [pc, #540]	; (8002d7c <main+0x1b20>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b83      	ldr	r3, [pc, #524]	; (8002d70 <main+0x1b14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d308      	bcc.n	8002b7a <main+0x191e>
 8002b68:	4b85      	ldr	r3, [pc, #532]	; (8002d80 <main+0x1b24>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b80      	ldr	r3, [pc, #512]	; (8002d70 <main+0x1b14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d302      	bcc.n	8002b7a <main+0x191e>
							//UART CONTAMINATION STATUS
							//UARTContaminationFound();
							//CONTAMINATION ACTIONS
							cleaningAction();
 8002b74:	f002 fdae 	bl	80056d4 <cleaningAction>
 8002b78:	e0e9      	b.n	8002d4e <main+0x1af2>
						}else{
							//UART CONTAMINATION STATUS
							UARTContaminationNOTFound();
 8002b7a:	f002 fcaf 	bl	80054dc <UARTContaminationNOTFound>
							//CHECK CORNERS ALREADY DONE OR NOT DONE

							if ((bottomLeftFlag == true) && (bottomRightFlag == false) && (topRightFlag == false)) {
 8002b7e:	4b81      	ldr	r3, [pc, #516]	; (8002d84 <main+0x1b28>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d038      	beq.n	8002bf8 <main+0x199c>
 8002b86:	4b80      	ldr	r3, [pc, #512]	; (8002d88 <main+0x1b2c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	f083 0301 	eor.w	r3, r3, #1
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d031      	beq.n	8002bf8 <main+0x199c>
 8002b94:	4b7d      	ldr	r3, [pc, #500]	; (8002d8c <main+0x1b30>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	f083 0301 	eor.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d02a      	beq.n	8002bf8 <main+0x199c>
								//REVERSE
								moveReverse();
 8002ba2:	f002 fb2d 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8002ba6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002baa:	f003 fb13 	bl	80061d4 <HAL_Delay>

								//Turn LEFT TRACK REVERSE
								turnLeftTrackReverse();
 8002bae:	f002 fb81 	bl	80052b4 <turnLeftTrackReverse>
								HAL_Delay(8000);
 8002bb2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002bb6:	f003 fb0d 	bl	80061d4 <HAL_Delay>

								moveReverse();
 8002bba:	f002 fb21 	bl	8005200 <moveReverse>
								HAL_Delay(2000);
 8002bbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002bc2:	f003 fb07 	bl	80061d4 <HAL_Delay>

								//TURN RIGHT TRACK REVERSE
								readAccelerometer();
 8002bc6:	f002 fd3d 	bl	8005644 <readAccelerometer>
								while(ACCyValue > accThreshold){
 8002bca:	e003      	b.n	8002bd4 <main+0x1978>
									readAccelerometer();
 8002bcc:	f002 fd3a 	bl	8005644 <readAccelerometer>
									turnRightTrackReverse();
 8002bd0:	f002 fb52 	bl	8005278 <turnRightTrackReverse>
								while(ACCyValue > accThreshold){
 8002bd4:	4b6e      	ldr	r3, [pc, #440]	; (8002d90 <main+0x1b34>)
 8002bd6:	ed93 7a00 	vldr	s14, [r3]
 8002bda:	4b6e      	ldr	r3, [pc, #440]	; (8002d94 <main+0x1b38>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	dcf0      	bgt.n	8002bcc <main+0x1970>
								}

								//REVERSE
								moveReverse();
 8002bea:	f002 fb09 	bl	8005200 <moveReverse>
								HAL_Delay(300);
 8002bee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002bf2:	f003 faef 	bl	80061d4 <HAL_Delay>
 8002bf6:	e0aa      	b.n	8002d4e <main+0x1af2>

							}else if (((bottomLeftFlag == true) && (bottomRightFlag == true) && (topLeftFlag == true))) {
 8002bf8:	4b62      	ldr	r3, [pc, #392]	; (8002d84 <main+0x1b28>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00e      	beq.n	8002c1e <main+0x19c2>
 8002c00:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <main+0x1b2c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <main+0x19c2>
 8002c08:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <main+0x1afc>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d006      	beq.n	8002c1e <main+0x19c2>
								//REVERSE BACK TO BOTTOM CORNER
								moveReverse();
 8002c10:	f002 faf6 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8002c14:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002c18:	f003 fadc 	bl	80061d4 <HAL_Delay>
 8002c1c:	e097      	b.n	8002d4e <main+0x1af2>

							}else if ((bottomLeftFlag == false)) {
 8002c1e:	4b59      	ldr	r3, [pc, #356]	; (8002d84 <main+0x1b28>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f083 0301 	eor.w	r3, r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8786 	beq.w	8003b3a <main+0x28de>
								//REVERSE BACK TO BOTTOM CORNER
								moveReverse();
 8002c2e:	f002 fae7 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8002c32:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002c36:	f003 facd 	bl	80061d4 <HAL_Delay>
						}
					}

				}

				break;
 8002c3a:	f000 bf7e 	b.w	8003b3a <main+0x28de>
					}else if (dayNight==1) {
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <main+0x1b0c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	f040 8779 	bne.w	8003b3a <main+0x28de>
						if(  (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold)  ){
 8002c48:	4b48      	ldr	r3, [pc, #288]	; (8002d6c <main+0x1b10>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b48      	ldr	r3, [pc, #288]	; (8002d70 <main+0x1b14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d81a      	bhi.n	8002c8a <main+0x1a2e>
 8002c54:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <main+0x1b18>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <main+0x1b14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d814      	bhi.n	8002c8a <main+0x1a2e>
 8002c60:	4b45      	ldr	r3, [pc, #276]	; (8002d78 <main+0x1b1c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b42      	ldr	r3, [pc, #264]	; (8002d70 <main+0x1b14>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d80e      	bhi.n	8002c8a <main+0x1a2e>
 8002c6c:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <main+0x1b20>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <main+0x1b14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d808      	bhi.n	8002c8a <main+0x1a2e>
 8002c78:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <main+0x1b24>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b3c      	ldr	r3, [pc, #240]	; (8002d70 <main+0x1b14>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d802      	bhi.n	8002c8a <main+0x1a2e>
							cleaningAction();
 8002c84:	f002 fd26 	bl	80056d4 <cleaningAction>
 8002c88:	e061      	b.n	8002d4e <main+0x1af2>
							UARTContaminationNOTFound();
 8002c8a:	f002 fc27 	bl	80054dc <UARTContaminationNOTFound>
							if ((bottomLeftFlag == true) && (bottomRightFlag == false) && (topRightFlag == false)) {
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	; (8002d84 <main+0x1b28>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d038      	beq.n	8002d08 <main+0x1aac>
 8002c96:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <main+0x1b2c>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	f083 0301 	eor.w	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d031      	beq.n	8002d08 <main+0x1aac>
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <main+0x1b30>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	f083 0301 	eor.w	r3, r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d02a      	beq.n	8002d08 <main+0x1aac>
								moveReverse();
 8002cb2:	f002 faa5 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8002cb6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002cba:	f003 fa8b 	bl	80061d4 <HAL_Delay>
								turnLeftTrackReverse();
 8002cbe:	f002 faf9 	bl	80052b4 <turnLeftTrackReverse>
								HAL_Delay(8000);
 8002cc2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002cc6:	f003 fa85 	bl	80061d4 <HAL_Delay>
								moveReverse();
 8002cca:	f002 fa99 	bl	8005200 <moveReverse>
								HAL_Delay(2000);
 8002cce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cd2:	f003 fa7f 	bl	80061d4 <HAL_Delay>
								readAccelerometer();
 8002cd6:	f002 fcb5 	bl	8005644 <readAccelerometer>
								while(ACCyValue > accThreshold){
 8002cda:	e003      	b.n	8002ce4 <main+0x1a88>
									readAccelerometer();
 8002cdc:	f002 fcb2 	bl	8005644 <readAccelerometer>
									turnRightTrackReverse();
 8002ce0:	f002 faca 	bl	8005278 <turnRightTrackReverse>
								while(ACCyValue > accThreshold){
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <main+0x1b34>)
 8002ce6:	ed93 7a00 	vldr	s14, [r3]
 8002cea:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <main+0x1b38>)
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf8:	dcf0      	bgt.n	8002cdc <main+0x1a80>
								moveReverse();
 8002cfa:	f002 fa81 	bl	8005200 <moveReverse>
								HAL_Delay(300);
 8002cfe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002d02:	f003 fa67 	bl	80061d4 <HAL_Delay>
 8002d06:	e022      	b.n	8002d4e <main+0x1af2>
							}else if (((bottomLeftFlag == true) && (bottomRightFlag == true) && (topLeftFlag == true))) {
 8002d08:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <main+0x1b28>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00e      	beq.n	8002d2e <main+0x1ad2>
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <main+0x1b2c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <main+0x1ad2>
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <main+0x1afc>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <main+0x1ad2>
								moveReverse();
 8002d20:	f002 fa6e 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8002d24:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002d28:	f003 fa54 	bl	80061d4 <HAL_Delay>
 8002d2c:	e00f      	b.n	8002d4e <main+0x1af2>
							}else if ((bottomLeftFlag == false)) {
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <main+0x1b28>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	f083 0301 	eor.w	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 86fe 	beq.w	8003b3a <main+0x28de>
								moveReverse();
 8002d3e:	f002 fa5f 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8002d42:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002d46:	f003 fa45 	bl	80061d4 <HAL_Delay>
				break;
 8002d4a:	f000 bef6 	b.w	8003b3a <main+0x28de>
 8002d4e:	f000 bef4 	b.w	8003b3a <main+0x28de>
 8002d52:	bf00      	nop
 8002d54:	200004c4 	.word	0x200004c4
 8002d58:	20000158 	.word	0x20000158
 8002d5c:	20000400 	.word	0x20000400
 8002d60:	20000294 	.word	0x20000294
 8002d64:	200002a4 	.word	0x200002a4
 8002d68:	20000040 	.word	0x20000040
 8002d6c:	200006f0 	.word	0x200006f0
 8002d70:	2000016c 	.word	0x2000016c
 8002d74:	2000079c 	.word	0x2000079c
 8002d78:	200004c0 	.word	0x200004c0
 8002d7c:	200006ec 	.word	0x200006ec
 8002d80:	200006dc 	.word	0x200006dc
 8002d84:	20000157 	.word	0x20000157
 8002d88:	20000155 	.word	0x20000155
 8002d8c:	20000156 	.word	0x20000156
 8002d90:	200003fc 	.word	0x200003fc
 8002d94:	20000034 	.word	0x20000034
		   //CLOSE TOP RIGHT
			case 10:
				//STOP FOR 2.5 SEC
				stop();
 8002d98:	f002 fa14 	bl	80051c4 <stop>
				HAL_Delay(2500);
 8002d9c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002da0:	f003 fa18 	bl	80061d4 <HAL_Delay>

				//RE-READ ULTRASONIC SENSORS AND RECHECK POSITION
				readUltrasonicDistance();
 8002da4:	f001 fc8c 	bl	80046c0 <readUltrasonicDistance>
				positionToDo = positionScan();
 8002da8:	f001 fff4 	bl	8004d94 <positionScan>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4baf      	ldr	r3, [pc, #700]	; (800306c <main+0x1e10>)
 8002db0:	601a      	str	r2, [r3, #0]
				if(positionToDo == 10){
 8002db2:	4bae      	ldr	r3, [pc, #696]	; (800306c <main+0x1e10>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b0a      	cmp	r3, #10
 8002db8:	f040 86c2 	bne.w	8003b40 <main+0x28e4>

					//UART CURRENT POSITION
					UARTposition(positionToDo);
 8002dbc:	4bab      	ldr	r3, [pc, #684]	; (800306c <main+0x1e10>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fa95 	bl	80052f0 <UARTposition>
//					UARTFront(front);
//					UARTBottom(bottom);


					//SET AND CLEAR APPROPRIATE FLAGS
					topRightFlag = true;
 8002dc6:	4baa      	ldr	r3, [pc, #680]	; (8003070 <main+0x1e14>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
					rightFlag = true;
 8002dcc:	4ba9      	ldr	r3, [pc, #676]	; (8003074 <main+0x1e18>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
					topFlag = true;
 8002dd2:	4ba9      	ldr	r3, [pc, #676]	; (8003078 <main+0x1e1c>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
					LeftFlag = false;
 8002dd8:	4ba8      	ldr	r3, [pc, #672]	; (800307c <main+0x1e20>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]


					//Read Contamination Status
					readContamination();
 8002dde:	f002 fb95 	bl	800550c <readContamination>
					if(dayNight==0){
 8002de2:	4ba7      	ldr	r3, [pc, #668]	; (8003080 <main+0x1e24>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 80ec 	bne.w	8002fc4 <main+0x1d68>
						if(  (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold) ){
 8002dec:	4ba5      	ldr	r3, [pc, #660]	; (8003084 <main+0x1e28>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4ba5      	ldr	r3, [pc, #660]	; (8003088 <main+0x1e2c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d31a      	bcc.n	8002e2e <main+0x1bd2>
 8002df8:	4ba4      	ldr	r3, [pc, #656]	; (800308c <main+0x1e30>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4ba2      	ldr	r3, [pc, #648]	; (8003088 <main+0x1e2c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d314      	bcc.n	8002e2e <main+0x1bd2>
 8002e04:	4ba2      	ldr	r3, [pc, #648]	; (8003090 <main+0x1e34>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b9f      	ldr	r3, [pc, #636]	; (8003088 <main+0x1e2c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d30e      	bcc.n	8002e2e <main+0x1bd2>
 8002e10:	4ba0      	ldr	r3, [pc, #640]	; (8003094 <main+0x1e38>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b9c      	ldr	r3, [pc, #624]	; (8003088 <main+0x1e2c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d308      	bcc.n	8002e2e <main+0x1bd2>
 8002e1c:	4b9e      	ldr	r3, [pc, #632]	; (8003098 <main+0x1e3c>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b99      	ldr	r3, [pc, #612]	; (8003088 <main+0x1e2c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d302      	bcc.n	8002e2e <main+0x1bd2>
							//UART CONTAMINATION STATUS
							//UARTContaminationFound();
							//CONTAMINATION ACTIONS
							cleaningAction();
 8002e28:	f002 fc54 	bl	80056d4 <cleaningAction>
 8002e2c:	e1de      	b.n	80031ec <main+0x1f90>
							//UART CONTAMINATION STATUS
							//UARTContaminationNOTFound();
							//CHECK CORNERS ALREADY DONE OR NOT DONE

							//RE-ADJUST ALLIGNMENT
							readAccelerometer();
 8002e2e:	f002 fc09 	bl	8005644 <readAccelerometer>
							if(ACCxValue > accThreshold_x){
 8002e32:	4b9a      	ldr	r3, [pc, #616]	; (800309c <main+0x1e40>)
 8002e34:	ed93 7a00 	vldr	s14, [r3]
 8002e38:	4b99      	ldr	r3, [pc, #612]	; (80030a0 <main+0x1e44>)
 8002e3a:	edd3 7a00 	vldr	s15, [r3]
 8002e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e46:	dd13      	ble.n	8002e70 <main+0x1c14>
								while(ACCxValue > accThreshold_x){
 8002e48:	e006      	b.n	8002e58 <main+0x1bfc>
									readAccelerometer();
 8002e4a:	f002 fbfb 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 8002e4e:	200a      	movs	r0, #10
 8002e50:	f003 f9c0 	bl	80061d4 <HAL_Delay>
									turnLeftTrackReverse();
 8002e54:	f002 fa2e 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCxValue > accThreshold_x){
 8002e58:	4b90      	ldr	r3, [pc, #576]	; (800309c <main+0x1e40>)
 8002e5a:	ed93 7a00 	vldr	s14, [r3]
 8002e5e:	4b90      	ldr	r3, [pc, #576]	; (80030a0 <main+0x1e44>)
 8002e60:	edd3 7a00 	vldr	s15, [r3]
 8002e64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	dced      	bgt.n	8002e4a <main+0x1bee>
 8002e6e:	e01d      	b.n	8002eac <main+0x1c50>
								}
							}else if(ACCxValue < accThreshold_x){
 8002e70:	4b8a      	ldr	r3, [pc, #552]	; (800309c <main+0x1e40>)
 8002e72:	ed93 7a00 	vldr	s14, [r3]
 8002e76:	4b8a      	ldr	r3, [pc, #552]	; (80030a0 <main+0x1e44>)
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e84:	d512      	bpl.n	8002eac <main+0x1c50>
								while(ACCxValue < accThreshold_x){
 8002e86:	e006      	b.n	8002e96 <main+0x1c3a>
									readAccelerometer();
 8002e88:	f002 fbdc 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 8002e8c:	200a      	movs	r0, #10
 8002e8e:	f003 f9a1 	bl	80061d4 <HAL_Delay>
									turnRightTrackReverse();
 8002e92:	f002 f9f1 	bl	8005278 <turnRightTrackReverse>
								while(ACCxValue < accThreshold_x){
 8002e96:	4b81      	ldr	r3, [pc, #516]	; (800309c <main+0x1e40>)
 8002e98:	ed93 7a00 	vldr	s14, [r3]
 8002e9c:	4b80      	ldr	r3, [pc, #512]	; (80030a0 <main+0x1e44>)
 8002e9e:	edd3 7a00 	vldr	s15, [r3]
 8002ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eaa:	d4ed      	bmi.n	8002e88 <main+0x1c2c>
								}
							}
							stop();
 8002eac:	f002 f98a 	bl	80051c4 <stop>
							HAL_Delay(00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f003 f98f 	bl	80061d4 <HAL_Delay>

							if ((bottomRightFlag == true) && (bottomLeftFlag == false) && (topLeftFlag == false)) {
 8002eb6:	4b7b      	ldr	r3, [pc, #492]	; (80030a4 <main+0x1e48>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d05f      	beq.n	8002f7e <main+0x1d22>
 8002ebe:	4b7a      	ldr	r3, [pc, #488]	; (80030a8 <main+0x1e4c>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	f083 0301 	eor.w	r3, r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d058      	beq.n	8002f7e <main+0x1d22>
 8002ecc:	4b77      	ldr	r3, [pc, #476]	; (80030ac <main+0x1e50>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	f083 0301 	eor.w	r3, r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d051      	beq.n	8002f7e <main+0x1d22>
								//REVERSE
								moveReverse();
 8002eda:	f002 f991 	bl	8005200 <moveReverse>
								HAL_Delay(1000);
 8002ede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ee2:	f003 f977 	bl	80061d4 <HAL_Delay>

								//TURN RIGHT TRACK REVERSE
								turnRightTrackReverse();
 8002ee6:	f002 f9c7 	bl	8005278 <turnRightTrackReverse>
								HAL_Delay(1000);
 8002eea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002eee:	f003 f971 	bl	80061d4 <HAL_Delay>

								//STOP
								stop();
 8002ef2:	f002 f967 	bl	80051c4 <stop>
								HAL_Delay(50);
 8002ef6:	2032      	movs	r0, #50	; 0x32
 8002ef8:	f003 f96c 	bl	80061d4 <HAL_Delay>

								//REVERSE
								moveReverse();
 8002efc:	f002 f980 	bl	8005200 <moveReverse>
								HAL_Delay(2000);
 8002f00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f04:	f003 f966 	bl	80061d4 <HAL_Delay>

								//TURN RIGHT TRACK REVERSE
								turnRightTrackReverse();
 8002f08:	f002 f9b6 	bl	8005278 <turnRightTrackReverse>
								HAL_Delay(1000);
 8002f0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f10:	f003 f960 	bl	80061d4 <HAL_Delay>

								//STOP
								stop();
 8002f14:	f002 f956 	bl	80051c4 <stop>
								HAL_Delay(50);
 8002f18:	2032      	movs	r0, #50	; 0x32
 8002f1a:	f003 f95b 	bl	80061d4 <HAL_Delay>

								//REVERSE
								moveReverse();
 8002f1e:	f002 f96f 	bl	8005200 <moveReverse>
								HAL_Delay(2000);
 8002f22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f26:	f003 f955 	bl	80061d4 <HAL_Delay>

								//STOP
								stop();
 8002f2a:	f002 f94b 	bl	80051c4 <stop>
								HAL_Delay(50);
 8002f2e:	2032      	movs	r0, #50	; 0x32
 8002f30:	f003 f950 	bl	80061d4 <HAL_Delay>

								//TURN RIGHT TRACK REVERSE
								turnRightTrackReverse();
 8002f34:	f002 f9a0 	bl	8005278 <turnRightTrackReverse>
								HAL_Delay(7000);
 8002f38:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002f3c:	f003 f94a 	bl	80061d4 <HAL_Delay>

								//Reverse
								moveReverse();
 8002f40:	f002 f95e 	bl	8005200 <moveReverse>
								HAL_Delay(2000);
 8002f44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f48:	f003 f944 	bl	80061d4 <HAL_Delay>

								//Turn LEFT TRACK REVERSE
								readAccelerometer();
 8002f4c:	f002 fb7a 	bl	8005644 <readAccelerometer>
								while(ACCxValue > accThreshold_x){
 8002f50:	e003      	b.n	8002f5a <main+0x1cfe>
									readAccelerometer();
 8002f52:	f002 fb77 	bl	8005644 <readAccelerometer>
									turnLeftTrackReverse();
 8002f56:	f002 f9ad 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCxValue > accThreshold_x){
 8002f5a:	4b50      	ldr	r3, [pc, #320]	; (800309c <main+0x1e40>)
 8002f5c:	ed93 7a00 	vldr	s14, [r3]
 8002f60:	4b4f      	ldr	r3, [pc, #316]	; (80030a0 <main+0x1e44>)
 8002f62:	edd3 7a00 	vldr	s15, [r3]
 8002f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	dcf0      	bgt.n	8002f52 <main+0x1cf6>
								}

								//REVERSE
								moveReverse();
 8002f70:	f002 f946 	bl	8005200 <moveReverse>
								HAL_Delay(300);
 8002f74:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002f78:	f003 f92c 	bl	80061d4 <HAL_Delay>
 8002f7c:	e136      	b.n	80031ec <main+0x1f90>

							}else if (((bottomRightFlag == true) && (bottomLeftFlag == true) && (topLeftFlag == true))) {
 8002f7e:	4b49      	ldr	r3, [pc, #292]	; (80030a4 <main+0x1e48>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00e      	beq.n	8002fa4 <main+0x1d48>
 8002f86:	4b48      	ldr	r3, [pc, #288]	; (80030a8 <main+0x1e4c>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <main+0x1d48>
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <main+0x1e50>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <main+0x1d48>
								//REVERSE BACK TO BOTTOM CORNER
								moveReverse();
 8002f96:	f002 f933 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8002f9a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002f9e:	f003 f919 	bl	80061d4 <HAL_Delay>
 8002fa2:	e123      	b.n	80031ec <main+0x1f90>

							}else if ((bottomRightFlag == false)) {
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	; (80030a4 <main+0x1e48>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	f083 0301 	eor.w	r3, r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 85c6 	beq.w	8003b40 <main+0x28e4>
	//							//REVERSE BACK TO BOTTOM CORNER
								moveReverse();
 8002fb4:	f002 f924 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 8002fb8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002fbc:	f003 f90a 	bl	80061d4 <HAL_Delay>
						}
					}


				}
				break;
 8002fc0:	f000 bdbe 	b.w	8003b40 <main+0x28e4>
					}else if (dayNight==1) {
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <main+0x1e24>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	f040 85b9 	bne.w	8003b40 <main+0x28e4>
						if(  (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold) ){
 8002fce:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <main+0x1e28>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <main+0x1e2c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d81a      	bhi.n	8003010 <main+0x1db4>
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <main+0x1e30>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b2a      	ldr	r3, [pc, #168]	; (8003088 <main+0x1e2c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d814      	bhi.n	8003010 <main+0x1db4>
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <main+0x1e34>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <main+0x1e2c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d80e      	bhi.n	8003010 <main+0x1db4>
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <main+0x1e38>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <main+0x1e2c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d808      	bhi.n	8003010 <main+0x1db4>
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <main+0x1e3c>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <main+0x1e2c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d802      	bhi.n	8003010 <main+0x1db4>
							cleaningAction();
 800300a:	f002 fb63 	bl	80056d4 <cleaningAction>
 800300e:	e0ed      	b.n	80031ec <main+0x1f90>
							readAccelerometer();
 8003010:	f002 fb18 	bl	8005644 <readAccelerometer>
							if(ACCxValue > accThreshold_x){
 8003014:	4b21      	ldr	r3, [pc, #132]	; (800309c <main+0x1e40>)
 8003016:	ed93 7a00 	vldr	s14, [r3]
 800301a:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <main+0x1e44>)
 800301c:	edd3 7a00 	vldr	s15, [r3]
 8003020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	dd13      	ble.n	8003052 <main+0x1df6>
								while(ACCxValue > accThreshold_x){
 800302a:	e006      	b.n	800303a <main+0x1dde>
									readAccelerometer();
 800302c:	f002 fb0a 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 8003030:	200a      	movs	r0, #10
 8003032:	f003 f8cf 	bl	80061d4 <HAL_Delay>
									turnLeftTrackReverse();
 8003036:	f002 f93d 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCxValue > accThreshold_x){
 800303a:	4b18      	ldr	r3, [pc, #96]	; (800309c <main+0x1e40>)
 800303c:	ed93 7a00 	vldr	s14, [r3]
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <main+0x1e44>)
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	dced      	bgt.n	800302c <main+0x1dd0>
 8003050:	e040      	b.n	80030d4 <main+0x1e78>
							}else if(ACCxValue < accThreshold_x){
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <main+0x1e40>)
 8003054:	ed93 7a00 	vldr	s14, [r3]
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <main+0x1e44>)
 800305a:	edd3 7a00 	vldr	s15, [r3]
 800305e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	d535      	bpl.n	80030d4 <main+0x1e78>
								while(ACCxValue < accThreshold_x){
 8003068:	e029      	b.n	80030be <main+0x1e62>
 800306a:	bf00      	nop
 800306c:	200004c4 	.word	0x200004c4
 8003070:	20000156 	.word	0x20000156
 8003074:	200002a4 	.word	0x200002a4
 8003078:	20000400 	.word	0x20000400
 800307c:	20000294 	.word	0x20000294
 8003080:	20000040 	.word	0x20000040
 8003084:	200006f0 	.word	0x200006f0
 8003088:	2000016c 	.word	0x2000016c
 800308c:	2000079c 	.word	0x2000079c
 8003090:	200004c0 	.word	0x200004c0
 8003094:	200006ec 	.word	0x200006ec
 8003098:	200006dc 	.word	0x200006dc
 800309c:	200006cc 	.word	0x200006cc
 80030a0:	20000038 	.word	0x20000038
 80030a4:	20000155 	.word	0x20000155
 80030a8:	20000157 	.word	0x20000157
 80030ac:	20000158 	.word	0x20000158
									readAccelerometer();
 80030b0:	f002 fac8 	bl	8005644 <readAccelerometer>
									HAL_Delay(10);
 80030b4:	200a      	movs	r0, #10
 80030b6:	f003 f88d 	bl	80061d4 <HAL_Delay>
									turnRightTrackReverse();
 80030ba:	f002 f8dd 	bl	8005278 <turnRightTrackReverse>
								while(ACCxValue < accThreshold_x){
 80030be:	4bc3      	ldr	r3, [pc, #780]	; (80033cc <main+0x2170>)
 80030c0:	ed93 7a00 	vldr	s14, [r3]
 80030c4:	4bc2      	ldr	r3, [pc, #776]	; (80033d0 <main+0x2174>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d2:	d4ed      	bmi.n	80030b0 <main+0x1e54>
							stop();
 80030d4:	f002 f876 	bl	80051c4 <stop>
							HAL_Delay(00);
 80030d8:	2000      	movs	r0, #0
 80030da:	f003 f87b 	bl	80061d4 <HAL_Delay>
							if ((bottomRightFlag == true) && (bottomLeftFlag == false) && (topLeftFlag == false)) {
 80030de:	4bbd      	ldr	r3, [pc, #756]	; (80033d4 <main+0x2178>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d05f      	beq.n	80031a6 <main+0x1f4a>
 80030e6:	4bbc      	ldr	r3, [pc, #752]	; (80033d8 <main+0x217c>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	f083 0301 	eor.w	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d058      	beq.n	80031a6 <main+0x1f4a>
 80030f4:	4bb9      	ldr	r3, [pc, #740]	; (80033dc <main+0x2180>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	f083 0301 	eor.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d051      	beq.n	80031a6 <main+0x1f4a>
								moveReverse();
 8003102:	f002 f87d 	bl	8005200 <moveReverse>
								HAL_Delay(1000);
 8003106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800310a:	f003 f863 	bl	80061d4 <HAL_Delay>
								turnRightTrackReverse();
 800310e:	f002 f8b3 	bl	8005278 <turnRightTrackReverse>
								HAL_Delay(1000);
 8003112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003116:	f003 f85d 	bl	80061d4 <HAL_Delay>
								stop();
 800311a:	f002 f853 	bl	80051c4 <stop>
								HAL_Delay(50);
 800311e:	2032      	movs	r0, #50	; 0x32
 8003120:	f003 f858 	bl	80061d4 <HAL_Delay>
								moveReverse();
 8003124:	f002 f86c 	bl	8005200 <moveReverse>
								HAL_Delay(2000);
 8003128:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800312c:	f003 f852 	bl	80061d4 <HAL_Delay>
								turnRightTrackReverse();
 8003130:	f002 f8a2 	bl	8005278 <turnRightTrackReverse>
								HAL_Delay(1000);
 8003134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003138:	f003 f84c 	bl	80061d4 <HAL_Delay>
								stop();
 800313c:	f002 f842 	bl	80051c4 <stop>
								HAL_Delay(50);
 8003140:	2032      	movs	r0, #50	; 0x32
 8003142:	f003 f847 	bl	80061d4 <HAL_Delay>
								moveReverse();
 8003146:	f002 f85b 	bl	8005200 <moveReverse>
								HAL_Delay(2000);
 800314a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800314e:	f003 f841 	bl	80061d4 <HAL_Delay>
								stop();
 8003152:	f002 f837 	bl	80051c4 <stop>
								HAL_Delay(50);
 8003156:	2032      	movs	r0, #50	; 0x32
 8003158:	f003 f83c 	bl	80061d4 <HAL_Delay>
								turnRightTrackReverse();
 800315c:	f002 f88c 	bl	8005278 <turnRightTrackReverse>
								HAL_Delay(7000);
 8003160:	f641 3058 	movw	r0, #7000	; 0x1b58
 8003164:	f003 f836 	bl	80061d4 <HAL_Delay>
								moveReverse();
 8003168:	f002 f84a 	bl	8005200 <moveReverse>
								HAL_Delay(2000);
 800316c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003170:	f003 f830 	bl	80061d4 <HAL_Delay>
								readAccelerometer();
 8003174:	f002 fa66 	bl	8005644 <readAccelerometer>
								while(ACCxValue > accThreshold_x){
 8003178:	e003      	b.n	8003182 <main+0x1f26>
									readAccelerometer();
 800317a:	f002 fa63 	bl	8005644 <readAccelerometer>
									turnLeftTrackReverse();
 800317e:	f002 f899 	bl	80052b4 <turnLeftTrackReverse>
								while(ACCxValue > accThreshold_x){
 8003182:	4b92      	ldr	r3, [pc, #584]	; (80033cc <main+0x2170>)
 8003184:	ed93 7a00 	vldr	s14, [r3]
 8003188:	4b91      	ldr	r3, [pc, #580]	; (80033d0 <main+0x2174>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	dcf0      	bgt.n	800317a <main+0x1f1e>
								moveReverse();
 8003198:	f002 f832 	bl	8005200 <moveReverse>
								HAL_Delay(300);
 800319c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80031a0:	f003 f818 	bl	80061d4 <HAL_Delay>
 80031a4:	e022      	b.n	80031ec <main+0x1f90>
							}else if (((bottomRightFlag == true) && (bottomLeftFlag == true) && (topLeftFlag == true))) {
 80031a6:	4b8b      	ldr	r3, [pc, #556]	; (80033d4 <main+0x2178>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00e      	beq.n	80031cc <main+0x1f70>
 80031ae:	4b8a      	ldr	r3, [pc, #552]	; (80033d8 <main+0x217c>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <main+0x1f70>
 80031b6:	4b89      	ldr	r3, [pc, #548]	; (80033dc <main+0x2180>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <main+0x1f70>
								moveReverse();
 80031be:	f002 f81f 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 80031c2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80031c6:	f003 f805 	bl	80061d4 <HAL_Delay>
 80031ca:	e00f      	b.n	80031ec <main+0x1f90>
							}else if ((bottomRightFlag == false)) {
 80031cc:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <main+0x2178>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	f083 0301 	eor.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 84b2 	beq.w	8003b40 <main+0x28e4>
								moveReverse();
 80031dc:	f002 f810 	bl	8005200 <moveReverse>
								HAL_Delay(4000);
 80031e0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80031e4:	f002 fff6 	bl	80061d4 <HAL_Delay>
				break;
 80031e8:	f000 bcaa 	b.w	8003b40 <main+0x28e4>
 80031ec:	f000 bca8 	b.w	8003b40 <main+0x28e4>
				   //CLOSE TOP LEFT
					case 11:
						//STOP FOR 2.5 SEC
						stop();
 80031f0:	f001 ffe8 	bl	80051c4 <stop>
						HAL_Delay(2500);
 80031f4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80031f8:	f002 ffec 	bl	80061d4 <HAL_Delay>

						//RE-READ ULTRASONIC SENSORS AND RECHECK POSITION
						readUltrasonicDistance();
 80031fc:	f001 fa60 	bl	80046c0 <readUltrasonicDistance>
						positionToDo = positionScan();
 8003200:	f001 fdc8 	bl	8004d94 <positionScan>
 8003204:	4602      	mov	r2, r0
 8003206:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <main+0x2184>)
 8003208:	601a      	str	r2, [r3, #0]
						if(positionToDo == 11){
 800320a:	4b75      	ldr	r3, [pc, #468]	; (80033e0 <main+0x2184>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b0b      	cmp	r3, #11
 8003210:	f040 8499 	bne.w	8003b46 <main+0x28ea>

							//UART CURRENT POSITION
							UARTposition(positionToDo);
 8003214:	4b72      	ldr	r3, [pc, #456]	; (80033e0 <main+0x2184>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f002 f869 	bl	80052f0 <UARTposition>
//							UARTFront(front);
//							UARTBottom(bottom);


							//SET AND CLEAR APPROPRIATE FLAGS
							topLeftFlag = true;
 800321e:	4b6f      	ldr	r3, [pc, #444]	; (80033dc <main+0x2180>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
							rightFlag = false;
 8003224:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <main+0x2188>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
							topFlag = true;
 800322a:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <main+0x218c>)
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
							LeftFlag = true;
 8003230:	4b6e      	ldr	r3, [pc, #440]	; (80033ec <main+0x2190>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]


							//Read Contamination Status
							readContamination();
 8003236:	f002 f969 	bl	800550c <readContamination>
							if(dayNight==0){
 800323a:	4b6d      	ldr	r3, [pc, #436]	; (80033f0 <main+0x2194>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 8108 	bne.w	8003454 <main+0x21f8>
								if(  (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold) ){
 8003244:	4b6b      	ldr	r3, [pc, #428]	; (80033f4 <main+0x2198>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b6b      	ldr	r3, [pc, #428]	; (80033f8 <main+0x219c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d31a      	bcc.n	8003286 <main+0x202a>
 8003250:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <main+0x21a0>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b68      	ldr	r3, [pc, #416]	; (80033f8 <main+0x219c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d314      	bcc.n	8003286 <main+0x202a>
 800325c:	4b68      	ldr	r3, [pc, #416]	; (8003400 <main+0x21a4>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <main+0x219c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d30e      	bcc.n	8003286 <main+0x202a>
 8003268:	4b66      	ldr	r3, [pc, #408]	; (8003404 <main+0x21a8>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b62      	ldr	r3, [pc, #392]	; (80033f8 <main+0x219c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d308      	bcc.n	8003286 <main+0x202a>
 8003274:	4b64      	ldr	r3, [pc, #400]	; (8003408 <main+0x21ac>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <main+0x219c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <main+0x202a>
									//UART CONTAMINATION STATUS
//									UARTContaminationFound();
									//CONTAMINATION ACTIONS
									cleaningAction();
 8003280:	f002 fa28 	bl	80056d4 <cleaningAction>
 8003284:	e1c0      	b.n	8003608 <main+0x23ac>
									//UART CONTAMINATION STATUS
									//UARTContaminationNOTFound();
									//CHECK CORNERS ALREADY DONE OR NOT DONE

									//RE-ADJUST ALLIGNMENT
									readAccelerometer();
 8003286:	f002 f9dd 	bl	8005644 <readAccelerometer>
									if(ACCxValue > accThreshold_x){
 800328a:	4b50      	ldr	r3, [pc, #320]	; (80033cc <main+0x2170>)
 800328c:	ed93 7a00 	vldr	s14, [r3]
 8003290:	4b4f      	ldr	r3, [pc, #316]	; (80033d0 <main+0x2174>)
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	dd13      	ble.n	80032c8 <main+0x206c>
										while(ACCxValue > accThreshold_x){
 80032a0:	e006      	b.n	80032b0 <main+0x2054>
											readAccelerometer();
 80032a2:	f002 f9cf 	bl	8005644 <readAccelerometer>
											HAL_Delay(10);
 80032a6:	200a      	movs	r0, #10
 80032a8:	f002 ff94 	bl	80061d4 <HAL_Delay>
											turnLeftTrackReverse();
 80032ac:	f002 f802 	bl	80052b4 <turnLeftTrackReverse>
										while(ACCxValue > accThreshold_x){
 80032b0:	4b46      	ldr	r3, [pc, #280]	; (80033cc <main+0x2170>)
 80032b2:	ed93 7a00 	vldr	s14, [r3]
 80032b6:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <main+0x2174>)
 80032b8:	edd3 7a00 	vldr	s15, [r3]
 80032bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	dced      	bgt.n	80032a2 <main+0x2046>
 80032c6:	e01d      	b.n	8003304 <main+0x20a8>
										}
									}else if(ACCxValue < accThreshold_x){
 80032c8:	4b40      	ldr	r3, [pc, #256]	; (80033cc <main+0x2170>)
 80032ca:	ed93 7a00 	vldr	s14, [r3]
 80032ce:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <main+0x2174>)
 80032d0:	edd3 7a00 	vldr	s15, [r3]
 80032d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	d512      	bpl.n	8003304 <main+0x20a8>
										while(ACCxValue < accThreshold_x){
 80032de:	e006      	b.n	80032ee <main+0x2092>
											readAccelerometer();
 80032e0:	f002 f9b0 	bl	8005644 <readAccelerometer>
											HAL_Delay(10);
 80032e4:	200a      	movs	r0, #10
 80032e6:	f002 ff75 	bl	80061d4 <HAL_Delay>
											turnRightTrackReverse();
 80032ea:	f001 ffc5 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <main+0x2170>)
 80032f0:	ed93 7a00 	vldr	s14, [r3]
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <main+0x2174>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	d4ed      	bmi.n	80032e0 <main+0x2084>
										}
									}


									if ((bottomRightFlag == false) && (bottomLeftFlag == true) && (topRightFlag == false)) {
 8003304:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <main+0x2178>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	f083 0301 	eor.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d07e      	beq.n	8003410 <main+0x21b4>
 8003312:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <main+0x217c>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d07a      	beq.n	8003410 <main+0x21b4>
 800331a:	4b3c      	ldr	r3, [pc, #240]	; (800340c <main+0x21b0>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	f083 0301 	eor.w	r3, r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d073      	beq.n	8003410 <main+0x21b4>
										//REVERSE
										moveReverse();
 8003328:	f001 ff6a 	bl	8005200 <moveReverse>
										HAL_Delay(1000);
 800332c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003330:	f002 ff50 	bl	80061d4 <HAL_Delay>

										//TURN LEFT TRACK REVERSE
										turnLeftTrackReverse();
 8003334:	f001 ffbe 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(1000);
 8003338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800333c:	f002 ff4a 	bl	80061d4 <HAL_Delay>

										//STOP
										stop();
 8003340:	f001 ff40 	bl	80051c4 <stop>
										HAL_Delay(50);
 8003344:	2032      	movs	r0, #50	; 0x32
 8003346:	f002 ff45 	bl	80061d4 <HAL_Delay>

										//REVERSE
										moveReverse();
 800334a:	f001 ff59 	bl	8005200 <moveReverse>
										HAL_Delay(2000);
 800334e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003352:	f002 ff3f 	bl	80061d4 <HAL_Delay>

										//TURN LEFT TRACK REVERSE
										turnLeftTrackReverse();
 8003356:	f001 ffad 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(1000);
 800335a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800335e:	f002 ff39 	bl	80061d4 <HAL_Delay>

										//STOP
										stop();
 8003362:	f001 ff2f 	bl	80051c4 <stop>
										HAL_Delay(50);
 8003366:	2032      	movs	r0, #50	; 0x32
 8003368:	f002 ff34 	bl	80061d4 <HAL_Delay>

										//REVERSE
										moveReverse();
 800336c:	f001 ff48 	bl	8005200 <moveReverse>
										HAL_Delay(2000);
 8003370:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003374:	f002 ff2e 	bl	80061d4 <HAL_Delay>

										//STOP
										stop();
 8003378:	f001 ff24 	bl	80051c4 <stop>
										HAL_Delay(50);
 800337c:	2032      	movs	r0, #50	; 0x32
 800337e:	f002 ff29 	bl	80061d4 <HAL_Delay>

										//TURN LEFT TRACK REVERSE
										turnLeftTrackReverse();
 8003382:	f001 ff97 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(7000);
 8003386:	f641 3058 	movw	r0, #7000	; 0x1b58
 800338a:	f002 ff23 	bl	80061d4 <HAL_Delay>

										//REVERSE
										moveReverse();
 800338e:	f001 ff37 	bl	8005200 <moveReverse>
										HAL_Delay(4500);
 8003392:	f241 1094 	movw	r0, #4500	; 0x1194
 8003396:	f002 ff1d 	bl	80061d4 <HAL_Delay>

										//Turn RIGHT TRACK REVERSE
										readAccelerometer();
 800339a:	f002 f953 	bl	8005644 <readAccelerometer>
										while(ACCxValue < accThreshold_x){
 800339e:	e003      	b.n	80033a8 <main+0x214c>
											readAccelerometer();
 80033a0:	f002 f950 	bl	8005644 <readAccelerometer>
											turnRightTrackReverse();
 80033a4:	f001 ff68 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <main+0x2170>)
 80033aa:	ed93 7a00 	vldr	s14, [r3]
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <main+0x2174>)
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	d4f0      	bmi.n	80033a0 <main+0x2144>
										}

										//REVERSE
										moveReverse();
 80033be:	f001 ff1f 	bl	8005200 <moveReverse>
										HAL_Delay(300);
 80033c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80033c6:	f002 ff05 	bl	80061d4 <HAL_Delay>
 80033ca:	e11d      	b.n	8003608 <main+0x23ac>
 80033cc:	200006cc 	.word	0x200006cc
 80033d0:	20000038 	.word	0x20000038
 80033d4:	20000155 	.word	0x20000155
 80033d8:	20000157 	.word	0x20000157
 80033dc:	20000158 	.word	0x20000158
 80033e0:	200004c4 	.word	0x200004c4
 80033e4:	200002a4 	.word	0x200002a4
 80033e8:	20000400 	.word	0x20000400
 80033ec:	20000294 	.word	0x20000294
 80033f0:	20000040 	.word	0x20000040
 80033f4:	200006f0 	.word	0x200006f0
 80033f8:	2000016c 	.word	0x2000016c
 80033fc:	2000079c 	.word	0x2000079c
 8003400:	200004c0 	.word	0x200004c0
 8003404:	200006ec 	.word	0x200006ec
 8003408:	200006dc 	.word	0x200006dc
 800340c:	20000156 	.word	0x20000156

									}else if (((bottomRightFlag == true) && (bottomLeftFlag == true) && (topLeftFlag == true))) {
 8003410:	4bb4      	ldr	r3, [pc, #720]	; (80036e4 <main+0x2488>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00e      	beq.n	8003436 <main+0x21da>
 8003418:	4bb3      	ldr	r3, [pc, #716]	; (80036e8 <main+0x248c>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <main+0x21da>
 8003420:	4bb2      	ldr	r3, [pc, #712]	; (80036ec <main+0x2490>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <main+0x21da>
										//REVERSE BACK TO BOTTOM CORNER
										moveReverse();
 8003428:	f001 feea 	bl	8005200 <moveReverse>
										HAL_Delay(4000);
 800342c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003430:	f002 fed0 	bl	80061d4 <HAL_Delay>
 8003434:	e0e8      	b.n	8003608 <main+0x23ac>

									}else if ((bottomLeftFlag == false)) {
 8003436:	4bac      	ldr	r3, [pc, #688]	; (80036e8 <main+0x248c>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	f083 0301 	eor.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8380 	beq.w	8003b46 <main+0x28ea>
			//							//REVERSE BACK TO BOTTOM CORNER
										moveReverse();
 8003446:	f001 fedb 	bl	8005200 <moveReverse>
										HAL_Delay(4000);
 800344a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800344e:	f002 fec1 	bl	80061d4 <HAL_Delay>
								}
							}


						}
				break;
 8003452:	e378      	b.n	8003b46 <main+0x28ea>
							}else if (dayNight==1) {
 8003454:	4ba6      	ldr	r3, [pc, #664]	; (80036f0 <main+0x2494>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	f040 8374 	bne.w	8003b46 <main+0x28ea>
								if(  (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold) ){
 800345e:	4ba5      	ldr	r3, [pc, #660]	; (80036f4 <main+0x2498>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4ba5      	ldr	r3, [pc, #660]	; (80036f8 <main+0x249c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d81a      	bhi.n	80034a0 <main+0x2244>
 800346a:	4ba4      	ldr	r3, [pc, #656]	; (80036fc <main+0x24a0>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4ba2      	ldr	r3, [pc, #648]	; (80036f8 <main+0x249c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d814      	bhi.n	80034a0 <main+0x2244>
 8003476:	4ba2      	ldr	r3, [pc, #648]	; (8003700 <main+0x24a4>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4b9f      	ldr	r3, [pc, #636]	; (80036f8 <main+0x249c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d80e      	bhi.n	80034a0 <main+0x2244>
 8003482:	4ba0      	ldr	r3, [pc, #640]	; (8003704 <main+0x24a8>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b9c      	ldr	r3, [pc, #624]	; (80036f8 <main+0x249c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d808      	bhi.n	80034a0 <main+0x2244>
 800348e:	4b9e      	ldr	r3, [pc, #632]	; (8003708 <main+0x24ac>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b99      	ldr	r3, [pc, #612]	; (80036f8 <main+0x249c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d802      	bhi.n	80034a0 <main+0x2244>
									cleaningAction();
 800349a:	f002 f91b 	bl	80056d4 <cleaningAction>
 800349e:	e0b3      	b.n	8003608 <main+0x23ac>
									readAccelerometer();
 80034a0:	f002 f8d0 	bl	8005644 <readAccelerometer>
									if(ACCxValue > accThreshold_x){
 80034a4:	4b99      	ldr	r3, [pc, #612]	; (800370c <main+0x24b0>)
 80034a6:	ed93 7a00 	vldr	s14, [r3]
 80034aa:	4b99      	ldr	r3, [pc, #612]	; (8003710 <main+0x24b4>)
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b8:	dd13      	ble.n	80034e2 <main+0x2286>
										while(ACCxValue > accThreshold_x){
 80034ba:	e006      	b.n	80034ca <main+0x226e>
											readAccelerometer();
 80034bc:	f002 f8c2 	bl	8005644 <readAccelerometer>
											HAL_Delay(10);
 80034c0:	200a      	movs	r0, #10
 80034c2:	f002 fe87 	bl	80061d4 <HAL_Delay>
											turnLeftTrackReverse();
 80034c6:	f001 fef5 	bl	80052b4 <turnLeftTrackReverse>
										while(ACCxValue > accThreshold_x){
 80034ca:	4b90      	ldr	r3, [pc, #576]	; (800370c <main+0x24b0>)
 80034cc:	ed93 7a00 	vldr	s14, [r3]
 80034d0:	4b8f      	ldr	r3, [pc, #572]	; (8003710 <main+0x24b4>)
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034de:	dced      	bgt.n	80034bc <main+0x2260>
 80034e0:	e01d      	b.n	800351e <main+0x22c2>
									}else if(ACCxValue < accThreshold_x){
 80034e2:	4b8a      	ldr	r3, [pc, #552]	; (800370c <main+0x24b0>)
 80034e4:	ed93 7a00 	vldr	s14, [r3]
 80034e8:	4b89      	ldr	r3, [pc, #548]	; (8003710 <main+0x24b4>)
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f6:	d512      	bpl.n	800351e <main+0x22c2>
										while(ACCxValue < accThreshold_x){
 80034f8:	e006      	b.n	8003508 <main+0x22ac>
											readAccelerometer();
 80034fa:	f002 f8a3 	bl	8005644 <readAccelerometer>
											HAL_Delay(10);
 80034fe:	200a      	movs	r0, #10
 8003500:	f002 fe68 	bl	80061d4 <HAL_Delay>
											turnRightTrackReverse();
 8003504:	f001 feb8 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 8003508:	4b80      	ldr	r3, [pc, #512]	; (800370c <main+0x24b0>)
 800350a:	ed93 7a00 	vldr	s14, [r3]
 800350e:	4b80      	ldr	r3, [pc, #512]	; (8003710 <main+0x24b4>)
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	d4ed      	bmi.n	80034fa <main+0x229e>
									if ((bottomRightFlag == false) && (bottomLeftFlag == true) && (topRightFlag == false)) {
 800351e:	4b71      	ldr	r3, [pc, #452]	; (80036e4 <main+0x2488>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	f083 0301 	eor.w	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d04b      	beq.n	80035c4 <main+0x2368>
 800352c:	4b6e      	ldr	r3, [pc, #440]	; (80036e8 <main+0x248c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d047      	beq.n	80035c4 <main+0x2368>
 8003534:	4b77      	ldr	r3, [pc, #476]	; (8003714 <main+0x24b8>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	f083 0301 	eor.w	r3, r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d040      	beq.n	80035c4 <main+0x2368>
										moveReverse();
 8003542:	f001 fe5d 	bl	8005200 <moveReverse>
										HAL_Delay(1000);
 8003546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800354a:	f002 fe43 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 800354e:	f001 feb1 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(1000);
 8003552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003556:	f002 fe3d 	bl	80061d4 <HAL_Delay>
										stop();
 800355a:	f001 fe33 	bl	80051c4 <stop>
										HAL_Delay(50);
 800355e:	2032      	movs	r0, #50	; 0x32
 8003560:	f002 fe38 	bl	80061d4 <HAL_Delay>
										moveReverse();
 8003564:	f001 fe4c 	bl	8005200 <moveReverse>
										HAL_Delay(2000);
 8003568:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800356c:	f002 fe32 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 8003570:	f001 fea0 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(1000);
 8003574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003578:	f002 fe2c 	bl	80061d4 <HAL_Delay>
										stop();
 800357c:	f001 fe22 	bl	80051c4 <stop>
										HAL_Delay(50);
 8003580:	2032      	movs	r0, #50	; 0x32
 8003582:	f002 fe27 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 8003586:	f001 fe95 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(7000);
 800358a:	f641 3058 	movw	r0, #7000	; 0x1b58
 800358e:	f002 fe21 	bl	80061d4 <HAL_Delay>
										readAccelerometer();
 8003592:	f002 f857 	bl	8005644 <readAccelerometer>
										while(ACCxValue < accThreshold_x){
 8003596:	e003      	b.n	80035a0 <main+0x2344>
											readAccelerometer();
 8003598:	f002 f854 	bl	8005644 <readAccelerometer>
											turnRightTrackReverse();
 800359c:	f001 fe6c 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 80035a0:	4b5a      	ldr	r3, [pc, #360]	; (800370c <main+0x24b0>)
 80035a2:	ed93 7a00 	vldr	s14, [r3]
 80035a6:	4b5a      	ldr	r3, [pc, #360]	; (8003710 <main+0x24b4>)
 80035a8:	edd3 7a00 	vldr	s15, [r3]
 80035ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b4:	d4f0      	bmi.n	8003598 <main+0x233c>
										moveReverse();
 80035b6:	f001 fe23 	bl	8005200 <moveReverse>
										HAL_Delay(300);
 80035ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80035be:	f002 fe09 	bl	80061d4 <HAL_Delay>
 80035c2:	e021      	b.n	8003608 <main+0x23ac>
									}else if (((bottomRightFlag == true) && (bottomLeftFlag == true) && (topLeftFlag == true))) {
 80035c4:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <main+0x2488>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <main+0x238e>
 80035cc:	4b46      	ldr	r3, [pc, #280]	; (80036e8 <main+0x248c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <main+0x238e>
 80035d4:	4b45      	ldr	r3, [pc, #276]	; (80036ec <main+0x2490>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d006      	beq.n	80035ea <main+0x238e>
										moveReverse();
 80035dc:	f001 fe10 	bl	8005200 <moveReverse>
										HAL_Delay(4000);
 80035e0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80035e4:	f002 fdf6 	bl	80061d4 <HAL_Delay>
 80035e8:	e00e      	b.n	8003608 <main+0x23ac>
									}else if ((bottomLeftFlag == false)) {
 80035ea:	4b3f      	ldr	r3, [pc, #252]	; (80036e8 <main+0x248c>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	f083 0301 	eor.w	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 82a6 	beq.w	8003b46 <main+0x28ea>
										moveReverse();
 80035fa:	f001 fe01 	bl	8005200 <moveReverse>
										HAL_Delay(4000);
 80035fe:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8003602:	f002 fde7 	bl	80061d4 <HAL_Delay>
				break;
 8003606:	e29e      	b.n	8003b46 <main+0x28ea>
 8003608:	e29d      	b.n	8003b46 <main+0x28ea>
				   //MEDIUM TOP LEFT
					case 12:
						//STOP FOR 2.5 SEC
						stop();
 800360a:	f001 fddb 	bl	80051c4 <stop>
						HAL_Delay(2500);
 800360e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8003612:	f002 fddf 	bl	80061d4 <HAL_Delay>

						//RE-READ ULTRASONIC SENSORS AND RECHECK POSITION
						readUltrasonicDistance();
 8003616:	f001 f853 	bl	80046c0 <readUltrasonicDistance>
						positionToDo = positionScan();
 800361a:	f001 fbbb 	bl	8004d94 <positionScan>
 800361e:	4602      	mov	r2, r0
 8003620:	4b3d      	ldr	r3, [pc, #244]	; (8003718 <main+0x24bc>)
 8003622:	601a      	str	r2, [r3, #0]
						if(positionToDo == 12){
 8003624:	4b3c      	ldr	r3, [pc, #240]	; (8003718 <main+0x24bc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b0c      	cmp	r3, #12
 800362a:	f040 826b 	bne.w	8003b04 <main+0x28a8>

							//UART CURRENT POSITION
							UARTposition(positionToDo);
 800362e:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <main+0x24bc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f001 fe5c 	bl	80052f0 <UARTposition>
//							UARTFront(front);
//							UARTBottom(bottom);


							//SET AND CLEAR APPROPRIATE FLAGS
							topLeftFlag = true;
 8003638:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <main+0x2490>)
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]
							rightFlag = false;
 800363e:	4b37      	ldr	r3, [pc, #220]	; (800371c <main+0x24c0>)
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
							topFlag = true;
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <main+0x24c4>)
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
							LeftFlag = true;
 800364a:	4b36      	ldr	r3, [pc, #216]	; (8003724 <main+0x24c8>)
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]


							//Read Contamination Status
							readContamination();
 8003650:	f001 ff5c 	bl	800550c <readContamination>
							if(dayNight==0){
 8003654:	4b26      	ldr	r3, [pc, #152]	; (80036f0 <main+0x2494>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f040 8124 	bne.w	80038a6 <main+0x264a>
								if(  (sensor1 >= outsideContaminationThreshold) && (sensor2 >= outsideContaminationThreshold) && (sensor3 >= outsideContaminationThreshold) && (sensor4 >= outsideContaminationThreshold) && (sensor5 >= outsideContaminationThreshold) ){
 800365e:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <main+0x2498>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <main+0x249c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d31a      	bcc.n	80036a0 <main+0x2444>
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <main+0x24a0>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <main+0x249c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d314      	bcc.n	80036a0 <main+0x2444>
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <main+0x24a4>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <main+0x249c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d30e      	bcc.n	80036a0 <main+0x2444>
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <main+0x24a8>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <main+0x249c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d308      	bcc.n	80036a0 <main+0x2444>
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <main+0x24ac>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <main+0x249c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <main+0x2444>
									//UART CONTAMINATION STATUS
									//UARTContaminationFound();
									//CONTAMINATION ACTIONS
									cleaningAction();
 800369a:	f002 f81b 	bl	80056d4 <cleaningAction>
 800369e:	e226      	b.n	8003aee <main+0x2892>
									//UART CONTAMINATION STATUS
									//UARTContaminationNOTFound();
									//CHECK CORNERS ALREADY DONE OR NOT DONE

									//RE-ADJUST ALLIGNMENT
									readAccelerometer();
 80036a0:	f001 ffd0 	bl	8005644 <readAccelerometer>
									if(ACCxValue > accThreshold_x){
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <main+0x24b0>)
 80036a6:	ed93 7a00 	vldr	s14, [r3]
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <main+0x24b4>)
 80036ac:	edd3 7a00 	vldr	s15, [r3]
 80036b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b8:	dd36      	ble.n	8003728 <main+0x24cc>
										while(ACCxValue > accThreshold_x){
 80036ba:	e006      	b.n	80036ca <main+0x246e>
											readAccelerometer();
 80036bc:	f001 ffc2 	bl	8005644 <readAccelerometer>
											HAL_Delay(10);
 80036c0:	200a      	movs	r0, #10
 80036c2:	f002 fd87 	bl	80061d4 <HAL_Delay>
											turnLeftTrackReverse();
 80036c6:	f001 fdf5 	bl	80052b4 <turnLeftTrackReverse>
										while(ACCxValue > accThreshold_x){
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <main+0x24b0>)
 80036cc:	ed93 7a00 	vldr	s14, [r3]
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <main+0x24b4>)
 80036d2:	edd3 7a00 	vldr	s15, [r3]
 80036d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036de:	dced      	bgt.n	80036bc <main+0x2460>
 80036e0:	e040      	b.n	8003764 <main+0x2508>
 80036e2:	bf00      	nop
 80036e4:	20000155 	.word	0x20000155
 80036e8:	20000157 	.word	0x20000157
 80036ec:	20000158 	.word	0x20000158
 80036f0:	20000040 	.word	0x20000040
 80036f4:	200006f0 	.word	0x200006f0
 80036f8:	2000016c 	.word	0x2000016c
 80036fc:	2000079c 	.word	0x2000079c
 8003700:	200004c0 	.word	0x200004c0
 8003704:	200006ec 	.word	0x200006ec
 8003708:	200006dc 	.word	0x200006dc
 800370c:	200006cc 	.word	0x200006cc
 8003710:	20000038 	.word	0x20000038
 8003714:	20000156 	.word	0x20000156
 8003718:	200004c4 	.word	0x200004c4
 800371c:	200002a4 	.word	0x200002a4
 8003720:	20000400 	.word	0x20000400
 8003724:	20000294 	.word	0x20000294
										}
									}else if(ACCxValue < accThreshold_x){
 8003728:	4bc3      	ldr	r3, [pc, #780]	; (8003a38 <main+0x27dc>)
 800372a:	ed93 7a00 	vldr	s14, [r3]
 800372e:	4bc3      	ldr	r3, [pc, #780]	; (8003a3c <main+0x27e0>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	d512      	bpl.n	8003764 <main+0x2508>
										while(ACCxValue < accThreshold_x){
 800373e:	e006      	b.n	800374e <main+0x24f2>
											readAccelerometer();
 8003740:	f001 ff80 	bl	8005644 <readAccelerometer>
											HAL_Delay(10);
 8003744:	200a      	movs	r0, #10
 8003746:	f002 fd45 	bl	80061d4 <HAL_Delay>
											turnRightTrackReverse();
 800374a:	f001 fd95 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 800374e:	4bba      	ldr	r3, [pc, #744]	; (8003a38 <main+0x27dc>)
 8003750:	ed93 7a00 	vldr	s14, [r3]
 8003754:	4bb9      	ldr	r3, [pc, #740]	; (8003a3c <main+0x27e0>)
 8003756:	edd3 7a00 	vldr	s15, [r3]
 800375a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	d4ed      	bmi.n	8003740 <main+0x24e4>
										}
									}


									if ((bottomRightFlag == false) && (bottomLeftFlag == true) && (topRightFlag == false)) {
 8003764:	4bb6      	ldr	r3, [pc, #728]	; (8003a40 <main+0x27e4>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	f083 0301 	eor.w	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d056      	beq.n	8003820 <main+0x25c4>
 8003772:	4bb4      	ldr	r3, [pc, #720]	; (8003a44 <main+0x27e8>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d052      	beq.n	8003820 <main+0x25c4>
 800377a:	4bb3      	ldr	r3, [pc, #716]	; (8003a48 <main+0x27ec>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	f083 0301 	eor.w	r3, r3, #1
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d04b      	beq.n	8003820 <main+0x25c4>
										//REVERSE
										moveReverse();
 8003788:	f001 fd3a 	bl	8005200 <moveReverse>
										HAL_Delay(1000);
 800378c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003790:	f002 fd20 	bl	80061d4 <HAL_Delay>

										//TURN LEFT TRACK REVERSE
										turnLeftTrackReverse();
 8003794:	f001 fd8e 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(1000);
 8003798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800379c:	f002 fd1a 	bl	80061d4 <HAL_Delay>

										//STOP
										stop();
 80037a0:	f001 fd10 	bl	80051c4 <stop>
										HAL_Delay(50);
 80037a4:	2032      	movs	r0, #50	; 0x32
 80037a6:	f002 fd15 	bl	80061d4 <HAL_Delay>


										//TURN LEFT TRACK REVERSE
										turnLeftTrackReverse();
 80037aa:	f001 fd83 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(1000);
 80037ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037b2:	f002 fd0f 	bl	80061d4 <HAL_Delay>

										//STOP
										stop();
 80037b6:	f001 fd05 	bl	80051c4 <stop>
										HAL_Delay(50);
 80037ba:	2032      	movs	r0, #50	; 0x32
 80037bc:	f002 fd0a 	bl	80061d4 <HAL_Delay>

										//REVERSE
										moveReverse();
 80037c0:	f001 fd1e 	bl	8005200 <moveReverse>
										HAL_Delay(2000);
 80037c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80037c8:	f002 fd04 	bl	80061d4 <HAL_Delay>

										//STOP
										stop();
 80037cc:	f001 fcfa 	bl	80051c4 <stop>
										HAL_Delay(50);
 80037d0:	2032      	movs	r0, #50	; 0x32
 80037d2:	f002 fcff 	bl	80061d4 <HAL_Delay>

										//TURN LEFT TRACK REVERSE
										turnLeftTrackReverse();
 80037d6:	f001 fd6d 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(7000);
 80037da:	f641 3058 	movw	r0, #7000	; 0x1b58
 80037de:	f002 fcf9 	bl	80061d4 <HAL_Delay>

										//REVERSE
										moveReverse();
 80037e2:	f001 fd0d 	bl	8005200 <moveReverse>
										HAL_Delay(4500);
 80037e6:	f241 1094 	movw	r0, #4500	; 0x1194
 80037ea:	f002 fcf3 	bl	80061d4 <HAL_Delay>

										//Turn RIGHT TRACK REVERSE
										readAccelerometer();
 80037ee:	f001 ff29 	bl	8005644 <readAccelerometer>
										while(ACCxValue < accThreshold_x){
 80037f2:	e003      	b.n	80037fc <main+0x25a0>
											readAccelerometer();
 80037f4:	f001 ff26 	bl	8005644 <readAccelerometer>
											turnRightTrackReverse();
 80037f8:	f001 fd3e 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 80037fc:	4b8e      	ldr	r3, [pc, #568]	; (8003a38 <main+0x27dc>)
 80037fe:	ed93 7a00 	vldr	s14, [r3]
 8003802:	4b8e      	ldr	r3, [pc, #568]	; (8003a3c <main+0x27e0>)
 8003804:	edd3 7a00 	vldr	s15, [r3]
 8003808:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	d4f0      	bmi.n	80037f4 <main+0x2598>
										}

										//REVERSE
										moveReverse();
 8003812:	f001 fcf5 	bl	8005200 <moveReverse>
										HAL_Delay(300);
 8003816:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800381a:	f002 fcdb 	bl	80061d4 <HAL_Delay>
 800381e:	e166      	b.n	8003aee <main+0x2892>

									}else if (((bottomRightFlag == true) && (bottomLeftFlag == true) && (topLeftFlag == true))) {
 8003820:	4b87      	ldr	r3, [pc, #540]	; (8003a40 <main+0x27e4>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <main+0x25ea>
 8003828:	4b86      	ldr	r3, [pc, #536]	; (8003a44 <main+0x27e8>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <main+0x25ea>
 8003830:	4b86      	ldr	r3, [pc, #536]	; (8003a4c <main+0x27f0>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d006      	beq.n	8003846 <main+0x25ea>
										//REVERSE BACK TO BOTTOM CORNER
										moveReverse();
 8003838:	f001 fce2 	bl	8005200 <moveReverse>
										HAL_Delay(1000);
 800383c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003840:	f002 fcc8 	bl	80061d4 <HAL_Delay>
 8003844:	e153      	b.n	8003aee <main+0x2892>

									}else if ((bottomLeftFlag == false)) {
 8003846:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <main+0x27e8>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	f083 0301 	eor.w	r3, r3, #1
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8157 	beq.w	8003b04 <main+0x28a8>
			//							//REVERSE BACK TO BOTTOM CORNER
										moveReverse();
 8003856:	f001 fcd3 	bl	8005200 <moveReverse>
										HAL_Delay(1000);
 800385a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800385e:	f002 fcb9 	bl	80061d4 <HAL_Delay>

										turnRightTrackReverse();
 8003862:	f001 fd09 	bl	8005278 <turnRightTrackReverse>
										HAL_Delay(5000);
 8003866:	f241 3088 	movw	r0, #5000	; 0x1388
 800386a:	f002 fcb3 	bl	80061d4 <HAL_Delay>

										if(ACCxValue > accThreshold_x){
 800386e:	4b72      	ldr	r3, [pc, #456]	; (8003a38 <main+0x27dc>)
 8003870:	ed93 7a00 	vldr	s14, [r3]
 8003874:	4b71      	ldr	r3, [pc, #452]	; (8003a3c <main+0x27e0>)
 8003876:	edd3 7a00 	vldr	s15, [r3]
 800387a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	dc04      	bgt.n	800388e <main+0x2632>
							}


						}
			default:
				break;
 8003884:	e13e      	b.n	8003b04 <main+0x28a8>
												readAccelerometer();
 8003886:	f001 fedd 	bl	8005644 <readAccelerometer>
												turnLeftTrackReverse();
 800388a:	f001 fd13 	bl	80052b4 <turnLeftTrackReverse>
											while(ACCxValue > accThreshold_x){
 800388e:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <main+0x27dc>)
 8003890:	ed93 7a00 	vldr	s14, [r3]
 8003894:	4b69      	ldr	r3, [pc, #420]	; (8003a3c <main+0x27e0>)
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a2:	dcf0      	bgt.n	8003886 <main+0x262a>
				break;
 80038a4:	e12e      	b.n	8003b04 <main+0x28a8>
							}else if (dayNight==1) {
 80038a6:	4b6a      	ldr	r3, [pc, #424]	; (8003a50 <main+0x27f4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	f040 812a 	bne.w	8003b04 <main+0x28a8>
								if(  (sensor1 <= outsideContaminationThreshold) && (sensor2 <= outsideContaminationThreshold) && (sensor3 <= outsideContaminationThreshold) && (sensor4 <= outsideContaminationThreshold) && (sensor5 <= outsideContaminationThreshold) ){
 80038b0:	4b68      	ldr	r3, [pc, #416]	; (8003a54 <main+0x27f8>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b68      	ldr	r3, [pc, #416]	; (8003a58 <main+0x27fc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d81a      	bhi.n	80038f2 <main+0x2696>
 80038bc:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <main+0x2800>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b65      	ldr	r3, [pc, #404]	; (8003a58 <main+0x27fc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d814      	bhi.n	80038f2 <main+0x2696>
 80038c8:	4b65      	ldr	r3, [pc, #404]	; (8003a60 <main+0x2804>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b62      	ldr	r3, [pc, #392]	; (8003a58 <main+0x27fc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d80e      	bhi.n	80038f2 <main+0x2696>
 80038d4:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <main+0x2808>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b5f      	ldr	r3, [pc, #380]	; (8003a58 <main+0x27fc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d808      	bhi.n	80038f2 <main+0x2696>
 80038e0:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <main+0x280c>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b5c      	ldr	r3, [pc, #368]	; (8003a58 <main+0x27fc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d802      	bhi.n	80038f2 <main+0x2696>
									cleaningAction();
 80038ec:	f001 fef2 	bl	80056d4 <cleaningAction>
 80038f0:	e0fd      	b.n	8003aee <main+0x2892>
									readAccelerometer();
 80038f2:	f001 fea7 	bl	8005644 <readAccelerometer>
									if(ACCxValue > accThreshold_x){
 80038f6:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <main+0x27dc>)
 80038f8:	ed93 7a00 	vldr	s14, [r3]
 80038fc:	4b4f      	ldr	r3, [pc, #316]	; (8003a3c <main+0x27e0>)
 80038fe:	edd3 7a00 	vldr	s15, [r3]
 8003902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390a:	dd13      	ble.n	8003934 <main+0x26d8>
										while(ACCxValue > accThreshold_x){
 800390c:	e006      	b.n	800391c <main+0x26c0>
											readAccelerometer();
 800390e:	f001 fe99 	bl	8005644 <readAccelerometer>
											HAL_Delay(10);
 8003912:	200a      	movs	r0, #10
 8003914:	f002 fc5e 	bl	80061d4 <HAL_Delay>
											turnLeftTrackReverse();
 8003918:	f001 fccc 	bl	80052b4 <turnLeftTrackReverse>
										while(ACCxValue > accThreshold_x){
 800391c:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <main+0x27dc>)
 800391e:	ed93 7a00 	vldr	s14, [r3]
 8003922:	4b46      	ldr	r3, [pc, #280]	; (8003a3c <main+0x27e0>)
 8003924:	edd3 7a00 	vldr	s15, [r3]
 8003928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800392c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003930:	dced      	bgt.n	800390e <main+0x26b2>
 8003932:	e01d      	b.n	8003970 <main+0x2714>
									}else if(ACCxValue < accThreshold_x){
 8003934:	4b40      	ldr	r3, [pc, #256]	; (8003a38 <main+0x27dc>)
 8003936:	ed93 7a00 	vldr	s14, [r3]
 800393a:	4b40      	ldr	r3, [pc, #256]	; (8003a3c <main+0x27e0>)
 800393c:	edd3 7a00 	vldr	s15, [r3]
 8003940:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	d512      	bpl.n	8003970 <main+0x2714>
										while(ACCxValue < accThreshold_x){
 800394a:	e006      	b.n	800395a <main+0x26fe>
											readAccelerometer();
 800394c:	f001 fe7a 	bl	8005644 <readAccelerometer>
											HAL_Delay(10);
 8003950:	200a      	movs	r0, #10
 8003952:	f002 fc3f 	bl	80061d4 <HAL_Delay>
											turnRightTrackReverse();
 8003956:	f001 fc8f 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 800395a:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <main+0x27dc>)
 800395c:	ed93 7a00 	vldr	s14, [r3]
 8003960:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <main+0x27e0>)
 8003962:	edd3 7a00 	vldr	s15, [r3]
 8003966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800396a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396e:	d4ed      	bmi.n	800394c <main+0x26f0>
									if ((bottomRightFlag == false) && (bottomLeftFlag == true) && (topRightFlag == false)) {
 8003970:	4b33      	ldr	r3, [pc, #204]	; (8003a40 <main+0x27e4>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	f083 0301 	eor.w	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d076      	beq.n	8003a6c <main+0x2810>
 800397e:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <main+0x27e8>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d072      	beq.n	8003a6c <main+0x2810>
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <main+0x27ec>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	f083 0301 	eor.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d06b      	beq.n	8003a6c <main+0x2810>
										moveReverse();
 8003994:	f001 fc34 	bl	8005200 <moveReverse>
										HAL_Delay(1000);
 8003998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800399c:	f002 fc1a 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 80039a0:	f001 fc88 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(1000);
 80039a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039a8:	f002 fc14 	bl	80061d4 <HAL_Delay>
										stop();
 80039ac:	f001 fc0a 	bl	80051c4 <stop>
										HAL_Delay(50);
 80039b0:	2032      	movs	r0, #50	; 0x32
 80039b2:	f002 fc0f 	bl	80061d4 <HAL_Delay>
										moveReverse();
 80039b6:	f001 fc23 	bl	8005200 <moveReverse>
										HAL_Delay(2000);
 80039ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80039be:	f002 fc09 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 80039c2:	f001 fc77 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(1000);
 80039c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ca:	f002 fc03 	bl	80061d4 <HAL_Delay>
										stop();
 80039ce:	f001 fbf9 	bl	80051c4 <stop>
										HAL_Delay(50);
 80039d2:	2032      	movs	r0, #50	; 0x32
 80039d4:	f002 fbfe 	bl	80061d4 <HAL_Delay>
										moveReverse();
 80039d8:	f001 fc12 	bl	8005200 <moveReverse>
										HAL_Delay(2000);
 80039dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80039e0:	f002 fbf8 	bl	80061d4 <HAL_Delay>
										stop();
 80039e4:	f001 fbee 	bl	80051c4 <stop>
										HAL_Delay(50);
 80039e8:	2032      	movs	r0, #50	; 0x32
 80039ea:	f002 fbf3 	bl	80061d4 <HAL_Delay>
										turnLeftTrackReverse();
 80039ee:	f001 fc61 	bl	80052b4 <turnLeftTrackReverse>
										HAL_Delay(7000);
 80039f2:	f641 3058 	movw	r0, #7000	; 0x1b58
 80039f6:	f002 fbed 	bl	80061d4 <HAL_Delay>
										moveReverse();
 80039fa:	f001 fc01 	bl	8005200 <moveReverse>
										HAL_Delay(4500);
 80039fe:	f241 1094 	movw	r0, #4500	; 0x1194
 8003a02:	f002 fbe7 	bl	80061d4 <HAL_Delay>
										readAccelerometer();
 8003a06:	f001 fe1d 	bl	8005644 <readAccelerometer>
										while(ACCxValue < accThreshold_x){
 8003a0a:	e003      	b.n	8003a14 <main+0x27b8>
											readAccelerometer();
 8003a0c:	f001 fe1a 	bl	8005644 <readAccelerometer>
											turnRightTrackReverse();
 8003a10:	f001 fc32 	bl	8005278 <turnRightTrackReverse>
										while(ACCxValue < accThreshold_x){
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <main+0x27dc>)
 8003a16:	ed93 7a00 	vldr	s14, [r3]
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <main+0x27e0>)
 8003a1c:	edd3 7a00 	vldr	s15, [r3]
 8003a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a28:	d4f0      	bmi.n	8003a0c <main+0x27b0>
										moveReverse();
 8003a2a:	f001 fbe9 	bl	8005200 <moveReverse>
										HAL_Delay(300);
 8003a2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003a32:	f002 fbcf 	bl	80061d4 <HAL_Delay>
 8003a36:	e05a      	b.n	8003aee <main+0x2892>
 8003a38:	200006cc 	.word	0x200006cc
 8003a3c:	20000038 	.word	0x20000038
 8003a40:	20000155 	.word	0x20000155
 8003a44:	20000157 	.word	0x20000157
 8003a48:	20000156 	.word	0x20000156
 8003a4c:	20000158 	.word	0x20000158
 8003a50:	20000040 	.word	0x20000040
 8003a54:	200006f0 	.word	0x200006f0
 8003a58:	2000016c 	.word	0x2000016c
 8003a5c:	2000079c 	.word	0x2000079c
 8003a60:	200004c0 	.word	0x200004c0
 8003a64:	200006ec 	.word	0x200006ec
 8003a68:	200006dc 	.word	0x200006dc
									}else if (((bottomRightFlag == true) && (bottomLeftFlag == true) && (topLeftFlag == true))) {
 8003a6c:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <main+0x28f0>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00e      	beq.n	8003a92 <main+0x2836>
 8003a74:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <main+0x28f4>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <main+0x2836>
 8003a7c:	4b35      	ldr	r3, [pc, #212]	; (8003b54 <main+0x28f8>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d006      	beq.n	8003a92 <main+0x2836>
										moveReverse();
 8003a84:	f001 fbbc 	bl	8005200 <moveReverse>
										HAL_Delay(1000);
 8003a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a8c:	f002 fba2 	bl	80061d4 <HAL_Delay>
 8003a90:	e02d      	b.n	8003aee <main+0x2892>
									}else if ((bottomLeftFlag == false)) {
 8003a92:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <main+0x28f4>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	f083 0301 	eor.w	r3, r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d031      	beq.n	8003b04 <main+0x28a8>
									moveReverse();
 8003aa0:	f001 fbae 	bl	8005200 <moveReverse>
									HAL_Delay(1000);
 8003aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003aa8:	f002 fb94 	bl	80061d4 <HAL_Delay>
									turnRightTrackReverse();
 8003aac:	f001 fbe4 	bl	8005278 <turnRightTrackReverse>
									HAL_Delay(5000);
 8003ab0:	f241 3088 	movw	r0, #5000	; 0x1388
 8003ab4:	f002 fb8e 	bl	80061d4 <HAL_Delay>
									if(ACCxValue > accThreshold_x){
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <main+0x28fc>)
 8003aba:	ed93 7a00 	vldr	s14, [r3]
 8003abe:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <main+0x2900>)
 8003ac0:	edd3 7a00 	vldr	s15, [r3]
 8003ac4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003acc:	dc04      	bgt.n	8003ad8 <main+0x287c>
				break;
 8003ace:	e019      	b.n	8003b04 <main+0x28a8>
											readAccelerometer();
 8003ad0:	f001 fdb8 	bl	8005644 <readAccelerometer>
											turnLeftTrackReverse();
 8003ad4:	f001 fbee 	bl	80052b4 <turnLeftTrackReverse>
										while(ACCxValue > accThreshold_x){
 8003ad8:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <main+0x28fc>)
 8003ada:	ed93 7a00 	vldr	s14, [r3]
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <main+0x2900>)
 8003ae0:	edd3 7a00 	vldr	s15, [r3]
 8003ae4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aec:	dcf0      	bgt.n	8003ad0 <main+0x2874>
				break;
 8003aee:	bf00      	nop
 8003af0:	e008      	b.n	8003b04 <main+0x28a8>
		}


	  }else{
		  //TurnLED off
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2120      	movs	r1, #32
 8003af6:	481a      	ldr	r0, [pc, #104]	; (8003b60 <main+0x2904>)
 8003af8:	f003 fd8c 	bl	8007614 <HAL_GPIO_WritePin>
		  //Turn Motors Off
		  stop();
 8003afc:	f001 fb62 	bl	80051c4 <stop>
 8003b00:	f7fd bc39 	b.w	8001376 <main+0x11a>
				break;
 8003b04:	bf00      	nop
 8003b06:	f7fd bc36 	b.w	8001376 <main+0x11a>
				break;
 8003b0a:	bf00      	nop
 8003b0c:	f7fd bc33 	b.w	8001376 <main+0x11a>
				break;
 8003b10:	bf00      	nop
 8003b12:	f7fd bc30 	b.w	8001376 <main+0x11a>
				break;
 8003b16:	bf00      	nop
 8003b18:	f7fd bc2d 	b.w	8001376 <main+0x11a>
				break;
 8003b1c:	bf00      	nop
 8003b1e:	f7fd bc2a 	b.w	8001376 <main+0x11a>
				break;
 8003b22:	bf00      	nop
 8003b24:	f7fd bc27 	b.w	8001376 <main+0x11a>
				break;
 8003b28:	bf00      	nop
 8003b2a:	f7fd bc24 	b.w	8001376 <main+0x11a>
				break;
 8003b2e:	bf00      	nop
 8003b30:	f7fd bc21 	b.w	8001376 <main+0x11a>
				break;
 8003b34:	bf00      	nop
 8003b36:	f7fd bc1e 	b.w	8001376 <main+0x11a>
				break;
 8003b3a:	bf00      	nop
 8003b3c:	f7fd bc1b 	b.w	8001376 <main+0x11a>
				break;
 8003b40:	bf00      	nop
 8003b42:	f7fd bc18 	b.w	8001376 <main+0x11a>
				break;
 8003b46:	bf00      	nop
	  if(startFlag == true){
 8003b48:	f7fd bc15 	b.w	8001376 <main+0x11a>
 8003b4c:	20000155 	.word	0x20000155
 8003b50:	20000157 	.word	0x20000157
 8003b54:	20000158 	.word	0x20000158
 8003b58:	200006cc 	.word	0x200006cc
 8003b5c:	20000038 	.word	0x20000038
 8003b60:	40020000 	.word	0x40020000

08003b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b094      	sub	sp, #80	; 0x50
 8003b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	2234      	movs	r2, #52	; 0x34
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f007 fd03 	bl	800b57e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b88:	2300      	movs	r3, #0
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	4a29      	ldr	r2, [pc, #164]	; (8003c34 <SystemClock_Config+0xd0>)
 8003b8e:	4b29      	ldr	r3, [pc, #164]	; (8003c34 <SystemClock_Config+0xd0>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6413      	str	r3, [r2, #64]	; 0x40
 8003b98:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <SystemClock_Config+0xd0>)
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <SystemClock_Config+0xd4>)
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <SystemClock_Config+0xd4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <SystemClock_Config+0xd4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bc8:	2310      	movs	r3, #16
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8003bd8:	23a0      	movs	r3, #160	; 0xa0
 8003bda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003be0:	2302      	movs	r3, #2
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003be4:	2302      	movs	r3, #2
 8003be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003be8:	f107 031c 	add.w	r3, r7, #28
 8003bec:	4618      	mov	r0, r3
 8003bee:	f004 ff9d 	bl	8008b2c <HAL_RCC_OscConfig>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003bf8:	f001 fd72 	bl	80056e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bfc:	230f      	movs	r3, #15
 8003bfe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c00:	2302      	movs	r3, #2
 8003c02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003c0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c14:	f107 0308 	add.w	r3, r7, #8
 8003c18:	2105      	movs	r1, #5
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f004 fcb6 	bl	800858c <HAL_RCC_ClockConfig>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003c26:	f001 fd5b 	bl	80056e0 <Error_Handler>
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3750      	adds	r7, #80	; 0x50
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40007000 	.word	0x40007000

08003c3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003c40:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c42:	4a21      	ldr	r2, [pc, #132]	; (8003cc8 <MX_ADC1_Init+0x8c>)
 8003c44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003c46:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003c52:	4b1c      	ldr	r3, [pc, #112]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003c58:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c5e:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c66:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c6c:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c6e:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <MX_ADC1_Init+0x90>)
 8003c70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c72:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c8c:	480d      	ldr	r0, [pc, #52]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003c8e:	f002 fac3 	bl	8006218 <HAL_ADC_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8003c98:	f001 fd22 	bl	80056e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <MX_ADC1_Init+0x94>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = 1;
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <MX_ADC1_Init+0x94>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <MX_ADC1_Init+0x94>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cae:	4908      	ldr	r1, [pc, #32]	; (8003cd0 <MX_ADC1_Init+0x94>)
 8003cb0:	4804      	ldr	r0, [pc, #16]	; (8003cc4 <MX_ADC1_Init+0x88>)
 8003cb2:	f002 fc4d 	bl	8006550 <HAL_ADC_ConfigChannel>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8003cbc:	f001 fd10 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003cc0:	bf00      	nop
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	2000040c 	.word	0x2000040c
 8003cc8:	40012000 	.word	0x40012000
 8003ccc:	0f000001 	.word	0x0f000001
 8003cd0:	2000015c 	.word	0x2000015c

08003cd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <MX_I2C2_Init+0x50>)
 8003cda:	4a13      	ldr	r2, [pc, #76]	; (8003d28 <MX_I2C2_Init+0x54>)
 8003cdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003cde:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <MX_I2C2_Init+0x50>)
 8003ce0:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <MX_I2C2_Init+0x58>)
 8003ce2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <MX_I2C2_Init+0x50>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <MX_I2C2_Init+0x50>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <MX_I2C2_Init+0x50>)
 8003cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cf6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <MX_I2C2_Init+0x50>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <MX_I2C2_Init+0x50>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <MX_I2C2_Init+0x50>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <MX_I2C2_Init+0x50>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003d10:	4804      	ldr	r0, [pc, #16]	; (8003d24 <MX_I2C2_Init+0x50>)
 8003d12:	f003 fcb1 	bl	8007678 <HAL_I2C_Init>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003d1c:	f001 fce0 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200002f0 	.word	0x200002f0
 8003d28:	40005800 	.word	0x40005800
 8003d2c:	000186a0 	.word	0x000186a0

08003d30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	; 0x30
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003d36:	f107 031c 	add.w	r3, r7, #28
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	605a      	str	r2, [r3, #4]
 8003d40:	609a      	str	r2, [r3, #8]
 8003d42:	60da      	str	r2, [r3, #12]
 8003d44:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d50:	1d3b      	adds	r3, r7, #4
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d5c:	4b2f      	ldr	r3, [pc, #188]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003d5e:	4a30      	ldr	r2, [pc, #192]	; (8003e20 <MX_TIM1_Init+0xf0>)
 8003d60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8003d62:	4b2e      	ldr	r3, [pc, #184]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003d64:	224f      	movs	r2, #79	; 0x4f
 8003d66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d68:	4b2c      	ldr	r3, [pc, #176]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d7c:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d82:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d88:	4824      	ldr	r0, [pc, #144]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003d8a:	f005 f929 	bl	8008fe0 <HAL_TIM_Base_Init>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8003d94:	f001 fca4 	bl	80056e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003d98:	4820      	ldr	r0, [pc, #128]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003d9a:	f005 f9e3 	bl	8009164 <HAL_TIM_IC_Init>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003da4:	f001 fc9c 	bl	80056e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003da8:	2304      	movs	r3, #4
 8003daa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003dac:	2360      	movs	r3, #96	; 0x60
 8003dae:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003db0:	230a      	movs	r3, #10
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003db8:	f107 031c 	add.w	r3, r7, #28
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4817      	ldr	r0, [pc, #92]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003dc0:	f005 fdb1 	bl	8009926 <HAL_TIM_SlaveConfigSynchro>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003dca:	f001 fc89 	bl	80056e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003dd6:	f107 0314 	add.w	r3, r7, #20
 8003dda:	4619      	mov	r1, r3
 8003ddc:	480f      	ldr	r0, [pc, #60]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003dde:	f006 fb11 	bl	800a404 <HAL_TIMEx_MasterConfigSynchronization>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8003de8:	f001 fc7a 	bl	80056e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003dec:	230a      	movs	r3, #10
 8003dee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003df0:	2301      	movs	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	2204      	movs	r2, #4
 8003e00:	4619      	mov	r1, r3
 8003e02:	4806      	ldr	r0, [pc, #24]	; (8003e1c <MX_TIM1_Init+0xec>)
 8003e04:	f005 fb76 	bl	80094f4 <HAL_TIM_IC_ConfigChannel>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8003e0e:	f001 fc67 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003e12:	bf00      	nop
 8003e14:	3730      	adds	r7, #48	; 0x30
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000678 	.word	0x20000678
 8003e20:	40010000 	.word	0x40010000

08003e24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	; 0x28
 8003e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e2a:	f107 0318 	add.w	r3, r7, #24
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e38:	f107 0310 	add.w	r3, r7, #16
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003e42:	463b      	mov	r3, r7
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e4e:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003e50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8003e56:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003e58:	2250      	movs	r2, #80	; 0x50
 8003e5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e5c:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003e62:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e6a:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e70:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e76:	4822      	ldr	r0, [pc, #136]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003e78:	f005 f8b2 	bl	8008fe0 <HAL_TIM_Base_Init>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003e82:	f001 fc2d 	bl	80056e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e8a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e8c:	f107 0318 	add.w	r3, r7, #24
 8003e90:	4619      	mov	r1, r3
 8003e92:	481b      	ldr	r0, [pc, #108]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003e94:	f005 fc90 	bl	80097b8 <HAL_TIM_ConfigClockSource>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003e9e:	f001 fc1f 	bl	80056e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003ea2:	4817      	ldr	r0, [pc, #92]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003ea4:	f005 f95e 	bl	8009164 <HAL_TIM_IC_Init>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003eae:	f001 fc17 	bl	80056e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003eba:	f107 0310 	add.w	r3, r7, #16
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	480f      	ldr	r0, [pc, #60]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003ec2:	f006 fa9f 	bl	800a404 <HAL_TIMEx_MasterConfigSynchronization>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8003ecc:	f001 fc08 	bl	80056e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8003edc:	2305      	movs	r3, #5
 8003ede:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003ee0:	463b      	mov	r3, r7
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4806      	ldr	r0, [pc, #24]	; (8003f00 <MX_TIM2_Init+0xdc>)
 8003ee8:	f005 fb04 	bl	80094f4 <HAL_TIM_IC_ConfigChannel>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8003ef2:	f001 fbf5 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ef6:	bf00      	nop
 8003ef8:	3728      	adds	r7, #40	; 0x28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200006f4 	.word	0x200006f4

08003f04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	; 0x30
 8003f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003f0a:	f107 031c 	add.w	r3, r7, #28
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	609a      	str	r2, [r3, #8]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f1a:	f107 0314 	add.w	r3, r7, #20
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003f24:	1d3b      	adds	r3, r7, #4
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f30:	4b2d      	ldr	r3, [pc, #180]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003f32:	4a2e      	ldr	r2, [pc, #184]	; (8003fec <MX_TIM3_Init+0xe8>)
 8003f34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8003f36:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003f38:	224f      	movs	r2, #79	; 0x4f
 8003f3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003f42:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f4a:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f56:	4824      	ldr	r0, [pc, #144]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003f58:	f005 f842 	bl	8008fe0 <HAL_TIM_Base_Init>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8003f62:	f001 fbbd 	bl	80056e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003f66:	4820      	ldr	r0, [pc, #128]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003f68:	f005 f8fc 	bl	8009164 <HAL_TIM_IC_Init>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003f72:	f001 fbb5 	bl	80056e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003f76:	2304      	movs	r3, #4
 8003f78:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8003f7a:	2360      	movs	r3, #96	; 0x60
 8003f7c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003f7e:	230a      	movs	r3, #10
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003f86:	f107 031c 	add.w	r3, r7, #28
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4816      	ldr	r0, [pc, #88]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003f8e:	f005 fcca 	bl	8009926 <HAL_TIM_SlaveConfigSynchro>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003f98:	f001 fba2 	bl	80056e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fa4:	f107 0314 	add.w	r3, r7, #20
 8003fa8:	4619      	mov	r1, r3
 8003faa:	480f      	ldr	r0, [pc, #60]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003fac:	f006 fa2a 	bl	800a404 <HAL_TIMEx_MasterConfigSynchronization>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8003fb6:	f001 fb93 	bl	80056e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003fba:	230a      	movs	r3, #10
 8003fbc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	2204      	movs	r2, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4805      	ldr	r0, [pc, #20]	; (8003fe8 <MX_TIM3_Init+0xe4>)
 8003fd2:	f005 fa8f 	bl	80094f4 <HAL_TIM_IC_ConfigChannel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8003fdc:	f001 fb80 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003fe0:	bf00      	nop
 8003fe2:	3730      	adds	r7, #48	; 0x30
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	200003ac 	.word	0x200003ac
 8003fec:	40000400 	.word	0x40000400

08003ff0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	; 0x30
 8003ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003ff6:	f107 031c 	add.w	r3, r7, #28
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004006:	f107 0314 	add.w	r3, r7, #20
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004010:	1d3b      	adds	r3, r7, #4
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800401c:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <MX_TIM4_Init+0xe4>)
 800401e:	4a2e      	ldr	r2, [pc, #184]	; (80040d8 <MX_TIM4_Init+0xe8>)
 8004020:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8004022:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <MX_TIM4_Init+0xe4>)
 8004024:	224f      	movs	r2, #79	; 0x4f
 8004026:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004028:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <MX_TIM4_Init+0xe4>)
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800402e:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <MX_TIM4_Init+0xe4>)
 8004030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004034:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004036:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <MX_TIM4_Init+0xe4>)
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800403c:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <MX_TIM4_Init+0xe4>)
 800403e:	2200      	movs	r2, #0
 8004040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004042:	4824      	ldr	r0, [pc, #144]	; (80040d4 <MX_TIM4_Init+0xe4>)
 8004044:	f004 ffcc 	bl	8008fe0 <HAL_TIM_Base_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800404e:	f001 fb47 	bl	80056e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8004052:	4820      	ldr	r0, [pc, #128]	; (80040d4 <MX_TIM4_Init+0xe4>)
 8004054:	f005 f886 	bl	8009164 <HAL_TIM_IC_Init>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800405e:	f001 fb3f 	bl	80056e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004062:	2304      	movs	r3, #4
 8004064:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8004066:	2360      	movs	r3, #96	; 0x60
 8004068:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800406a:	230a      	movs	r3, #10
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8004072:	f107 031c 	add.w	r3, r7, #28
 8004076:	4619      	mov	r1, r3
 8004078:	4816      	ldr	r0, [pc, #88]	; (80040d4 <MX_TIM4_Init+0xe4>)
 800407a:	f005 fc54 	bl	8009926 <HAL_TIM_SlaveConfigSynchro>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004084:	f001 fb2c 	bl	80056e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	4619      	mov	r1, r3
 8004096:	480f      	ldr	r0, [pc, #60]	; (80040d4 <MX_TIM4_Init+0xe4>)
 8004098:	f006 f9b4 	bl	800a404 <HAL_TIMEx_MasterConfigSynchronization>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80040a2:	f001 fb1d 	bl	80056e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80040a6:	230a      	movs	r3, #10
 80040a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80040aa:	2301      	movs	r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	2204      	movs	r2, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4805      	ldr	r0, [pc, #20]	; (80040d4 <MX_TIM4_Init+0xe4>)
 80040be:	f005 fa19 	bl	80094f4 <HAL_TIM_IC_ConfigChannel>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80040c8:	f001 fb0a 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80040cc:	bf00      	nop
 80040ce:	3730      	adds	r7, #48	; 0x30
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000244 	.word	0x20000244
 80040d8:	40000800 	.word	0x40000800

080040dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	; 0x28
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040e2:	f107 0318 	add.w	r3, r7, #24
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	609a      	str	r2, [r3, #8]
 80040ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040f0:	f107 0310 	add.w	r3, r7, #16
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80040fa:	463b      	mov	r3, r7
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004106:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <MX_TIM5_Init+0xd8>)
 8004108:	4a2b      	ldr	r2, [pc, #172]	; (80041b8 <MX_TIM5_Init+0xdc>)
 800410a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 80;
 800410c:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <MX_TIM5_Init+0xd8>)
 800410e:	2250      	movs	r2, #80	; 0x50
 8004110:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004112:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <MX_TIM5_Init+0xd8>)
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004118:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <MX_TIM5_Init+0xd8>)
 800411a:	f04f 32ff 	mov.w	r2, #4294967295
 800411e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004120:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <MX_TIM5_Init+0xd8>)
 8004122:	2200      	movs	r2, #0
 8004124:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <MX_TIM5_Init+0xd8>)
 8004128:	2200      	movs	r2, #0
 800412a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800412c:	4821      	ldr	r0, [pc, #132]	; (80041b4 <MX_TIM5_Init+0xd8>)
 800412e:	f004 ff57 	bl	8008fe0 <HAL_TIM_Base_Init>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8004138:	f001 fad2 	bl	80056e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800413c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004140:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004142:	f107 0318 	add.w	r3, r7, #24
 8004146:	4619      	mov	r1, r3
 8004148:	481a      	ldr	r0, [pc, #104]	; (80041b4 <MX_TIM5_Init+0xd8>)
 800414a:	f005 fb35 	bl	80097b8 <HAL_TIM_ConfigClockSource>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004154:	f001 fac4 	bl	80056e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8004158:	4816      	ldr	r0, [pc, #88]	; (80041b4 <MX_TIM5_Init+0xd8>)
 800415a:	f005 f803 	bl	8009164 <HAL_TIM_IC_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004164:	f001 fabc 	bl	80056e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004168:	2300      	movs	r3, #0
 800416a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004170:	f107 0310 	add.w	r3, r7, #16
 8004174:	4619      	mov	r1, r3
 8004176:	480f      	ldr	r0, [pc, #60]	; (80041b4 <MX_TIM5_Init+0xd8>)
 8004178:	f006 f944 	bl	800a404 <HAL_TIMEx_MasterConfigSynchronization>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8004182:	f001 faad 	bl	80056e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004186:	2300      	movs	r3, #0
 8004188:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800418a:	2301      	movs	r3, #1
 800418c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8004192:	2305      	movs	r3, #5
 8004194:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004196:	463b      	mov	r3, r7
 8004198:	2200      	movs	r2, #0
 800419a:	4619      	mov	r1, r3
 800419c:	4805      	ldr	r0, [pc, #20]	; (80041b4 <MX_TIM5_Init+0xd8>)
 800419e:	f005 f9a9 	bl	80094f4 <HAL_TIM_IC_ConfigChannel>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 80041a8:	f001 fa9a 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80041ac:	bf00      	nop
 80041ae:	3728      	adds	r7, #40	; 0x28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000364 	.word	0x20000364
 80041b8:	40000c00 	.word	0x40000c00

080041bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08c      	sub	sp, #48	; 0x30
 80041c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80041c2:	f107 031c 	add.w	r3, r7, #28
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041d2:	f107 0314 	add.w	r3, r7, #20
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80041dc:	1d3b      	adds	r3, r7, #4
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80041e8:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <MX_TIM8_Init+0xec>)
 80041ea:	4a30      	ldr	r2, [pc, #192]	; (80042ac <MX_TIM8_Init+0xf0>)
 80041ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <MX_TIM8_Init+0xec>)
 80041f0:	224f      	movs	r2, #79	; 0x4f
 80041f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f4:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <MX_TIM8_Init+0xec>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80041fa:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <MX_TIM8_Init+0xec>)
 80041fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004200:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004202:	4b29      	ldr	r3, [pc, #164]	; (80042a8 <MX_TIM8_Init+0xec>)
 8004204:	2200      	movs	r2, #0
 8004206:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004208:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <MX_TIM8_Init+0xec>)
 800420a:	2200      	movs	r2, #0
 800420c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <MX_TIM8_Init+0xec>)
 8004210:	2200      	movs	r2, #0
 8004212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004214:	4824      	ldr	r0, [pc, #144]	; (80042a8 <MX_TIM8_Init+0xec>)
 8004216:	f004 fee3 	bl	8008fe0 <HAL_TIM_Base_Init>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8004220:	f001 fa5e 	bl	80056e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8004224:	4820      	ldr	r0, [pc, #128]	; (80042a8 <MX_TIM8_Init+0xec>)
 8004226:	f004 ff9d 	bl	8009164 <HAL_TIM_IC_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8004230:	f001 fa56 	bl	80056e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004234:	2304      	movs	r3, #4
 8004236:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8004238:	2360      	movs	r3, #96	; 0x60
 800423a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800423c:	230a      	movs	r3, #10
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8004244:	f107 031c 	add.w	r3, r7, #28
 8004248:	4619      	mov	r1, r3
 800424a:	4817      	ldr	r0, [pc, #92]	; (80042a8 <MX_TIM8_Init+0xec>)
 800424c:	f005 fb6b 	bl	8009926 <HAL_TIM_SlaveConfigSynchro>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004256:	f001 fa43 	bl	80056e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004262:	f107 0314 	add.w	r3, r7, #20
 8004266:	4619      	mov	r1, r3
 8004268:	480f      	ldr	r0, [pc, #60]	; (80042a8 <MX_TIM8_Init+0xec>)
 800426a:	f006 f8cb 	bl	800a404 <HAL_TIMEx_MasterConfigSynchronization>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8004274:	f001 fa34 	bl	80056e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004278:	230a      	movs	r3, #10
 800427a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800427c:	2301      	movs	r3, #1
 800427e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004288:	1d3b      	adds	r3, r7, #4
 800428a:	2204      	movs	r2, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4806      	ldr	r0, [pc, #24]	; (80042a8 <MX_TIM8_Init+0xec>)
 8004290:	f005 f930 	bl	80094f4 <HAL_TIM_IC_ConfigChannel>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <MX_TIM8_Init+0xe2>
  {
    Error_Handler();
 800429a:	f001 fa21 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800429e:	bf00      	nop
 80042a0:	3730      	adds	r7, #48	; 0x30
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	200001fc 	.word	0x200001fc
 80042ac:	40010400 	.word	0x40010400

080042b0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	611a      	str	r2, [r3, #16]
 80042c4:	615a      	str	r2, [r3, #20]
 80042c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80042c8:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <MX_TIM10_Init+0x94>)
 80042ca:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <MX_TIM10_Init+0x98>)
 80042cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 80-1;
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <MX_TIM10_Init+0x94>)
 80042d0:	224f      	movs	r2, #79	; 0x4f
 80042d2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d4:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <MX_TIM10_Init+0x94>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 20000-1;
 80042da:	4b1a      	ldr	r3, [pc, #104]	; (8004344 <MX_TIM10_Init+0x94>)
 80042dc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80042e0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e2:	4b18      	ldr	r3, [pc, #96]	; (8004344 <MX_TIM10_Init+0x94>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e8:	4b16      	ldr	r3, [pc, #88]	; (8004344 <MX_TIM10_Init+0x94>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80042ee:	4815      	ldr	r0, [pc, #84]	; (8004344 <MX_TIM10_Init+0x94>)
 80042f0:	f004 fe76 	bl	8008fe0 <HAL_TIM_Base_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80042fa:	f001 f9f1 	bl	80056e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80042fe:	4811      	ldr	r0, [pc, #68]	; (8004344 <MX_TIM10_Init+0x94>)
 8004300:	f004 febd 	bl	800907e <HAL_TIM_PWM_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800430a:	f001 f9e9 	bl	80056e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800430e:	2360      	movs	r3, #96	; 0x60
 8004310:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8004312:	f242 7310 	movw	r3, #10000	; 0x2710
 8004316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004320:	1d3b      	adds	r3, r7, #4
 8004322:	2200      	movs	r2, #0
 8004324:	4619      	mov	r1, r3
 8004326:	4807      	ldr	r0, [pc, #28]	; (8004344 <MX_TIM10_Init+0x94>)
 8004328:	f005 f980 	bl	800962c <HAL_TIM_PWM_ConfigChannel>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8004332:	f001 f9d5 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004336:	4803      	ldr	r0, [pc, #12]	; (8004344 <MX_TIM10_Init+0x94>)
 8004338:	f001 fc6a 	bl	8005c10 <HAL_TIM_MspPostInit>

}
 800433c:	bf00      	nop
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200002b0 	.word	0x200002b0
 8004348:	40014400 	.word	0x40014400

0800434c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
 8004360:	615a      	str	r2, [r3, #20]
 8004362:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004364:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <MX_TIM11_Init+0x94>)
 8004366:	4a1f      	ldr	r2, [pc, #124]	; (80043e4 <MX_TIM11_Init+0x98>)
 8004368:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 199;
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <MX_TIM11_Init+0x94>)
 800436c:	22c7      	movs	r2, #199	; 0xc7
 800436e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <MX_TIM11_Init+0x94>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 39999;
 8004376:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <MX_TIM11_Init+0x94>)
 8004378:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800437c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800437e:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <MX_TIM11_Init+0x94>)
 8004380:	2200      	movs	r2, #0
 8004382:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004384:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <MX_TIM11_Init+0x94>)
 8004386:	2200      	movs	r2, #0
 8004388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800438a:	4815      	ldr	r0, [pc, #84]	; (80043e0 <MX_TIM11_Init+0x94>)
 800438c:	f004 fe28 	bl	8008fe0 <HAL_TIM_Base_Init>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004396:	f001 f9a3 	bl	80056e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800439a:	4811      	ldr	r0, [pc, #68]	; (80043e0 <MX_TIM11_Init+0x94>)
 800439c:	f004 fe6f 	bl	800907e <HAL_TIM_PWM_Init>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80043a6:	f001 f99b 	bl	80056e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043aa:	2360      	movs	r3, #96	; 0x60
 80043ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	2200      	movs	r2, #0
 80043be:	4619      	mov	r1, r3
 80043c0:	4807      	ldr	r0, [pc, #28]	; (80043e0 <MX_TIM11_Init+0x94>)
 80043c2:	f005 f933 	bl	800962c <HAL_TIM_PWM_ConfigChannel>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80043cc:	f001 f988 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80043d0:	4803      	ldr	r0, [pc, #12]	; (80043e0 <MX_TIM11_Init+0x94>)
 80043d2:	f001 fc1d 	bl	8005c10 <HAL_TIM_MspPostInit>

}
 80043d6:	bf00      	nop
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	200005b8 	.word	0x200005b8
 80043e4:	40014800 	.word	0x40014800

080043e8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	611a      	str	r2, [r3, #16]
 80043fc:	615a      	str	r2, [r3, #20]
 80043fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <MX_TIM13_Init+0x94>)
 8004402:	4a1f      	ldr	r2, [pc, #124]	; (8004480 <MX_TIM13_Init+0x98>)
 8004404:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 80-1;
 8004406:	4b1d      	ldr	r3, [pc, #116]	; (800447c <MX_TIM13_Init+0x94>)
 8004408:	224f      	movs	r2, #79	; 0x4f
 800440a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <MX_TIM13_Init+0x94>)
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 20000-1;
 8004412:	4b1a      	ldr	r3, [pc, #104]	; (800447c <MX_TIM13_Init+0x94>)
 8004414:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004418:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800441a:	4b18      	ldr	r3, [pc, #96]	; (800447c <MX_TIM13_Init+0x94>)
 800441c:	2200      	movs	r2, #0
 800441e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004420:	4b16      	ldr	r3, [pc, #88]	; (800447c <MX_TIM13_Init+0x94>)
 8004422:	2200      	movs	r2, #0
 8004424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004426:	4815      	ldr	r0, [pc, #84]	; (800447c <MX_TIM13_Init+0x94>)
 8004428:	f004 fdda 	bl	8008fe0 <HAL_TIM_Base_Init>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8004432:	f001 f955 	bl	80056e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004436:	4811      	ldr	r0, [pc, #68]	; (800447c <MX_TIM13_Init+0x94>)
 8004438:	f004 fe21 	bl	800907e <HAL_TIM_PWM_Init>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8004442:	f001 f94d 	bl	80056e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004446:	2360      	movs	r3, #96	; 0x60
 8004448:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 800444a:	f242 7310 	movw	r3, #10000	; 0x2710
 800444e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004458:	1d3b      	adds	r3, r7, #4
 800445a:	2200      	movs	r2, #0
 800445c:	4619      	mov	r1, r3
 800445e:	4807      	ldr	r0, [pc, #28]	; (800447c <MX_TIM13_Init+0x94>)
 8004460:	f005 f8e4 	bl	800962c <HAL_TIM_PWM_ConfigChannel>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 800446a:	f001 f939 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800446e:	4803      	ldr	r0, [pc, #12]	; (800447c <MX_TIM13_Init+0x94>)
 8004470:	f001 fbce 	bl	8005c10 <HAL_TIM_MspPostInit>

}
 8004474:	bf00      	nop
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200004d4 	.word	0x200004d4
 8004480:	40001c00 	.word	0x40001c00

08004484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004488:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <MX_USART1_UART_Init+0x4c>)
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <MX_USART1_UART_Init+0x50>)
 800448c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <MX_USART1_UART_Init+0x4c>)
 8004490:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004496:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <MX_USART1_UART_Init+0x4c>)
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <MX_USART1_UART_Init+0x4c>)
 800449e:	2200      	movs	r2, #0
 80044a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <MX_USART1_UART_Init+0x4c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <MX_USART1_UART_Init+0x4c>)
 80044aa:	220c      	movs	r2, #12
 80044ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <MX_USART1_UART_Init+0x4c>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <MX_USART1_UART_Init+0x4c>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044ba:	4805      	ldr	r0, [pc, #20]	; (80044d0 <MX_USART1_UART_Init+0x4c>)
 80044bc:	f006 f832 	bl	800a524 <HAL_UART_Init>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044c6:	f001 f90b 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000514 	.word	0x20000514
 80044d4:	40011000 	.word	0x40011000

080044d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <MX_USART2_UART_Init+0x4c>)
 80044de:	4a12      	ldr	r2, [pc, #72]	; (8004528 <MX_USART2_UART_Init+0x50>)
 80044e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <MX_USART2_UART_Init+0x4c>)
 80044e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80044ea:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <MX_USART2_UART_Init+0x4c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80044f0:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <MX_USART2_UART_Init+0x4c>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <MX_USART2_UART_Init+0x4c>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80044fc:	4b09      	ldr	r3, [pc, #36]	; (8004524 <MX_USART2_UART_Init+0x4c>)
 80044fe:	220c      	movs	r2, #12
 8004500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <MX_USART2_UART_Init+0x4c>)
 8004504:	2200      	movs	r2, #0
 8004506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <MX_USART2_UART_Init+0x4c>)
 800450a:	2200      	movs	r2, #0
 800450c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800450e:	4805      	ldr	r0, [pc, #20]	; (8004524 <MX_USART2_UART_Init+0x4c>)
 8004510:	f006 f808 	bl	800a524 <HAL_UART_Init>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800451a:	f001 f8e1 	bl	80056e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000748 	.word	0x20000748
 8004528:	40004400 	.word	0x40004400

0800452c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <MX_DMA_Init+0x3c>)
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <MX_DMA_Init+0x3c>)
 800453a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004540:	6313      	str	r3, [r2, #48]	; 0x30
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <MX_DMA_Init+0x3c>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800454e:	2200      	movs	r2, #0
 8004550:	2100      	movs	r1, #0
 8004552:	203a      	movs	r0, #58	; 0x3a
 8004554:	f002 fb05 	bl	8006b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004558:	203a      	movs	r0, #58	; 0x3a
 800455a:	f002 fb1e 	bl	8006b9a <HAL_NVIC_EnableIRQ>

}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800

0800456c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004572:	f107 0314 	add.w	r3, r7, #20
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	605a      	str	r2, [r3, #4]
 800457c:	609a      	str	r2, [r3, #8]
 800457e:	60da      	str	r2, [r3, #12]
 8004580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	4a48      	ldr	r2, [pc, #288]	; (80046a8 <MX_GPIO_Init+0x13c>)
 8004588:	4b47      	ldr	r3, [pc, #284]	; (80046a8 <MX_GPIO_Init+0x13c>)
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	f043 0304 	orr.w	r3, r3, #4
 8004590:	6313      	str	r3, [r2, #48]	; 0x30
 8004592:	4b45      	ldr	r3, [pc, #276]	; (80046a8 <MX_GPIO_Init+0x13c>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	4a41      	ldr	r2, [pc, #260]	; (80046a8 <MX_GPIO_Init+0x13c>)
 80045a4:	4b40      	ldr	r3, [pc, #256]	; (80046a8 <MX_GPIO_Init+0x13c>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ac:	6313      	str	r3, [r2, #48]	; 0x30
 80045ae:	4b3e      	ldr	r3, [pc, #248]	; (80046a8 <MX_GPIO_Init+0x13c>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <MX_GPIO_Init+0x13c>)
 80045c0:	4b39      	ldr	r3, [pc, #228]	; (80046a8 <MX_GPIO_Init+0x13c>)
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ca:	4b37      	ldr	r3, [pc, #220]	; (80046a8 <MX_GPIO_Init+0x13c>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <MX_GPIO_Init+0x13c>)
 80045dc:	4b32      	ldr	r3, [pc, #200]	; (80046a8 <MX_GPIO_Init+0x13c>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	f043 0302 	orr.w	r3, r3, #2
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30
 80045e6:	4b30      	ldr	r3, [pc, #192]	; (80046a8 <MX_GPIO_Init+0x13c>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80045f2:	2200      	movs	r2, #0
 80045f4:	2120      	movs	r1, #32
 80045f6:	482d      	ldr	r0, [pc, #180]	; (80046ac <MX_GPIO_Init+0x140>)
 80045f8:	f003 f80c 	bl	8007614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80045fc:	2200      	movs	r2, #0
 80045fe:	f24e 0102 	movw	r1, #57346	; 0xe002
 8004602:	482b      	ldr	r0, [pc, #172]	; (80046b0 <MX_GPIO_Init+0x144>)
 8004604:	f003 f806 	bl	8007614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800460c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800460e:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <MX_GPIO_Init+0x148>)
 8004610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004616:	f107 0314 	add.w	r3, r7, #20
 800461a:	4619      	mov	r1, r3
 800461c:	4826      	ldr	r0, [pc, #152]	; (80046b8 <MX_GPIO_Init+0x14c>)
 800461e:	f002 fe67 	bl	80072f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004622:	2320      	movs	r3, #32
 8004624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004626:	2301      	movs	r3, #1
 8004628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462e:	2300      	movs	r3, #0
 8004630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004632:	f107 0314 	add.w	r3, r7, #20
 8004636:	4619      	mov	r1, r3
 8004638:	481c      	ldr	r0, [pc, #112]	; (80046ac <MX_GPIO_Init+0x140>)
 800463a:	f002 fe59 	bl	80072f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800463e:	f24e 0302 	movw	r3, #57346	; 0xe002
 8004642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004644:	2301      	movs	r3, #1
 8004646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004648:	2300      	movs	r3, #0
 800464a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464c:	2300      	movs	r3, #0
 800464e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004650:	f107 0314 	add.w	r3, r7, #20
 8004654:	4619      	mov	r1, r3
 8004656:	4816      	ldr	r0, [pc, #88]	; (80046b0 <MX_GPIO_Init+0x144>)
 8004658:	f002 fe4a 	bl	80072f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800465c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004662:	4b16      	ldr	r3, [pc, #88]	; (80046bc <MX_GPIO_Init+0x150>)
 8004664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800466a:	f107 0314 	add.w	r3, r7, #20
 800466e:	4619      	mov	r1, r3
 8004670:	4811      	ldr	r0, [pc, #68]	; (80046b8 <MX_GPIO_Init+0x14c>)
 8004672:	f002 fe3d 	bl	80072f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004676:	2310      	movs	r3, #16
 8004678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800467a:	2300      	movs	r3, #0
 800467c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004682:	f107 0314 	add.w	r3, r7, #20
 8004686:	4619      	mov	r1, r3
 8004688:	4809      	ldr	r0, [pc, #36]	; (80046b0 <MX_GPIO_Init+0x144>)
 800468a:	f002 fe31 	bl	80072f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800468e:	2200      	movs	r2, #0
 8004690:	2100      	movs	r1, #0
 8004692:	2028      	movs	r0, #40	; 0x28
 8004694:	f002 fa65 	bl	8006b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004698:	2028      	movs	r0, #40	; 0x28
 800469a:	f002 fa7e 	bl	8006b9a <HAL_NVIC_EnableIRQ>

}
 800469e:	bf00      	nop
 80046a0:	3728      	adds	r7, #40	; 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
 80046ac:	40020000 	.word	0x40020000
 80046b0:	40020400 	.word	0x40020400
 80046b4:	10210000 	.word	0x10210000
 80046b8:	40020800 	.word	0x40020800
 80046bc:	10110000 	.word	0x10110000

080046c0 <readUltrasonicDistance>:

/* USER CODE BEGIN 4 */
void readUltrasonicDistance(){
 80046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	b091      	sub	sp, #68	; 0x44
 80046c6:	af0c      	add	r7, sp, #48	; 0x30
	  if(HAL_GetTick() - delay >= 100){
 80046c8:	f001 fd78 	bl	80061bc <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b4c      	ldr	r3, [pc, #304]	; (8004800 <readUltrasonicDistance+0x140>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b63      	cmp	r3, #99	; 0x63
 80046d6:	f240 808d 	bls.w	80047f4 <readUltrasonicDistance+0x134>
		  delay = HAL_GetTick();
 80046da:	f001 fd6f 	bl	80061bc <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	4b47      	ldr	r3, [pc, #284]	; (8004800 <readUltrasonicDistance+0x140>)
 80046e2:	601a      	str	r2, [r3, #0]
		  echo1 = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 80046e4:	2104      	movs	r1, #4
 80046e6:	4847      	ldr	r0, [pc, #284]	; (8004804 <readUltrasonicDistance+0x144>)
 80046e8:	f005 f960 	bl	80099ac <HAL_TIM_ReadCapturedValue>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b46      	ldr	r3, [pc, #280]	; (8004808 <readUltrasonicDistance+0x148>)
 80046f0:	601a      	str	r2, [r3, #0]
		  echo2 = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_2);
 80046f2:	2104      	movs	r1, #4
 80046f4:	4845      	ldr	r0, [pc, #276]	; (800480c <readUltrasonicDistance+0x14c>)
 80046f6:	f005 f959 	bl	80099ac <HAL_TIM_ReadCapturedValue>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b44      	ldr	r3, [pc, #272]	; (8004810 <readUltrasonicDistance+0x150>)
 80046fe:	601a      	str	r2, [r3, #0]
		  echo3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8004700:	2104      	movs	r1, #4
 8004702:	4844      	ldr	r0, [pc, #272]	; (8004814 <readUltrasonicDistance+0x154>)
 8004704:	f005 f952 	bl	80099ac <HAL_TIM_ReadCapturedValue>
 8004708:	4602      	mov	r2, r0
 800470a:	4b43      	ldr	r3, [pc, #268]	; (8004818 <readUltrasonicDistance+0x158>)
 800470c:	601a      	str	r2, [r3, #0]
		  echo4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 800470e:	2104      	movs	r1, #4
 8004710:	4842      	ldr	r0, [pc, #264]	; (800481c <readUltrasonicDistance+0x15c>)
 8004712:	f005 f94b 	bl	80099ac <HAL_TIM_ReadCapturedValue>
 8004716:	4602      	mov	r2, r0
 8004718:	4b41      	ldr	r3, [pc, #260]	; (8004820 <readUltrasonicDistance+0x160>)
 800471a:	601a      	str	r2, [r3, #0]
//		  dis1 = echo1/58;
//		  dis2 = echo2/58;
//		  dis3 = echo3/58;
//		  dis4 = echo4/58;
		  left = echo1/58;
 800471c:	4b3a      	ldr	r3, [pc, #232]	; (8004808 <readUltrasonicDistance+0x148>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a40      	ldr	r2, [pc, #256]	; (8004824 <readUltrasonicDistance+0x164>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004730:	4b3d      	ldr	r3, [pc, #244]	; (8004828 <readUltrasonicDistance+0x168>)
 8004732:	edc3 7a00 	vstr	s15, [r3]
		  front = echo2/58;
 8004736:	4b36      	ldr	r3, [pc, #216]	; (8004810 <readUltrasonicDistance+0x150>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3a      	ldr	r2, [pc, #232]	; (8004824 <readUltrasonicDistance+0x164>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474a:	4b38      	ldr	r3, [pc, #224]	; (800482c <readUltrasonicDistance+0x16c>)
 800474c:	edc3 7a00 	vstr	s15, [r3]
		  right = echo3/58;
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <readUltrasonicDistance+0x158>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a33      	ldr	r2, [pc, #204]	; (8004824 <readUltrasonicDistance+0x164>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	ee07 3a90 	vmov	s15, r3
 8004760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004764:	4b32      	ldr	r3, [pc, #200]	; (8004830 <readUltrasonicDistance+0x170>)
 8004766:	edc3 7a00 	vstr	s15, [r3]
		  bottom = echo4/58;
 800476a:	4b2d      	ldr	r3, [pc, #180]	; (8004820 <readUltrasonicDistance+0x160>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2d      	ldr	r2, [pc, #180]	; (8004824 <readUltrasonicDistance+0x164>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477e:	4b2d      	ldr	r3, [pc, #180]	; (8004834 <readUltrasonicDistance+0x174>)
 8004780:	edc3 7a00 	vstr	s15, [r3]

		  //printf("Echo1: %u Dis1: %.2f Echo2: %u Dis2: %.2f Echo3: %u Dis3: %.2f Echo4: %u Dis4: %.2f\r\n", echo1, dis1, echo2, dis2, echo3, dis3, echo4, dis4);
		  printf("Echo1: %u left: %.2f Echo2: %u front: %.2f Echo3: %u right: %.2f Echo4: %u bottom: %.2f\r\n", echo1, left, echo2, front, echo3, right, echo4, bottom);
 8004784:	4b20      	ldr	r3, [pc, #128]	; (8004808 <readUltrasonicDistance+0x148>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	4b27      	ldr	r3, [pc, #156]	; (8004828 <readUltrasonicDistance+0x168>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7fb fefa 	bl	8000588 <__aeabi_f2d>
 8004794:	4682      	mov	sl, r0
 8004796:	468b      	mov	fp, r1
 8004798:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <readUltrasonicDistance+0x150>)
 800479a:	681e      	ldr	r6, [r3, #0]
 800479c:	4b23      	ldr	r3, [pc, #140]	; (800482c <readUltrasonicDistance+0x16c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fb fef1 	bl	8000588 <__aeabi_f2d>
 80047a6:	4604      	mov	r4, r0
 80047a8:	460d      	mov	r5, r1
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <readUltrasonicDistance+0x158>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	60ba      	str	r2, [r7, #8]
 80047b0:	4b1f      	ldr	r3, [pc, #124]	; (8004830 <readUltrasonicDistance+0x170>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fb fee7 	bl	8000588 <__aeabi_f2d>
 80047ba:	4680      	mov	r8, r0
 80047bc:	4689      	mov	r9, r1
 80047be:	4b18      	ldr	r3, [pc, #96]	; (8004820 <readUltrasonicDistance+0x160>)
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <readUltrasonicDistance+0x174>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fb fedd 	bl	8000588 <__aeabi_f2d>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	9008      	str	r0, [sp, #32]
 80047da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	9204      	str	r2, [sp, #16]
 80047e2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80047e6:	9600      	str	r6, [sp, #0]
 80047e8:	4652      	mov	r2, sl
 80047ea:	465b      	mov	r3, fp
 80047ec:	68f9      	ldr	r1, [r7, #12]
 80047ee:	4812      	ldr	r0, [pc, #72]	; (8004838 <readUltrasonicDistance+0x178>)
 80047f0:	f006 fece 	bl	800b590 <iprintf>
	  }
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fe:	bf00      	nop
 8004800:	200006c8 	.word	0x200006c8
 8004804:	20000678 	.word	0x20000678
 8004808:	2000018c 	.word	0x2000018c
 800480c:	200001fc 	.word	0x200001fc
 8004810:	20000794 	.word	0x20000794
 8004814:	200003ac 	.word	0x200003ac
 8004818:	20000408 	.word	0x20000408
 800481c:	20000244 	.word	0x20000244
 8004820:	2000045c 	.word	0x2000045c
 8004824:	8d3dcb09 	.word	0x8d3dcb09
 8004828:	200003f0 	.word	0x200003f0
 800482c:	200003f8 	.word	0x200003f8
 8004830:	20000348 	.word	0x20000348
 8004834:	200005f8 	.word	0x200005f8
 8004838:	0800c714 	.word	0x0800c714
 800483c:	00000000 	.word	0x00000000

08004840 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004844:	b0cc      	sub	sp, #304	; 0x130
 8004846:	af06      	add	r7, sp, #24
 8004848:	1d3b      	adds	r3, r7, #4
 800484a:	6018      	str	r0, [r3, #0]

//   Encoder = __HAL_TIM_GET_COUNTER(&htim2);
//  __HAL_TIM_SET_COUNTER(&htim2, 0);
//

double timer2_cnt_freqA=0;
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	f04f 0400 	mov.w	r4, #0
 8004854:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
double timer2_cnt_resA=0;
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	f04f 0400 	mov.w	r4, #0
 8004860:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
double user_signal_time_periodA;
double user_signal_freqA=0;
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	f04f 0400 	mov.w	r4, #0
 800486c:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
char usr_msg[100];

uint32_t capture_differenceB =0;
 8004870:	2300      	movs	r3, #0
 8004872:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
double timer2_cnt_freqB=0;
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	f04f 0400 	mov.w	r4, #0
 800487e:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
double timer2_cnt_resB=0;
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	f04f 0400 	mov.w	r4, #0
 800488a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
double user_signal_time_periodB =0;
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	f04f 0400 	mov.w	r4, #0
 8004896:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
double user_signal_freqB=0;
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	f04f 0400 	mov.w	r4, #0
 80048a2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
char usr_msgB[100];

if(htim->Instance == TIM2){
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b0:	d12d      	bne.n	800490e <HAL_TIM_IC_CaptureCallback+0xce>
#if 1
 if(! is_capture_doneA)
 80048b2:	4ba1      	ldr	r3, [pc, #644]	; (8004b38 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	f083 0301 	eor.w	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d026      	beq.n	800490e <HAL_TIM_IC_CaptureCallback+0xce>
 {
	 if(countA == 1)
 80048c0:	4b9e      	ldr	r3, [pc, #632]	; (8004b3c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d10b      	bne.n	80048e0 <HAL_TIM_IC_CaptureCallback+0xa0>
	 {
		 input_capturesA[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d0:	4a9b      	ldr	r2, [pc, #620]	; (8004b40 <HAL_TIM_IC_CaptureCallback+0x300>)
 80048d2:	6013      	str	r3, [r2, #0]
		 countA++;
 80048d4:	4b99      	ldr	r3, [pc, #612]	; (8004b3c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	4a98      	ldr	r2, [pc, #608]	; (8004b3c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e016      	b.n	800490e <HAL_TIM_IC_CaptureCallback+0xce>
	 }
	 else if (countA == 450)
 80048e0:	4b96      	ldr	r3, [pc, #600]	; (8004b3c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80048e8:	d10c      	bne.n	8004904 <HAL_TIM_IC_CaptureCallback+0xc4>
	 {
		 input_capturesA[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f2:	4a93      	ldr	r2, [pc, #588]	; (8004b40 <HAL_TIM_IC_CaptureCallback+0x300>)
 80048f4:	6053      	str	r3, [r2, #4]
		 countA = 1;
 80048f6:	4b91      	ldr	r3, [pc, #580]	; (8004b3c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
		 is_capture_doneA = true;
 80048fc:	4b8e      	ldr	r3, [pc, #568]	; (8004b38 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80048fe:	2201      	movs	r2, #1
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e004      	b.n	800490e <HAL_TIM_IC_CaptureCallback+0xce>
	 }else{
	 countA++;
 8004904:	4b8d      	ldr	r3, [pc, #564]	; (8004b3c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3301      	adds	r3, #1
 800490a:	4a8c      	ldr	r2, [pc, #560]	; (8004b3c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 800490c:	6013      	str	r3, [r2, #0]

 }
#endif
}

if(htim->Instance == TIM5){
 800490e:	1d3b      	adds	r3, r7, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a8b      	ldr	r2, [pc, #556]	; (8004b44 <HAL_TIM_IC_CaptureCallback+0x304>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d12d      	bne.n	8004976 <HAL_TIM_IC_CaptureCallback+0x136>
#if 1
 if(! is_capture_doneB)
 800491a:	4b8b      	ldr	r3, [pc, #556]	; (8004b48 <HAL_TIM_IC_CaptureCallback+0x308>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	f083 0301 	eor.w	r3, r3, #1
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d026      	beq.n	8004976 <HAL_TIM_IC_CaptureCallback+0x136>
 {
	 if(countB == 1)
 8004928:	4b88      	ldr	r3, [pc, #544]	; (8004b4c <HAL_TIM_IC_CaptureCallback+0x30c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10b      	bne.n	8004948 <HAL_TIM_IC_CaptureCallback+0x108>
	 {
		 input_capturesB[0] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8004930:	1d3b      	adds	r3, r7, #4
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004938:	4a85      	ldr	r2, [pc, #532]	; (8004b50 <HAL_TIM_IC_CaptureCallback+0x310>)
 800493a:	6013      	str	r3, [r2, #0]
		 countB++;
 800493c:	4b83      	ldr	r3, [pc, #524]	; (8004b4c <HAL_TIM_IC_CaptureCallback+0x30c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3301      	adds	r3, #1
 8004942:	4a82      	ldr	r2, [pc, #520]	; (8004b4c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e016      	b.n	8004976 <HAL_TIM_IC_CaptureCallback+0x136>
	 }
	 else if (countB == 450)
 8004948:	4b80      	ldr	r3, [pc, #512]	; (8004b4c <HAL_TIM_IC_CaptureCallback+0x30c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8004950:	d10c      	bne.n	800496c <HAL_TIM_IC_CaptureCallback+0x12c>
	 {
		 input_capturesB[1] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
 8004952:	1d3b      	adds	r3, r7, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495a:	4a7d      	ldr	r2, [pc, #500]	; (8004b50 <HAL_TIM_IC_CaptureCallback+0x310>)
 800495c:	6053      	str	r3, [r2, #4]
		 countB =1;
 800495e:	4b7b      	ldr	r3, [pc, #492]	; (8004b4c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8004960:	2201      	movs	r2, #1
 8004962:	601a      	str	r2, [r3, #0]
		 is_capture_doneB = true;
 8004964:	4b78      	ldr	r3, [pc, #480]	; (8004b48 <HAL_TIM_IC_CaptureCallback+0x308>)
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e004      	b.n	8004976 <HAL_TIM_IC_CaptureCallback+0x136>
	 }else{
	 countB++;
 800496c:	4b77      	ldr	r3, [pc, #476]	; (8004b4c <HAL_TIM_IC_CaptureCallback+0x30c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	4a76      	ldr	r2, [pc, #472]	; (8004b4c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8004974:	6013      	str	r3, [r2, #0]
	 }
 }
#endif
}

if(is_capture_doneA){
 8004976:	4b70      	ldr	r3, [pc, #448]	; (8004b38 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80c4 	beq.w	8004b08 <HAL_TIM_IC_CaptureCallback+0x2c8>
		  			if(input_capturesA[1] > input_capturesA[0]){
 8004980:	4b6f      	ldr	r3, [pc, #444]	; (8004b40 <HAL_TIM_IC_CaptureCallback+0x300>)
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	4b6e      	ldr	r3, [pc, #440]	; (8004b40 <HAL_TIM_IC_CaptureCallback+0x300>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d907      	bls.n	800499c <HAL_TIM_IC_CaptureCallback+0x15c>
		  				capture_differenceA = input_capturesA[1] - input_capturesA[0];
 800498c:	4b6c      	ldr	r3, [pc, #432]	; (8004b40 <HAL_TIM_IC_CaptureCallback+0x300>)
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	4b6b      	ldr	r3, [pc, #428]	; (8004b40 <HAL_TIM_IC_CaptureCallback+0x300>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	4a6f      	ldr	r2, [pc, #444]	; (8004b54 <HAL_TIM_IC_CaptureCallback+0x314>)
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e00a      	b.n	80049b2 <HAL_TIM_IC_CaptureCallback+0x172>
		  			}else{
		  				capture_differenceA = (1000000 - input_capturesA[0]) + input_capturesA[1];
 800499c:	4b68      	ldr	r3, [pc, #416]	; (8004b40 <HAL_TIM_IC_CaptureCallback+0x300>)
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	4b67      	ldr	r3, [pc, #412]	; (8004b40 <HAL_TIM_IC_CaptureCallback+0x300>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 80049aa:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80049ae:	4a69      	ldr	r2, [pc, #420]	; (8004b54 <HAL_TIM_IC_CaptureCallback+0x314>)
 80049b0:	6013      	str	r3, [r2, #0]

		  			}

		  		analyses = capture_differenceA;
 80049b2:	4b68      	ldr	r3, [pc, #416]	; (8004b54 <HAL_TIM_IC_CaptureCallback+0x314>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a68      	ldr	r2, [pc, #416]	; (8004b58 <HAL_TIM_IC_CaptureCallback+0x318>)
 80049b8:	6013      	str	r3, [r2, #0]
		  		timer2_cnt_freqA = 1;
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	4c67      	ldr	r4, [pc, #412]	; (8004b5c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80049c0:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
		  		timer2_cnt_resA = 1/timer2_cnt_freqA;
 80049c4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80049c8:	f04f 0000 	mov.w	r0, #0
 80049cc:	4963      	ldr	r1, [pc, #396]	; (8004b5c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80049ce:	f7fb ff59 	bl	8000884 <__aeabi_ddiv>
 80049d2:	4603      	mov	r3, r0
 80049d4:	460c      	mov	r4, r1
 80049d6:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
		  		user_signal_time_periodA = capture_differenceA * timer2_cnt_resA;
 80049da:	4b5e      	ldr	r3, [pc, #376]	; (8004b54 <HAL_TIM_IC_CaptureCallback+0x314>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fb fdb0 	bl	8000544 <__aeabi_ui2d>
 80049e4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80049e8:	f7fb fe22 	bl	8000630 <__aeabi_dmul>
 80049ec:	4603      	mov	r3, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0


		  		//RPMA = 60000000/user_signal_time_periodA;
		  		RPMA = (4500000/user_signal_time_periodA); //RPM = pulseCount * 60000 /time for a single revolution /pulses per turn .... THIS GIVES: 450 * 60000/time for a single revolution/6
 80049f4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80049f8:	a14d      	add	r1, pc, #308	; (adr r1, 8004b30 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80049fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049fe:	f7fb ff41 	bl	8000884 <__aeabi_ddiv>
 8004a02:	4603      	mov	r3, r0
 8004a04:	460c      	mov	r4, r1
 8004a06:	4618      	mov	r0, r3
 8004a08:	4621      	mov	r1, r4
 8004a0a:	f7fc f823 	bl	8000a54 <__aeabi_d2f>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <HAL_TIM_IC_CaptureCallback+0x320>)
 8004a12:	601a      	str	r2, [r3, #0]

		  		RPMerrorA = (float)(RPMsetPointA - RPMA);
 8004a14:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <HAL_TIM_IC_CaptureCallback+0x324>)
 8004a16:	ed93 7a00 	vldr	s14, [r3]
 8004a1a:	4b51      	ldr	r3, [pc, #324]	; (8004b60 <HAL_TIM_IC_CaptureCallback+0x320>)
 8004a1c:	edd3 7a00 	vldr	s15, [r3]
 8004a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a24:	4b50      	ldr	r3, [pc, #320]	; (8004b68 <HAL_TIM_IC_CaptureCallback+0x328>)
 8004a26:	edc3 7a00 	vstr	s15, [r3]
		  		IntegrationSumA += RPMerrorA;
 8004a2a:	4b50      	ldr	r3, [pc, #320]	; (8004b6c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8004a2c:	ed93 7a00 	vldr	s14, [r3]
 8004a30:	4b4d      	ldr	r3, [pc, #308]	; (8004b68 <HAL_TIM_IC_CaptureCallback+0x328>)
 8004a32:	edd3 7a00 	vldr	s15, [r3]
 8004a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a3a:	4b4c      	ldr	r3, [pc, #304]	; (8004b6c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8004a3c:	edc3 7a00 	vstr	s15, [r3]
		  		Ia = 0.5*KI*IntegrationSumA;
 8004a40:	4b4b      	ldr	r3, [pc, #300]	; (8004b70 <HAL_TIM_IC_CaptureCallback+0x330>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7fb fd9f 	bl	8000588 <__aeabi_f2d>
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <HAL_TIM_IC_CaptureCallback+0x334>)
 8004a50:	f7fb fdee 	bl	8000630 <__aeabi_dmul>
 8004a54:	4603      	mov	r3, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	4625      	mov	r5, r4
 8004a5a:	461c      	mov	r4, r3
 8004a5c:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fb fd91 	bl	8000588 <__aeabi_f2d>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	f7fb fddf 	bl	8000630 <__aeabi_dmul>
 8004a72:	4603      	mov	r3, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	4618      	mov	r0, r3
 8004a78:	4621      	mov	r1, r4
 8004a7a:	f7fb ffeb 	bl	8000a54 <__aeabi_d2f>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	4b3d      	ldr	r3, [pc, #244]	; (8004b78 <HAL_TIM_IC_CaptureCallback+0x338>)
 8004a82:	601a      	str	r2, [r3, #0]


		  		DutyA = KpA*RPMerrorA + Ia;
 8004a84:	4b3d      	ldr	r3, [pc, #244]	; (8004b7c <HAL_TIM_IC_CaptureCallback+0x33c>)
 8004a86:	ed93 7a00 	vldr	s14, [r3]
 8004a8a:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <HAL_TIM_IC_CaptureCallback+0x328>)
 8004a8c:	edd3 7a00 	vldr	s15, [r3]
 8004a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a94:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <HAL_TIM_IC_CaptureCallback+0x338>)
 8004a96:	edd3 7a00 	vldr	s15, [r3]
 8004a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a9e:	4b38      	ldr	r3, [pc, #224]	; (8004b80 <HAL_TIM_IC_CaptureCallback+0x340>)
 8004aa0:	edc3 7a00 	vstr	s15, [r3]

		  		widthA = htim10.Instance->CCR1 + (int)DutyA;
 8004aa4:	4b37      	ldr	r3, [pc, #220]	; (8004b84 <HAL_TIM_IC_CaptureCallback+0x344>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	4a35      	ldr	r2, [pc, #212]	; (8004b80 <HAL_TIM_IC_CaptureCallback+0x340>)
 8004aac:	edd2 7a00 	vldr	s15, [r2]
 8004ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ab4:	ee17 2a90 	vmov	r2, s15
 8004ab8:	4413      	add	r3, r2
 8004aba:	461a      	mov	r2, r3
 8004abc:	4b32      	ldr	r3, [pc, #200]	; (8004b88 <HAL_TIM_IC_CaptureCallback+0x348>)
 8004abe:	601a      	str	r2, [r3, #0]



		  		printf("RPM A = %.2f Error A = %.2f Duty A = %.2f width A = %u \r\n",RPMA, RPMerrorA, DutyA, widthA);
 8004ac0:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <HAL_TIM_IC_CaptureCallback+0x320>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fb fd5f 	bl	8000588 <__aeabi_f2d>
 8004aca:	4680      	mov	r8, r0
 8004acc:	4689      	mov	r9, r1
 8004ace:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <HAL_TIM_IC_CaptureCallback+0x328>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fb fd58 	bl	8000588 <__aeabi_f2d>
 8004ad8:	4604      	mov	r4, r0
 8004ada:	460d      	mov	r5, r1
 8004adc:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <HAL_TIM_IC_CaptureCallback+0x340>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fb fd51 	bl	8000588 <__aeabi_f2d>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4927      	ldr	r1, [pc, #156]	; (8004b88 <HAL_TIM_IC_CaptureCallback+0x348>)
 8004aec:	6809      	ldr	r1, [r1, #0]
 8004aee:	9104      	str	r1, [sp, #16]
 8004af0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004af4:	e9cd 4500 	strd	r4, r5, [sp]
 8004af8:	4642      	mov	r2, r8
 8004afa:	464b      	mov	r3, r9
 8004afc:	4823      	ldr	r0, [pc, #140]	; (8004b8c <HAL_TIM_IC_CaptureCallback+0x34c>)
 8004afe:	f006 fd47 	bl	800b590 <iprintf>

		  		is_capture_doneA = false;
 8004b02:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
}


//Motor B
if(is_capture_doneB)
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <HAL_TIM_IC_CaptureCallback+0x308>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80f0 	beq.w	8004cf2 <HAL_TIM_IC_CaptureCallback+0x4b2>
		{
		if(input_capturesB[1] > input_capturesB[0])
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <HAL_TIM_IC_CaptureCallback+0x310>)
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_TIM_IC_CaptureCallback+0x310>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d938      	bls.n	8004b90 <HAL_TIM_IC_CaptureCallback+0x350>
			capture_differenceB = input_capturesB[1] - input_capturesB[0];
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_TIM_IC_CaptureCallback+0x310>)
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_TIM_IC_CaptureCallback+0x310>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004b2c:	e03b      	b.n	8004ba6 <HAL_TIM_IC_CaptureCallback+0x366>
 8004b2e:	bf00      	nop
 8004b30:	00000000 	.word	0x00000000
 8004b34:	41512a88 	.word	0x41512a88
 8004b38:	20000140 	.word	0x20000140
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	20000138 	.word	0x20000138
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	2000014c 	.word	0x2000014c
 8004b4c:	2000000c 	.word	0x2000000c
 8004b50:	20000144 	.word	0x20000144
 8004b54:	20000150 	.word	0x20000150
 8004b58:	20000454 	.word	0x20000454
 8004b5c:	3ff00000 	.word	0x3ff00000
 8004b60:	20000740 	.word	0x20000740
 8004b64:	20000004 	.word	0x20000004
 8004b68:	20000790 	.word	0x20000790
 8004b6c:	200003a4 	.word	0x200003a4
 8004b70:	20000020 	.word	0x20000020
 8004b74:	3fe00000 	.word	0x3fe00000
 8004b78:	200001f8 	.word	0x200001f8
 8004b7c:	20000018 	.word	0x20000018
 8004b80:	2000028c 	.word	0x2000028c
 8004b84:	200002b0 	.word	0x200002b0
 8004b88:	20000008 	.word	0x20000008
 8004b8c:	0800c770 	.word	0x0800c770
		else
			capture_differenceB = (1000000 - input_capturesB[0]) + input_capturesB[1];
 8004b90:	4b63      	ldr	r3, [pc, #396]	; (8004d20 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	4b62      	ldr	r3, [pc, #392]	; (8004d20 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
 8004b9e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8004ba2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	timer2_cnt_freqB = 1;
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	4c5e      	ldr	r4, [pc, #376]	; (8004d24 <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8004bac:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
	timer2_cnt_resB = 1/timer2_cnt_freqB;
 8004bb0:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8004bb4:	f04f 0000 	mov.w	r0, #0
 8004bb8:	495a      	ldr	r1, [pc, #360]	; (8004d24 <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8004bba:	f7fb fe63 	bl	8000884 <__aeabi_ddiv>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
	user_signal_time_periodB = capture_differenceB * timer2_cnt_resB;
 8004bc6:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8004bca:	f7fb fcbb 	bl	8000544 <__aeabi_ui2d>
 8004bce:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8004bd2:	f7fb fd2d 	bl	8000630 <__aeabi_dmul>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0


	//RPMB = 60000000/user_signal_time_periodB;
	RPMB = (4500000/user_signal_time_periodB); //RPM = pulseCount * 60000 /time for a single revolution /pulses per turn .... THIS GIVES: 450 * 60000/time for a single revolution/6
 8004bde:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8004be2:	a14d      	add	r1, pc, #308	; (adr r1, 8004d18 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8004be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004be8:	f7fb fe4c 	bl	8000884 <__aeabi_ddiv>
 8004bec:	4603      	mov	r3, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	4621      	mov	r1, r4
 8004bf4:	f7fb ff2e 	bl	8000a54 <__aeabi_d2f>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b4b      	ldr	r3, [pc, #300]	; (8004d28 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8004bfc:	601a      	str	r2, [r3, #0]
	RPMerrorB = (float)(RPMsetPointB - RPMB);
 8004bfe:	4b4b      	ldr	r3, [pc, #300]	; (8004d2c <HAL_TIM_IC_CaptureCallback+0x4ec>)
 8004c00:	ed93 7a00 	vldr	s14, [r3]
 8004c04:	4b48      	ldr	r3, [pc, #288]	; (8004d28 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8004c06:	edd3 7a00 	vldr	s15, [r3]
 8004c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c0e:	4b48      	ldr	r3, [pc, #288]	; (8004d30 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 8004c10:	edc3 7a00 	vstr	s15, [r3]

	IntegrationSumB += RPMerrorB;
 8004c14:	4b47      	ldr	r3, [pc, #284]	; (8004d34 <HAL_TIM_IC_CaptureCallback+0x4f4>)
 8004c16:	ed93 7a00 	vldr	s14, [r3]
 8004c1a:	4b45      	ldr	r3, [pc, #276]	; (8004d30 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 8004c1c:	edd3 7a00 	vldr	s15, [r3]
 8004c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c24:	4b43      	ldr	r3, [pc, #268]	; (8004d34 <HAL_TIM_IC_CaptureCallback+0x4f4>)
 8004c26:	edc3 7a00 	vstr	s15, [r3]
	Ib = 0.5*KI*IntegrationSumB;
 8004c2a:	4b43      	ldr	r3, [pc, #268]	; (8004d38 <HAL_TIM_IC_CaptureCallback+0x4f8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb fcaa 	bl	8000588 <__aeabi_f2d>
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	4b40      	ldr	r3, [pc, #256]	; (8004d3c <HAL_TIM_IC_CaptureCallback+0x4fc>)
 8004c3a:	f7fb fcf9 	bl	8000630 <__aeabi_dmul>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	460c      	mov	r4, r1
 8004c42:	4625      	mov	r5, r4
 8004c44:	461c      	mov	r4, r3
 8004c46:	4b3b      	ldr	r3, [pc, #236]	; (8004d34 <HAL_TIM_IC_CaptureCallback+0x4f4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fc9c 	bl	8000588 <__aeabi_f2d>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4620      	mov	r0, r4
 8004c56:	4629      	mov	r1, r5
 8004c58:	f7fb fcea 	bl	8000630 <__aeabi_dmul>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	4618      	mov	r0, r3
 8004c62:	4621      	mov	r1, r4
 8004c64:	f7fb fef6 	bl	8000a54 <__aeabi_d2f>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <HAL_TIM_IC_CaptureCallback+0x500>)
 8004c6c:	601a      	str	r2, [r3, #0]

	DutyB = KpB*RPMerrorB +Ib;
 8004c6e:	4b35      	ldr	r3, [pc, #212]	; (8004d44 <HAL_TIM_IC_CaptureCallback+0x504>)
 8004c70:	ed93 7a00 	vldr	s14, [r3]
 8004c74:	4b2e      	ldr	r3, [pc, #184]	; (8004d30 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 8004c76:	edd3 7a00 	vldr	s15, [r3]
 8004c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c7e:	4b30      	ldr	r3, [pc, #192]	; (8004d40 <HAL_TIM_IC_CaptureCallback+0x500>)
 8004c80:	edd3 7a00 	vldr	s15, [r3]
 8004c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c88:	4b2f      	ldr	r3, [pc, #188]	; (8004d48 <HAL_TIM_IC_CaptureCallback+0x508>)
 8004c8a:	edc3 7a00 	vstr	s15, [r3]
	//midB = htim13.Instance->CCR1*(DutyB/100);
	widthB = htim13.Instance->CCR1 + (int)DutyB;
 8004c8e:	4b2f      	ldr	r3, [pc, #188]	; (8004d4c <HAL_TIM_IC_CaptureCallback+0x50c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	4a2c      	ldr	r2, [pc, #176]	; (8004d48 <HAL_TIM_IC_CaptureCallback+0x508>)
 8004c96:	edd2 7a00 	vldr	s15, [r2]
 8004c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c9e:	ee17 2a90 	vmov	r2, s15
 8004ca2:	4413      	add	r3, r2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4b2a      	ldr	r3, [pc, #168]	; (8004d50 <HAL_TIM_IC_CaptureCallback+0x510>)
 8004ca8:	601a      	str	r2, [r3, #0]



	printf("RPM B = %.2f Error B = %.2f Duty B = %.2f width B = %u \r\n",RPMB, RPMerrorB, DutyB, widthB);
 8004caa:	4b1f      	ldr	r3, [pc, #124]	; (8004d28 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fb fc6a 	bl	8000588 <__aeabi_f2d>
 8004cb4:	4680      	mov	r8, r0
 8004cb6:	4689      	mov	r9, r1
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <HAL_TIM_IC_CaptureCallback+0x4f0>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fb fc63 	bl	8000588 <__aeabi_f2d>
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	460d      	mov	r5, r1
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <HAL_TIM_IC_CaptureCallback+0x508>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fb fc5c 	bl	8000588 <__aeabi_f2d>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	491e      	ldr	r1, [pc, #120]	; (8004d50 <HAL_TIM_IC_CaptureCallback+0x510>)
 8004cd6:	6809      	ldr	r1, [r1, #0]
 8004cd8:	9104      	str	r1, [sp, #16]
 8004cda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cde:	e9cd 4500 	strd	r4, r5, [sp]
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	481b      	ldr	r0, [pc, #108]	; (8004d54 <HAL_TIM_IC_CaptureCallback+0x514>)
 8004ce8:	f006 fc52 	bl	800b590 <iprintf>

	is_capture_doneB = false;
 8004cec:	4b1a      	ldr	r3, [pc, #104]	; (8004d58 <HAL_TIM_IC_CaptureCallback+0x518>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]

		}
	//Motor A
	htim10.Instance->CCR1 = widthA;
 8004cf2:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <HAL_TIM_IC_CaptureCallback+0x51c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1a      	ldr	r2, [pc, #104]	; (8004d60 <HAL_TIM_IC_CaptureCallback+0x520>)
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	635a      	str	r2, [r3, #52]	; 0x34
	//Motor B
	htim13.Instance->CCR1 = widthB;
 8004cfc:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <HAL_TIM_IC_CaptureCallback+0x50c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <HAL_TIM_IC_CaptureCallback+0x510>)
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	635a      	str	r2, [r3, #52]	; 0x34


}
 8004d06:	bf00      	nop
 8004d08:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d12:	bf00      	nop
 8004d14:	f3af 8000 	nop.w
 8004d18:	00000000 	.word	0x00000000
 8004d1c:	41512a88 	.word	0x41512a88
 8004d20:	20000144 	.word	0x20000144
 8004d24:	3ff00000 	.word	0x3ff00000
 8004d28:	20000744 	.word	0x20000744
 8004d2c:	20000010 	.word	0x20000010
 8004d30:	20000240 	.word	0x20000240
 8004d34:	20000798 	.word	0x20000798
 8004d38:	20000020 	.word	0x20000020
 8004d3c:	3fe00000 	.word	0x3fe00000
 8004d40:	200004d0 	.word	0x200004d0
 8004d44:	2000001c 	.word	0x2000001c
 8004d48:	200006bc 	.word	0x200006bc
 8004d4c:	200004d4 	.word	0x200004d4
 8004d50:	20000014 	.word	0x20000014
 8004d54:	0800c7ac 	.word	0x0800c7ac
 8004d58:	2000014c 	.word	0x2000014c
 8004d5c:	200002b0 	.word	0x200002b0
 8004d60:	20000008 	.word	0x20000008

08004d64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
	if(startFlag==true){
 8004d6e:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_GPIO_EXTI_Callback+0x1a>
		startFlag = false;
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
	}else
		startFlag = true;
}
 8004d7c:	e002      	b.n	8004d84 <HAL_GPIO_EXTI_Callback+0x20>
		startFlag = true;
 8004d7e:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	701a      	strb	r2, [r3, #0]
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	20000154 	.word	0x20000154

08004d94 <positionScan>:


int positionScan(){
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
//		return 9;
//	}else{
//		return 0;
//	}

	if((bottom <= 12.00) && (right <= 12.00)  && (front > 12.00) && (left > 12.00)){ //BOTTOM RIGHT
 8004d98:	4bc6      	ldr	r3, [pc, #792]	; (80050b4 <positionScan+0x320>)
 8004d9a:	edd3 7a00 	vldr	s15, [r3]
 8004d9e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004daa:	d81f      	bhi.n	8004dec <positionScan+0x58>
 8004dac:	4bc2      	ldr	r3, [pc, #776]	; (80050b8 <positionScan+0x324>)
 8004dae:	edd3 7a00 	vldr	s15, [r3]
 8004db2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbe:	d815      	bhi.n	8004dec <positionScan+0x58>
 8004dc0:	4bbe      	ldr	r3, [pc, #760]	; (80050bc <positionScan+0x328>)
 8004dc2:	edd3 7a00 	vldr	s15, [r3]
 8004dc6:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd2:	dd0b      	ble.n	8004dec <positionScan+0x58>
 8004dd4:	4bba      	ldr	r3, [pc, #744]	; (80050c0 <positionScan+0x32c>)
 8004dd6:	edd3 7a00 	vldr	s15, [r3]
 8004dda:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de6:	dd01      	ble.n	8004dec <positionScan+0x58>
		return 1;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e1c0      	b.n	800516e <positionScan+0x3da>
	}else if ((front > 12.00) && (right <= 12.00)  && (bottom > 12.00) && (left > 12.00)) { //RIGHT
 8004dec:	4bb3      	ldr	r3, [pc, #716]	; (80050bc <positionScan+0x328>)
 8004dee:	edd3 7a00 	vldr	s15, [r3]
 8004df2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfe:	dd1f      	ble.n	8004e40 <positionScan+0xac>
 8004e00:	4bad      	ldr	r3, [pc, #692]	; (80050b8 <positionScan+0x324>)
 8004e02:	edd3 7a00 	vldr	s15, [r3]
 8004e06:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e12:	d815      	bhi.n	8004e40 <positionScan+0xac>
 8004e14:	4ba7      	ldr	r3, [pc, #668]	; (80050b4 <positionScan+0x320>)
 8004e16:	edd3 7a00 	vldr	s15, [r3]
 8004e1a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e26:	dd0b      	ble.n	8004e40 <positionScan+0xac>
 8004e28:	4ba5      	ldr	r3, [pc, #660]	; (80050c0 <positionScan+0x32c>)
 8004e2a:	edd3 7a00 	vldr	s15, [r3]
 8004e2e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3a:	dd01      	ble.n	8004e40 <positionScan+0xac>
		return 2;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e196      	b.n	800516e <positionScan+0x3da>
	}else if((front <= 12.00) && (right <= 12.00) && (right > 6) && (bottom > 12.00) && (left > 12.00)){	//TOP RIGHT
 8004e40:	4b9e      	ldr	r3, [pc, #632]	; (80050bc <positionScan+0x328>)
 8004e42:	edd3 7a00 	vldr	s15, [r3]
 8004e46:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e52:	d829      	bhi.n	8004ea8 <positionScan+0x114>
 8004e54:	4b98      	ldr	r3, [pc, #608]	; (80050b8 <positionScan+0x324>)
 8004e56:	edd3 7a00 	vldr	s15, [r3]
 8004e5a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e66:	d81f      	bhi.n	8004ea8 <positionScan+0x114>
 8004e68:	4b93      	ldr	r3, [pc, #588]	; (80050b8 <positionScan+0x324>)
 8004e6a:	edd3 7a00 	vldr	s15, [r3]
 8004e6e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7a:	dd15      	ble.n	8004ea8 <positionScan+0x114>
 8004e7c:	4b8d      	ldr	r3, [pc, #564]	; (80050b4 <positionScan+0x320>)
 8004e7e:	edd3 7a00 	vldr	s15, [r3]
 8004e82:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8e:	dd0b      	ble.n	8004ea8 <positionScan+0x114>
 8004e90:	4b8b      	ldr	r3, [pc, #556]	; (80050c0 <positionScan+0x32c>)
 8004e92:	edd3 7a00 	vldr	s15, [r3]
 8004e96:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea2:	dd01      	ble.n	8004ea8 <positionScan+0x114>
		return 3;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e162      	b.n	800516e <positionScan+0x3da>
	}else if ((front > 12.00) && (right > 12.00) && (bottom > 12.00) && (left > 12.00)){ //MIDDLE
 8004ea8:	4b84      	ldr	r3, [pc, #528]	; (80050bc <positionScan+0x328>)
 8004eaa:	edd3 7a00 	vldr	s15, [r3]
 8004eae:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eba:	dd1f      	ble.n	8004efc <positionScan+0x168>
 8004ebc:	4b7e      	ldr	r3, [pc, #504]	; (80050b8 <positionScan+0x324>)
 8004ebe:	edd3 7a00 	vldr	s15, [r3]
 8004ec2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ece:	dd15      	ble.n	8004efc <positionScan+0x168>
 8004ed0:	4b78      	ldr	r3, [pc, #480]	; (80050b4 <positionScan+0x320>)
 8004ed2:	edd3 7a00 	vldr	s15, [r3]
 8004ed6:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee2:	dd0b      	ble.n	8004efc <positionScan+0x168>
 8004ee4:	4b76      	ldr	r3, [pc, #472]	; (80050c0 <positionScan+0x32c>)
 8004ee6:	edd3 7a00 	vldr	s15, [r3]
 8004eea:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004eee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef6:	dd01      	ble.n	8004efc <positionScan+0x168>
		return 4;
 8004ef8:	2304      	movs	r3, #4
 8004efa:	e138      	b.n	800516e <positionScan+0x3da>
	}else if((front > 12.00) && (right > 12.00) && (bottom <= 12.00) && (left > 12.00)){	//BOTTOM
 8004efc:	4b6f      	ldr	r3, [pc, #444]	; (80050bc <positionScan+0x328>)
 8004efe:	edd3 7a00 	vldr	s15, [r3]
 8004f02:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0e:	dd1f      	ble.n	8004f50 <positionScan+0x1bc>
 8004f10:	4b69      	ldr	r3, [pc, #420]	; (80050b8 <positionScan+0x324>)
 8004f12:	edd3 7a00 	vldr	s15, [r3]
 8004f16:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f22:	dd15      	ble.n	8004f50 <positionScan+0x1bc>
 8004f24:	4b63      	ldr	r3, [pc, #396]	; (80050b4 <positionScan+0x320>)
 8004f26:	edd3 7a00 	vldr	s15, [r3]
 8004f2a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f36:	d80b      	bhi.n	8004f50 <positionScan+0x1bc>
 8004f38:	4b61      	ldr	r3, [pc, #388]	; (80050c0 <positionScan+0x32c>)
 8004f3a:	edd3 7a00 	vldr	s15, [r3]
 8004f3e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	dd01      	ble.n	8004f50 <positionScan+0x1bc>
		return 5;
 8004f4c:	2305      	movs	r3, #5
 8004f4e:	e10e      	b.n	800516e <positionScan+0x3da>
	}else if((front <= 12.00) && (right > 6.00) && (bottom > 6.00) && (left > 6.00)){ //TOP
 8004f50:	4b5a      	ldr	r3, [pc, #360]	; (80050bc <positionScan+0x328>)
 8004f52:	edd3 7a00 	vldr	s15, [r3]
 8004f56:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f62:	d81f      	bhi.n	8004fa4 <positionScan+0x210>
 8004f64:	4b54      	ldr	r3, [pc, #336]	; (80050b8 <positionScan+0x324>)
 8004f66:	edd3 7a00 	vldr	s15, [r3]
 8004f6a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f76:	dd15      	ble.n	8004fa4 <positionScan+0x210>
 8004f78:	4b4e      	ldr	r3, [pc, #312]	; (80050b4 <positionScan+0x320>)
 8004f7a:	edd3 7a00 	vldr	s15, [r3]
 8004f7e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8a:	dd0b      	ble.n	8004fa4 <positionScan+0x210>
 8004f8c:	4b4c      	ldr	r3, [pc, #304]	; (80050c0 <positionScan+0x32c>)
 8004f8e:	edd3 7a00 	vldr	s15, [r3]
 8004f92:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9e:	dd01      	ble.n	8004fa4 <positionScan+0x210>
		return 6;
 8004fa0:	2306      	movs	r3, #6
 8004fa2:	e0e4      	b.n	800516e <positionScan+0x3da>
	}else if((front >= 12.00) && (right >= 12.00) && (bottom <= 12.00) && (left <= 12.00)){ //BOTTOM LEFT
 8004fa4:	4b45      	ldr	r3, [pc, #276]	; (80050bc <positionScan+0x328>)
 8004fa6:	edd3 7a00 	vldr	s15, [r3]
 8004faa:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb6:	db1f      	blt.n	8004ff8 <positionScan+0x264>
 8004fb8:	4b3f      	ldr	r3, [pc, #252]	; (80050b8 <positionScan+0x324>)
 8004fba:	edd3 7a00 	vldr	s15, [r3]
 8004fbe:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fca:	db15      	blt.n	8004ff8 <positionScan+0x264>
 8004fcc:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <positionScan+0x320>)
 8004fce:	edd3 7a00 	vldr	s15, [r3]
 8004fd2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fde:	d80b      	bhi.n	8004ff8 <positionScan+0x264>
 8004fe0:	4b37      	ldr	r3, [pc, #220]	; (80050c0 <positionScan+0x32c>)
 8004fe2:	edd3 7a00 	vldr	s15, [r3]
 8004fe6:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8004fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff2:	d801      	bhi.n	8004ff8 <positionScan+0x264>
		return 7;
 8004ff4:	2307      	movs	r3, #7
 8004ff6:	e0ba      	b.n	800516e <positionScan+0x3da>
	}else if((front >= 12.00) && (right >= 12.00) && (bottom > 12.00) && (left <= 12.00)){ //LEFT
 8004ff8:	4b30      	ldr	r3, [pc, #192]	; (80050bc <positionScan+0x328>)
 8004ffa:	edd3 7a00 	vldr	s15, [r3]
 8004ffe:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8005002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500a:	db1f      	blt.n	800504c <positionScan+0x2b8>
 800500c:	4b2a      	ldr	r3, [pc, #168]	; (80050b8 <positionScan+0x324>)
 800500e:	edd3 7a00 	vldr	s15, [r3]
 8005012:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8005016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800501a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501e:	db15      	blt.n	800504c <positionScan+0x2b8>
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <positionScan+0x320>)
 8005022:	edd3 7a00 	vldr	s15, [r3]
 8005026:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800502a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800502e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005032:	dd0b      	ble.n	800504c <positionScan+0x2b8>
 8005034:	4b22      	ldr	r3, [pc, #136]	; (80050c0 <positionScan+0x32c>)
 8005036:	edd3 7a00 	vldr	s15, [r3]
 800503a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800503e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005046:	d801      	bhi.n	800504c <positionScan+0x2b8>
		return 8;
 8005048:	2308      	movs	r3, #8
 800504a:	e090      	b.n	800516e <positionScan+0x3da>
	}else if((front <= 12.00) && (right > 12.00) && (bottom > 12.00) && (left <= 12.00) && (left > 6.00)){	//TOP LEFT
 800504c:	4b1b      	ldr	r3, [pc, #108]	; (80050bc <positionScan+0x328>)
 800504e:	edd3 7a00 	vldr	s15, [r3]
 8005052:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8005056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505e:	d831      	bhi.n	80050c4 <positionScan+0x330>
 8005060:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <positionScan+0x324>)
 8005062:	edd3 7a00 	vldr	s15, [r3]
 8005066:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800506a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	dd27      	ble.n	80050c4 <positionScan+0x330>
 8005074:	4b0f      	ldr	r3, [pc, #60]	; (80050b4 <positionScan+0x320>)
 8005076:	edd3 7a00 	vldr	s15, [r3]
 800507a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800507e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005086:	dd1d      	ble.n	80050c4 <positionScan+0x330>
 8005088:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <positionScan+0x32c>)
 800508a:	edd3 7a00 	vldr	s15, [r3]
 800508e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8005092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	d813      	bhi.n	80050c4 <positionScan+0x330>
 800509c:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <positionScan+0x32c>)
 800509e:	edd3 7a00 	vldr	s15, [r3]
 80050a2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80050a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	dd09      	ble.n	80050c4 <positionScan+0x330>
		return 9;
 80050b0:	2309      	movs	r3, #9
 80050b2:	e05c      	b.n	800516e <positionScan+0x3da>
 80050b4:	200005f8 	.word	0x200005f8
 80050b8:	20000348 	.word	0x20000348
 80050bc:	200003f8 	.word	0x200003f8
 80050c0:	200003f0 	.word	0x200003f0
	}else if((front <= 12.00) && (right <= 6.00) && (bottom > 12.00) && (left > 12.00)){	//CLOSE TOP RIGHT
 80050c4:	4b2c      	ldr	r3, [pc, #176]	; (8005178 <positionScan+0x3e4>)
 80050c6:	edd3 7a00 	vldr	s15, [r3]
 80050ca:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80050ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d6:	d81f      	bhi.n	8005118 <positionScan+0x384>
 80050d8:	4b28      	ldr	r3, [pc, #160]	; (800517c <positionScan+0x3e8>)
 80050da:	edd3 7a00 	vldr	s15, [r3]
 80050de:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80050e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ea:	d815      	bhi.n	8005118 <positionScan+0x384>
 80050ec:	4b24      	ldr	r3, [pc, #144]	; (8005180 <positionScan+0x3ec>)
 80050ee:	edd3 7a00 	vldr	s15, [r3]
 80050f2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80050f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fe:	dd0b      	ble.n	8005118 <positionScan+0x384>
 8005100:	4b20      	ldr	r3, [pc, #128]	; (8005184 <positionScan+0x3f0>)
 8005102:	edd3 7a00 	vldr	s15, [r3]
 8005106:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800510a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005112:	dd01      	ble.n	8005118 <positionScan+0x384>
		return 10;
 8005114:	230a      	movs	r3, #10
 8005116:	e02a      	b.n	800516e <positionScan+0x3da>
	}else if((front <= 12.00) && (right > 12.00) && (bottom > 12.00) && (left <= 6.00)){	//CLOSE TOP LEFT
 8005118:	4b17      	ldr	r3, [pc, #92]	; (8005178 <positionScan+0x3e4>)
 800511a:	edd3 7a00 	vldr	s15, [r3]
 800511e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8005122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512a:	d81f      	bhi.n	800516c <positionScan+0x3d8>
 800512c:	4b13      	ldr	r3, [pc, #76]	; (800517c <positionScan+0x3e8>)
 800512e:	edd3 7a00 	vldr	s15, [r3]
 8005132:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8005136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513e:	dd15      	ble.n	800516c <positionScan+0x3d8>
 8005140:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <positionScan+0x3ec>)
 8005142:	edd3 7a00 	vldr	s15, [r3]
 8005146:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800514a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800514e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005152:	dd0b      	ble.n	800516c <positionScan+0x3d8>
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <positionScan+0x3f0>)
 8005156:	edd3 7a00 	vldr	s15, [r3]
 800515a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800515e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005166:	d801      	bhi.n	800516c <positionScan+0x3d8>
		return 11;
 8005168:	230b      	movs	r3, #11
 800516a:	e000      	b.n	800516e <positionScan+0x3da>
//	}else if((front <= 12.00) && (right > 12.00) && (bottom > 12.00) && (left <= 20.00) && (left > 12.00 )){	//MEDIUM TOP LEFT
//		return 12;
	}else{
		return 0;
 800516c:	2300      	movs	r3, #0
	}
}
 800516e:	4618      	mov	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	200003f8 	.word	0x200003f8
 800517c:	20000348 	.word	0x20000348
 8005180:	200005f8 	.word	0x200005f8
 8005184:	200003f0 	.word	0x200003f0

08005188 <moveForward>:

void moveForward(){
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
	  //motor A
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800518c:	2201      	movs	r2, #1
 800518e:	2102      	movs	r1, #2
 8005190:	480b      	ldr	r0, [pc, #44]	; (80051c0 <moveForward+0x38>)
 8005192:	f002 fa3f 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8005196:	2200      	movs	r2, #0
 8005198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800519c:	4808      	ldr	r0, [pc, #32]	; (80051c0 <moveForward+0x38>)
 800519e:	f002 fa39 	bl	8007614 <HAL_GPIO_WritePin>
	  //motor B
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80051a2:	2201      	movs	r2, #1
 80051a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051a8:	4805      	ldr	r0, [pc, #20]	; (80051c0 <moveForward+0x38>)
 80051aa:	f002 fa33 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80051ae:	2200      	movs	r2, #0
 80051b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051b4:	4802      	ldr	r0, [pc, #8]	; (80051c0 <moveForward+0x38>)
 80051b6:	f002 fa2d 	bl	8007614 <HAL_GPIO_WritePin>
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40020400 	.word	0x40020400

080051c4 <stop>:

void stop(){
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
	  //motor A
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80051c8:	2200      	movs	r2, #0
 80051ca:	2102      	movs	r1, #2
 80051cc:	480b      	ldr	r0, [pc, #44]	; (80051fc <stop+0x38>)
 80051ce:	f002 fa21 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80051d2:	2200      	movs	r2, #0
 80051d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051d8:	4808      	ldr	r0, [pc, #32]	; (80051fc <stop+0x38>)
 80051da:	f002 fa1b 	bl	8007614 <HAL_GPIO_WritePin>
	  //motor B
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80051de:	2200      	movs	r2, #0
 80051e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051e4:	4805      	ldr	r0, [pc, #20]	; (80051fc <stop+0x38>)
 80051e6:	f002 fa15 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80051ea:	2200      	movs	r2, #0
 80051ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051f0:	4802      	ldr	r0, [pc, #8]	; (80051fc <stop+0x38>)
 80051f2:	f002 fa0f 	bl	8007614 <HAL_GPIO_WritePin>

}
 80051f6:	bf00      	nop
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40020400 	.word	0x40020400

08005200 <moveReverse>:

void moveReverse(){
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
	  //motor A
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8005204:	2200      	movs	r2, #0
 8005206:	2102      	movs	r1, #2
 8005208:	480b      	ldr	r0, [pc, #44]	; (8005238 <moveReverse+0x38>)
 800520a:	f002 fa03 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800520e:	2201      	movs	r2, #1
 8005210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005214:	4808      	ldr	r0, [pc, #32]	; (8005238 <moveReverse+0x38>)
 8005216:	f002 f9fd 	bl	8007614 <HAL_GPIO_WritePin>
	  //motor B
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800521a:	2200      	movs	r2, #0
 800521c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005220:	4805      	ldr	r0, [pc, #20]	; (8005238 <moveReverse+0x38>)
 8005222:	f002 f9f7 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8005226:	2201      	movs	r2, #1
 8005228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800522c:	4802      	ldr	r0, [pc, #8]	; (8005238 <moveReverse+0x38>)
 800522e:	f002 f9f1 	bl	8007614 <HAL_GPIO_WritePin>
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40020400 	.word	0x40020400

0800523c <turnRightTrack>:

void turnRightTrack(){
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
	  //motor A (Left Track)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8005240:	2201      	movs	r2, #1
 8005242:	2102      	movs	r1, #2
 8005244:	480b      	ldr	r0, [pc, #44]	; (8005274 <turnRightTrack+0x38>)
 8005246:	f002 f9e5 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800524a:	2200      	movs	r2, #0
 800524c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005250:	4808      	ldr	r0, [pc, #32]	; (8005274 <turnRightTrack+0x38>)
 8005252:	f002 f9df 	bl	8007614 <HAL_GPIO_WritePin>
	  //motor B (Right Track)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8005256:	2200      	movs	r2, #0
 8005258:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800525c:	4805      	ldr	r0, [pc, #20]	; (8005274 <turnRightTrack+0x38>)
 800525e:	f002 f9d9 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8005262:	2200      	movs	r2, #0
 8005264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005268:	4802      	ldr	r0, [pc, #8]	; (8005274 <turnRightTrack+0x38>)
 800526a:	f002 f9d3 	bl	8007614 <HAL_GPIO_WritePin>
}
 800526e:	bf00      	nop
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40020400 	.word	0x40020400

08005278 <turnRightTrackReverse>:
	  //motor B (Right Track)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
}

void turnRightTrackReverse(){
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
	  //motor A (Left Track)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800527c:	2200      	movs	r2, #0
 800527e:	2102      	movs	r1, #2
 8005280:	480b      	ldr	r0, [pc, #44]	; (80052b0 <turnRightTrackReverse+0x38>)
 8005282:	f002 f9c7 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8005286:	2201      	movs	r2, #1
 8005288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800528c:	4808      	ldr	r0, [pc, #32]	; (80052b0 <turnRightTrackReverse+0x38>)
 800528e:	f002 f9c1 	bl	8007614 <HAL_GPIO_WritePin>
	  //motor B (Right Track)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8005292:	2200      	movs	r2, #0
 8005294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005298:	4805      	ldr	r0, [pc, #20]	; (80052b0 <turnRightTrackReverse+0x38>)
 800529a:	f002 f9bb 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800529e:	2200      	movs	r2, #0
 80052a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052a4:	4802      	ldr	r0, [pc, #8]	; (80052b0 <turnRightTrackReverse+0x38>)
 80052a6:	f002 f9b5 	bl	8007614 <HAL_GPIO_WritePin>
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40020400 	.word	0x40020400

080052b4 <turnLeftTrackReverse>:

void turnLeftTrackReverse(){
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
	  //motor A (Left Track)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80052b8:	2200      	movs	r2, #0
 80052ba:	2102      	movs	r1, #2
 80052bc:	480b      	ldr	r0, [pc, #44]	; (80052ec <turnLeftTrackReverse+0x38>)
 80052be:	f002 f9a9 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80052c2:	2200      	movs	r2, #0
 80052c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052c8:	4808      	ldr	r0, [pc, #32]	; (80052ec <turnLeftTrackReverse+0x38>)
 80052ca:	f002 f9a3 	bl	8007614 <HAL_GPIO_WritePin>
	  //motor B (Right Track)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80052ce:	2200      	movs	r2, #0
 80052d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052d4:	4805      	ldr	r0, [pc, #20]	; (80052ec <turnLeftTrackReverse+0x38>)
 80052d6:	f002 f99d 	bl	8007614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80052da:	2201      	movs	r2, #1
 80052dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052e0:	4802      	ldr	r0, [pc, #8]	; (80052ec <turnLeftTrackReverse+0x38>)
 80052e2:	f002 f997 	bl	8007614 <HAL_GPIO_WritePin>
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40020400 	.word	0x40020400

080052f0 <UARTposition>:

void UARTposition(int currentPosition){
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
//Transmit Position over UART
	if(currentPosition == 1){
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10f      	bne.n	800531e <UARTposition+0x2e>
		//Bottom Right
		sprintf((char*)uartBuf, "P%u\r\n", currentPosition);
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	4970      	ldr	r1, [pc, #448]	; (80054c4 <UARTposition+0x1d4>)
 8005302:	4871      	ldr	r0, [pc, #452]	; (80054c8 <UARTposition+0x1d8>)
 8005304:	f006 f95c 	bl	800b5c0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8005308:	486f      	ldr	r0, [pc, #444]	; (80054c8 <UARTposition+0x1d8>)
 800530a:	f7fa ff81 	bl	8000210 <strlen>
 800530e:	4603      	mov	r3, r0
 8005310:	b29a      	uxth	r2, r3
 8005312:	2364      	movs	r3, #100	; 0x64
 8005314:	496c      	ldr	r1, [pc, #432]	; (80054c8 <UARTposition+0x1d8>)
 8005316:	486d      	ldr	r0, [pc, #436]	; (80054cc <UARTposition+0x1dc>)
 8005318:	f005 f951 	bl	800a5be <HAL_UART_Transmit>
		//Position Estimation Error
		sprintf((char*)uartBuf, "PEE %u\r\n", currentPosition);
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
	}

}
 800531c:	e0ce      	b.n	80054bc <UARTposition+0x1cc>
	}else if (currentPosition == 2) {
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d10f      	bne.n	8005344 <UARTposition+0x54>
		sprintf((char*)uartBuf, "P%u\r\n", currentPosition);
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	4967      	ldr	r1, [pc, #412]	; (80054c4 <UARTposition+0x1d4>)
 8005328:	4867      	ldr	r0, [pc, #412]	; (80054c8 <UARTposition+0x1d8>)
 800532a:	f006 f949 	bl	800b5c0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 800532e:	4866      	ldr	r0, [pc, #408]	; (80054c8 <UARTposition+0x1d8>)
 8005330:	f7fa ff6e 	bl	8000210 <strlen>
 8005334:	4603      	mov	r3, r0
 8005336:	b29a      	uxth	r2, r3
 8005338:	2364      	movs	r3, #100	; 0x64
 800533a:	4963      	ldr	r1, [pc, #396]	; (80054c8 <UARTposition+0x1d8>)
 800533c:	4863      	ldr	r0, [pc, #396]	; (80054cc <UARTposition+0x1dc>)
 800533e:	f005 f93e 	bl	800a5be <HAL_UART_Transmit>
}
 8005342:	e0bb      	b.n	80054bc <UARTposition+0x1cc>
	}else if (currentPosition == 3) {
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d10f      	bne.n	800536a <UARTposition+0x7a>
		sprintf((char*)uartBuf, "P%u\r\n", currentPosition);
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	495d      	ldr	r1, [pc, #372]	; (80054c4 <UARTposition+0x1d4>)
 800534e:	485e      	ldr	r0, [pc, #376]	; (80054c8 <UARTposition+0x1d8>)
 8005350:	f006 f936 	bl	800b5c0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8005354:	485c      	ldr	r0, [pc, #368]	; (80054c8 <UARTposition+0x1d8>)
 8005356:	f7fa ff5b 	bl	8000210 <strlen>
 800535a:	4603      	mov	r3, r0
 800535c:	b29a      	uxth	r2, r3
 800535e:	2364      	movs	r3, #100	; 0x64
 8005360:	4959      	ldr	r1, [pc, #356]	; (80054c8 <UARTposition+0x1d8>)
 8005362:	485a      	ldr	r0, [pc, #360]	; (80054cc <UARTposition+0x1dc>)
 8005364:	f005 f92b 	bl	800a5be <HAL_UART_Transmit>
}
 8005368:	e0a8      	b.n	80054bc <UARTposition+0x1cc>
	}else if (currentPosition == 4) {
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b04      	cmp	r3, #4
 800536e:	d10f      	bne.n	8005390 <UARTposition+0xa0>
		sprintf((char*)uartBuf, "P%u\r\n", currentPosition);
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	4954      	ldr	r1, [pc, #336]	; (80054c4 <UARTposition+0x1d4>)
 8005374:	4854      	ldr	r0, [pc, #336]	; (80054c8 <UARTposition+0x1d8>)
 8005376:	f006 f923 	bl	800b5c0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 800537a:	4853      	ldr	r0, [pc, #332]	; (80054c8 <UARTposition+0x1d8>)
 800537c:	f7fa ff48 	bl	8000210 <strlen>
 8005380:	4603      	mov	r3, r0
 8005382:	b29a      	uxth	r2, r3
 8005384:	2364      	movs	r3, #100	; 0x64
 8005386:	4950      	ldr	r1, [pc, #320]	; (80054c8 <UARTposition+0x1d8>)
 8005388:	4850      	ldr	r0, [pc, #320]	; (80054cc <UARTposition+0x1dc>)
 800538a:	f005 f918 	bl	800a5be <HAL_UART_Transmit>
}
 800538e:	e095      	b.n	80054bc <UARTposition+0x1cc>
	}else if (currentPosition == 5) {
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b05      	cmp	r3, #5
 8005394:	d10f      	bne.n	80053b6 <UARTposition+0xc6>
		sprintf((char*)uartBuf, "P%u\r\n", currentPosition);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	494a      	ldr	r1, [pc, #296]	; (80054c4 <UARTposition+0x1d4>)
 800539a:	484b      	ldr	r0, [pc, #300]	; (80054c8 <UARTposition+0x1d8>)
 800539c:	f006 f910 	bl	800b5c0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 80053a0:	4849      	ldr	r0, [pc, #292]	; (80054c8 <UARTposition+0x1d8>)
 80053a2:	f7fa ff35 	bl	8000210 <strlen>
 80053a6:	4603      	mov	r3, r0
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	2364      	movs	r3, #100	; 0x64
 80053ac:	4946      	ldr	r1, [pc, #280]	; (80054c8 <UARTposition+0x1d8>)
 80053ae:	4847      	ldr	r0, [pc, #284]	; (80054cc <UARTposition+0x1dc>)
 80053b0:	f005 f905 	bl	800a5be <HAL_UART_Transmit>
}
 80053b4:	e082      	b.n	80054bc <UARTposition+0x1cc>
	}else if (currentPosition == 6) {
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b06      	cmp	r3, #6
 80053ba:	d10f      	bne.n	80053dc <UARTposition+0xec>
		sprintf((char*)uartBuf, "P%u\r\n", currentPosition);
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	4941      	ldr	r1, [pc, #260]	; (80054c4 <UARTposition+0x1d4>)
 80053c0:	4841      	ldr	r0, [pc, #260]	; (80054c8 <UARTposition+0x1d8>)
 80053c2:	f006 f8fd 	bl	800b5c0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 80053c6:	4840      	ldr	r0, [pc, #256]	; (80054c8 <UARTposition+0x1d8>)
 80053c8:	f7fa ff22 	bl	8000210 <strlen>
 80053cc:	4603      	mov	r3, r0
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	2364      	movs	r3, #100	; 0x64
 80053d2:	493d      	ldr	r1, [pc, #244]	; (80054c8 <UARTposition+0x1d8>)
 80053d4:	483d      	ldr	r0, [pc, #244]	; (80054cc <UARTposition+0x1dc>)
 80053d6:	f005 f8f2 	bl	800a5be <HAL_UART_Transmit>
}
 80053da:	e06f      	b.n	80054bc <UARTposition+0x1cc>
	}else if (currentPosition == 7) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b07      	cmp	r3, #7
 80053e0:	d10f      	bne.n	8005402 <UARTposition+0x112>
		sprintf((char*)uartBuf, "P%u\r\n", currentPosition);
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4937      	ldr	r1, [pc, #220]	; (80054c4 <UARTposition+0x1d4>)
 80053e6:	4838      	ldr	r0, [pc, #224]	; (80054c8 <UARTposition+0x1d8>)
 80053e8:	f006 f8ea 	bl	800b5c0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 80053ec:	4836      	ldr	r0, [pc, #216]	; (80054c8 <UARTposition+0x1d8>)
 80053ee:	f7fa ff0f 	bl	8000210 <strlen>
 80053f2:	4603      	mov	r3, r0
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	2364      	movs	r3, #100	; 0x64
 80053f8:	4933      	ldr	r1, [pc, #204]	; (80054c8 <UARTposition+0x1d8>)
 80053fa:	4834      	ldr	r0, [pc, #208]	; (80054cc <UARTposition+0x1dc>)
 80053fc:	f005 f8df 	bl	800a5be <HAL_UART_Transmit>
}
 8005400:	e05c      	b.n	80054bc <UARTposition+0x1cc>
	}else if (currentPosition == 8) {
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b08      	cmp	r3, #8
 8005406:	d10f      	bne.n	8005428 <UARTposition+0x138>
		sprintf((char*)uartBuf, "P%u\r\n", currentPosition);
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	492e      	ldr	r1, [pc, #184]	; (80054c4 <UARTposition+0x1d4>)
 800540c:	482e      	ldr	r0, [pc, #184]	; (80054c8 <UARTposition+0x1d8>)
 800540e:	f006 f8d7 	bl	800b5c0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8005412:	482d      	ldr	r0, [pc, #180]	; (80054c8 <UARTposition+0x1d8>)
 8005414:	f7fa fefc 	bl	8000210 <strlen>
 8005418:	4603      	mov	r3, r0
 800541a:	b29a      	uxth	r2, r3
 800541c:	2364      	movs	r3, #100	; 0x64
 800541e:	492a      	ldr	r1, [pc, #168]	; (80054c8 <UARTposition+0x1d8>)
 8005420:	482a      	ldr	r0, [pc, #168]	; (80054cc <UARTposition+0x1dc>)
 8005422:	f005 f8cc 	bl	800a5be <HAL_UART_Transmit>
}
 8005426:	e049      	b.n	80054bc <UARTposition+0x1cc>
	}else if (currentPosition == 9) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b09      	cmp	r3, #9
 800542c:	d10f      	bne.n	800544e <UARTposition+0x15e>
		sprintf((char*)uartBuf, "P%u\r\n", currentPosition);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4924      	ldr	r1, [pc, #144]	; (80054c4 <UARTposition+0x1d4>)
 8005432:	4825      	ldr	r0, [pc, #148]	; (80054c8 <UARTposition+0x1d8>)
 8005434:	f006 f8c4 	bl	800b5c0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8005438:	4823      	ldr	r0, [pc, #140]	; (80054c8 <UARTposition+0x1d8>)
 800543a:	f7fa fee9 	bl	8000210 <strlen>
 800543e:	4603      	mov	r3, r0
 8005440:	b29a      	uxth	r2, r3
 8005442:	2364      	movs	r3, #100	; 0x64
 8005444:	4920      	ldr	r1, [pc, #128]	; (80054c8 <UARTposition+0x1d8>)
 8005446:	4821      	ldr	r0, [pc, #132]	; (80054cc <UARTposition+0x1dc>)
 8005448:	f005 f8b9 	bl	800a5be <HAL_UART_Transmit>
}
 800544c:	e036      	b.n	80054bc <UARTposition+0x1cc>
	}else if (currentPosition == 10) {
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b0a      	cmp	r3, #10
 8005452:	d110      	bne.n	8005476 <UARTposition+0x186>
		sprintf((char*)uartBuf, "P3\r\n");
 8005454:	4b1c      	ldr	r3, [pc, #112]	; (80054c8 <UARTposition+0x1d8>)
 8005456:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <UARTposition+0x1e0>)
 8005458:	6810      	ldr	r0, [r2, #0]
 800545a:	6018      	str	r0, [r3, #0]
 800545c:	7912      	ldrb	r2, [r2, #4]
 800545e:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8005460:	4819      	ldr	r0, [pc, #100]	; (80054c8 <UARTposition+0x1d8>)
 8005462:	f7fa fed5 	bl	8000210 <strlen>
 8005466:	4603      	mov	r3, r0
 8005468:	b29a      	uxth	r2, r3
 800546a:	2364      	movs	r3, #100	; 0x64
 800546c:	4916      	ldr	r1, [pc, #88]	; (80054c8 <UARTposition+0x1d8>)
 800546e:	4817      	ldr	r0, [pc, #92]	; (80054cc <UARTposition+0x1dc>)
 8005470:	f005 f8a5 	bl	800a5be <HAL_UART_Transmit>
}
 8005474:	e022      	b.n	80054bc <UARTposition+0x1cc>
	}else if (currentPosition == 11) {
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b0b      	cmp	r3, #11
 800547a:	d110      	bne.n	800549e <UARTposition+0x1ae>
		sprintf((char*)uartBuf, "P7\r\n");
 800547c:	4b12      	ldr	r3, [pc, #72]	; (80054c8 <UARTposition+0x1d8>)
 800547e:	4a15      	ldr	r2, [pc, #84]	; (80054d4 <UARTposition+0x1e4>)
 8005480:	6810      	ldr	r0, [r2, #0]
 8005482:	6018      	str	r0, [r3, #0]
 8005484:	7912      	ldrb	r2, [r2, #4]
 8005486:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 8005488:	480f      	ldr	r0, [pc, #60]	; (80054c8 <UARTposition+0x1d8>)
 800548a:	f7fa fec1 	bl	8000210 <strlen>
 800548e:	4603      	mov	r3, r0
 8005490:	b29a      	uxth	r2, r3
 8005492:	2364      	movs	r3, #100	; 0x64
 8005494:	490c      	ldr	r1, [pc, #48]	; (80054c8 <UARTposition+0x1d8>)
 8005496:	480d      	ldr	r0, [pc, #52]	; (80054cc <UARTposition+0x1dc>)
 8005498:	f005 f891 	bl	800a5be <HAL_UART_Transmit>
}
 800549c:	e00e      	b.n	80054bc <UARTposition+0x1cc>
		sprintf((char*)uartBuf, "PEE %u\r\n", currentPosition);
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	490d      	ldr	r1, [pc, #52]	; (80054d8 <UARTposition+0x1e8>)
 80054a2:	4809      	ldr	r0, [pc, #36]	; (80054c8 <UARTposition+0x1d8>)
 80054a4:	f006 f88c 	bl	800b5c0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 80054a8:	4807      	ldr	r0, [pc, #28]	; (80054c8 <UARTposition+0x1d8>)
 80054aa:	f7fa feb1 	bl	8000210 <strlen>
 80054ae:	4603      	mov	r3, r0
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	2364      	movs	r3, #100	; 0x64
 80054b4:	4904      	ldr	r1, [pc, #16]	; (80054c8 <UARTposition+0x1d8>)
 80054b6:	4805      	ldr	r0, [pc, #20]	; (80054cc <UARTposition+0x1dc>)
 80054b8:	f005 f881 	bl	800a5be <HAL_UART_Transmit>
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	0800c7e8 	.word	0x0800c7e8
 80054c8:	20000554 	.word	0x20000554
 80054cc:	20000514 	.word	0x20000514
 80054d0:	0800c7f0 	.word	0x0800c7f0
 80054d4:	0800c7f8 	.word	0x0800c7f8
 80054d8:	0800c800 	.word	0x0800c800

080054dc <UARTContaminationNOTFound>:
}
void UARTContaminationFound(){
	sprintf((char*)uartBuf, "Y\r\n");
	HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
}
void UARTContaminationNOTFound(){
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
	sprintf((char*)uartBuf, "N\r\n");
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <UARTContaminationNOTFound+0x24>)
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <UARTContaminationNOTFound+0x28>)
 80054e4:	6810      	ldr	r0, [r2, #0]
 80054e6:	6018      	str	r0, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 80054e8:	4805      	ldr	r0, [pc, #20]	; (8005500 <UARTContaminationNOTFound+0x24>)
 80054ea:	f7fa fe91 	bl	8000210 <strlen>
 80054ee:	4603      	mov	r3, r0
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	2364      	movs	r3, #100	; 0x64
 80054f4:	4902      	ldr	r1, [pc, #8]	; (8005500 <UARTContaminationNOTFound+0x24>)
 80054f6:	4804      	ldr	r0, [pc, #16]	; (8005508 <UARTContaminationNOTFound+0x2c>)
 80054f8:	f005 f861 	bl	800a5be <HAL_UART_Transmit>
}
 80054fc:	bf00      	nop
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000554 	.word	0x20000554
 8005504:	0800c840 	.word	0x0800c840
 8005508:	20000514 	.word	0x20000514

0800550c <readContamination>:
	}

}


void readContamination(){
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b083      	sub	sp, #12
 8005510:	af02      	add	r7, sp, #8
	  //ADC CHANNEL 1
		sConfig.Channel = ADC_CHANNEL_1;
 8005512:	4b44      	ldr	r3, [pc, #272]	; (8005624 <readContamination+0x118>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8005518:	4942      	ldr	r1, [pc, #264]	; (8005624 <readContamination+0x118>)
 800551a:	4843      	ldr	r0, [pc, #268]	; (8005628 <readContamination+0x11c>)
 800551c:	f001 f818 	bl	8006550 <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 8005520:	4841      	ldr	r0, [pc, #260]	; (8005628 <readContamination+0x11c>)
 8005522:	f000 febd 	bl	80062a0 <HAL_ADC_Start>
	  if ((HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)) {
 8005526:	2105      	movs	r1, #5
 8005528:	483f      	ldr	r0, [pc, #252]	; (8005628 <readContamination+0x11c>)
 800552a:	f000 ff7f 	bl	800642c <HAL_ADC_PollForConversion>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <readContamination+0x34>
		  sensor1 = HAL_ADC_GetValue(&hadc1);
 8005534:	483c      	ldr	r0, [pc, #240]	; (8005628 <readContamination+0x11c>)
 8005536:	f000 fffd 	bl	8006534 <HAL_ADC_GetValue>
 800553a:	4602      	mov	r2, r0
 800553c:	4b3b      	ldr	r3, [pc, #236]	; (800562c <readContamination+0x120>)
 800553e:	601a      	str	r2, [r3, #0]
//		sprintf((char*)uartBuf, "%u\r\n", adcVal0);
		//HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);


		//ADC CHANNEL 4
		sConfig.Channel = ADC_CHANNEL_4;
 8005540:	4b38      	ldr	r3, [pc, #224]	; (8005624 <readContamination+0x118>)
 8005542:	2204      	movs	r2, #4
 8005544:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8005546:	4937      	ldr	r1, [pc, #220]	; (8005624 <readContamination+0x118>)
 8005548:	4837      	ldr	r0, [pc, #220]	; (8005628 <readContamination+0x11c>)
 800554a:	f001 f801 	bl	8006550 <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 800554e:	4836      	ldr	r0, [pc, #216]	; (8005628 <readContamination+0x11c>)
 8005550:	f000 fea6 	bl	80062a0 <HAL_ADC_Start>
	  if ((HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)) {
 8005554:	2105      	movs	r1, #5
 8005556:	4834      	ldr	r0, [pc, #208]	; (8005628 <readContamination+0x11c>)
 8005558:	f000 ff68 	bl	800642c <HAL_ADC_PollForConversion>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d105      	bne.n	800556e <readContamination+0x62>
		  sensor2 = HAL_ADC_GetValue(&hadc1);
 8005562:	4831      	ldr	r0, [pc, #196]	; (8005628 <readContamination+0x11c>)
 8005564:	f000 ffe6 	bl	8006534 <HAL_ADC_GetValue>
 8005568:	4602      	mov	r2, r0
 800556a:	4b31      	ldr	r3, [pc, #196]	; (8005630 <readContamination+0x124>)
 800556c:	601a      	str	r2, [r3, #0]
		}


	  //ADC CHANNEL 8
		sConfig.Channel = ADC_CHANNEL_8;
 800556e:	4b2d      	ldr	r3, [pc, #180]	; (8005624 <readContamination+0x118>)
 8005570:	2208      	movs	r2, #8
 8005572:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8005574:	492b      	ldr	r1, [pc, #172]	; (8005624 <readContamination+0x118>)
 8005576:	482c      	ldr	r0, [pc, #176]	; (8005628 <readContamination+0x11c>)
 8005578:	f000 ffea 	bl	8006550 <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 800557c:	482a      	ldr	r0, [pc, #168]	; (8005628 <readContamination+0x11c>)
 800557e:	f000 fe8f 	bl	80062a0 <HAL_ADC_Start>
	  if ((HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)) {
 8005582:	2105      	movs	r1, #5
 8005584:	4828      	ldr	r0, [pc, #160]	; (8005628 <readContamination+0x11c>)
 8005586:	f000 ff51 	bl	800642c <HAL_ADC_PollForConversion>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d105      	bne.n	800559c <readContamination+0x90>
		  sensor3 = HAL_ADC_GetValue(&hadc1);
 8005590:	4825      	ldr	r0, [pc, #148]	; (8005628 <readContamination+0x11c>)
 8005592:	f000 ffcf 	bl	8006534 <HAL_ADC_GetValue>
 8005596:	4602      	mov	r2, r0
 8005598:	4b26      	ldr	r3, [pc, #152]	; (8005634 <readContamination+0x128>)
 800559a:	601a      	str	r2, [r3, #0]
		}


	  //ADC CHANNEL 11
		sConfig.Channel = ADC_CHANNEL_11;
 800559c:	4b21      	ldr	r3, [pc, #132]	; (8005624 <readContamination+0x118>)
 800559e:	220b      	movs	r2, #11
 80055a0:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80055a2:	4920      	ldr	r1, [pc, #128]	; (8005624 <readContamination+0x118>)
 80055a4:	4820      	ldr	r0, [pc, #128]	; (8005628 <readContamination+0x11c>)
 80055a6:	f000 ffd3 	bl	8006550 <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 80055aa:	481f      	ldr	r0, [pc, #124]	; (8005628 <readContamination+0x11c>)
 80055ac:	f000 fe78 	bl	80062a0 <HAL_ADC_Start>
	  if ((HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)) {
 80055b0:	2105      	movs	r1, #5
 80055b2:	481d      	ldr	r0, [pc, #116]	; (8005628 <readContamination+0x11c>)
 80055b4:	f000 ff3a 	bl	800642c <HAL_ADC_PollForConversion>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d105      	bne.n	80055ca <readContamination+0xbe>
		  sensor4 = HAL_ADC_GetValue(&hadc1);
 80055be:	481a      	ldr	r0, [pc, #104]	; (8005628 <readContamination+0x11c>)
 80055c0:	f000 ffb8 	bl	8006534 <HAL_ADC_GetValue>
 80055c4:	4602      	mov	r2, r0
 80055c6:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <readContamination+0x12c>)
 80055c8:	601a      	str	r2, [r3, #0]
		}


	  //ADC CHANNEL 10
		sConfig.Channel = ADC_CHANNEL_10;
 80055ca:	4b16      	ldr	r3, [pc, #88]	; (8005624 <readContamination+0x118>)
 80055cc:	220a      	movs	r2, #10
 80055ce:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80055d0:	4914      	ldr	r1, [pc, #80]	; (8005624 <readContamination+0x118>)
 80055d2:	4815      	ldr	r0, [pc, #84]	; (8005628 <readContamination+0x11c>)
 80055d4:	f000 ffbc 	bl	8006550 <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 80055d8:	4813      	ldr	r0, [pc, #76]	; (8005628 <readContamination+0x11c>)
 80055da:	f000 fe61 	bl	80062a0 <HAL_ADC_Start>
	  if ((HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK)) {
 80055de:	2105      	movs	r1, #5
 80055e0:	4811      	ldr	r0, [pc, #68]	; (8005628 <readContamination+0x11c>)
 80055e2:	f000 ff23 	bl	800642c <HAL_ADC_PollForConversion>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d105      	bne.n	80055f8 <readContamination+0xec>
		  sensor5 = HAL_ADC_GetValue(&hadc1);
 80055ec:	480e      	ldr	r0, [pc, #56]	; (8005628 <readContamination+0x11c>)
 80055ee:	f000 ffa1 	bl	8006534 <HAL_ADC_GetValue>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b11      	ldr	r3, [pc, #68]	; (800563c <readContamination+0x130>)
 80055f6:	601a      	str	r2, [r3, #0]
		}
	  printf("Sensor 1 = %u Sensor 2 = %u  Sensor 3 = %u Sensor 4 = %u  Sensor 5 = %u \r\n", sensor1, sensor2, sensor3, sensor4, sensor5);
 80055f8:	4b0c      	ldr	r3, [pc, #48]	; (800562c <readContamination+0x120>)
 80055fa:	6819      	ldr	r1, [r3, #0]
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <readContamination+0x124>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <readContamination+0x128>)
 8005602:	681c      	ldr	r4, [r3, #0]
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <readContamination+0x12c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a0c      	ldr	r2, [pc, #48]	; (800563c <readContamination+0x130>)
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	9201      	str	r2, [sp, #4]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	4623      	mov	r3, r4
 8005612:	4602      	mov	r2, r0
 8005614:	480a      	ldr	r0, [pc, #40]	; (8005640 <readContamination+0x134>)
 8005616:	f005 ffbb 	bl	800b590 <iprintf>
}
 800561a:	bf00      	nop
 800561c:	3704      	adds	r7, #4
 800561e:	46bd      	mov	sp, r7
 8005620:	bd90      	pop	{r4, r7, pc}
 8005622:	bf00      	nop
 8005624:	2000015c 	.word	0x2000015c
 8005628:	2000040c 	.word	0x2000040c
 800562c:	200006f0 	.word	0x200006f0
 8005630:	2000079c 	.word	0x2000079c
 8005634:	200004c0 	.word	0x200004c0
 8005638:	200006ec 	.word	0x200006ec
 800563c:	200006dc 	.word	0x200006dc
 8005640:	0800c844 	.word	0x0800c844

08005644 <readAccelerometer>:

void readAccelerometer(){
 8005644:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af04      	add	r7, sp, #16

				  MPU6050_Get_Accel_Scale(&myAcc_ScaledData);
 800564c:	481b      	ldr	r0, [pc, #108]	; (80056bc <readAccelerometer+0x78>)
 800564e:	f7fb fd4b 	bl	80010e8 <MPU6050_Get_Accel_Scale>
				  MPU6050_Get_Gyro_Scale(&myGyro_ScaledData);
 8005652:	481b      	ldr	r0, [pc, #108]	; (80056c0 <readAccelerometer+0x7c>)
 8005654:	f7fb fdac 	bl	80011b0 <MPU6050_Get_Gyro_Scale>
				  HAL_Delay(5);
 8005658:	2005      	movs	r0, #5
 800565a:	f000 fdbb 	bl	80061d4 <HAL_Delay>
				  ACCxValue = myAcc_ScaledData.x;
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <readAccelerometer+0x78>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <readAccelerometer+0x80>)
 8005664:	6013      	str	r3, [r2, #0]
				  ACCyValue = myAcc_ScaledData.y;
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <readAccelerometer+0x78>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <readAccelerometer+0x84>)
 800566c:	6013      	str	r3, [r2, #0]
				  ACCzValue = myAcc_ScaledData.z;
 800566e:	4b13      	ldr	r3, [pc, #76]	; (80056bc <readAccelerometer+0x78>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4a16      	ldr	r2, [pc, #88]	; (80056cc <readAccelerometer+0x88>)
 8005674:	6013      	str	r3, [r2, #0]

//				  ACCxValue -= ACCxValue_Cal;
//				  ACCyValue -= ACCyValue_Cal;
//				  ACCzValue -= ACCzValue_Cal;

				  printf("X: %.2f  Y: %.2f  Z: %.2f \r\n", ACCxValue, ACCyValue, ACCzValue);
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <readAccelerometer+0x80>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fa ff84 	bl	8000588 <__aeabi_f2d>
 8005680:	4680      	mov	r8, r0
 8005682:	4689      	mov	r9, r1
 8005684:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <readAccelerometer+0x84>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f7fa ff7d 	bl	8000588 <__aeabi_f2d>
 800568e:	4604      	mov	r4, r0
 8005690:	460d      	mov	r5, r1
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <readAccelerometer+0x88>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fa ff76 	bl	8000588 <__aeabi_f2d>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056a4:	e9cd 4500 	strd	r4, r5, [sp]
 80056a8:	4642      	mov	r2, r8
 80056aa:	464b      	mov	r3, r9
 80056ac:	4808      	ldr	r0, [pc, #32]	; (80056d0 <readAccelerometer+0x8c>)
 80056ae:	f005 ff6f 	bl	800b590 <iprintf>
}
 80056b2:	bf00      	nop
 80056b4:	46bd      	mov	sp, r7
 80056b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056ba:	bf00      	nop
 80056bc:	20000350 	.word	0x20000350
 80056c0:	200007a0 	.word	0x200007a0
 80056c4:	200006cc 	.word	0x200006cc
 80056c8:	200003fc 	.word	0x200003fc
 80056cc:	2000035c 	.word	0x2000035c
 80056d0:	0800c890 	.word	0x0800c890

080056d4 <cleaningAction>:
void cleaningAction(){
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
	stop();
 80056d8:	f7ff fd74 	bl	80051c4 <stop>
//			readAccelerometer();
//			HAL_Delay(10);
//			turnRightTrackReverse();
//		}
//	}
}
 80056dc:	bf00      	nop
 80056de:	bd80      	pop	{r7, pc}

080056e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056f6:	2300      	movs	r3, #0
 80056f8:	607b      	str	r3, [r7, #4]
 80056fa:	4a10      	ldr	r2, [pc, #64]	; (800573c <HAL_MspInit+0x4c>)
 80056fc:	4b0f      	ldr	r3, [pc, #60]	; (800573c <HAL_MspInit+0x4c>)
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005704:	6453      	str	r3, [r2, #68]	; 0x44
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <HAL_MspInit+0x4c>)
 8005708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800570e:	607b      	str	r3, [r7, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005712:	2300      	movs	r3, #0
 8005714:	603b      	str	r3, [r7, #0]
 8005716:	4a09      	ldr	r2, [pc, #36]	; (800573c <HAL_MspInit+0x4c>)
 8005718:	4b08      	ldr	r3, [pc, #32]	; (800573c <HAL_MspInit+0x4c>)
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005720:	6413      	str	r3, [r2, #64]	; 0x40
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_MspInit+0x4c>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800572e:	2007      	movs	r0, #7
 8005730:	f001 fa0c 	bl	8006b4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40023800 	.word	0x40023800

08005740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08c      	sub	sp, #48	; 0x30
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005748:	f107 031c 	add.w	r3, r7, #28
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	605a      	str	r2, [r3, #4]
 8005752:	609a      	str	r2, [r3, #8]
 8005754:	60da      	str	r2, [r3, #12]
 8005756:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a31      	ldr	r2, [pc, #196]	; (8005824 <HAL_ADC_MspInit+0xe4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d15b      	bne.n	800581a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005762:	2300      	movs	r3, #0
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	4a30      	ldr	r2, [pc, #192]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 8005768:	4b2f      	ldr	r3, [pc, #188]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 800576a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005770:	6453      	str	r3, [r2, #68]	; 0x44
 8005772:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 8005774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	4a29      	ldr	r2, [pc, #164]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 8005784:	4b28      	ldr	r3, [pc, #160]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	6313      	str	r3, [r2, #48]	; 0x30
 800578e:	4b26      	ldr	r3, [pc, #152]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	4a22      	ldr	r2, [pc, #136]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 80057a0:	4b21      	ldr	r3, [pc, #132]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	6313      	str	r3, [r2, #48]	; 0x30
 80057aa:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 80057bc:	4b1a      	ldr	r3, [pc, #104]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	6313      	str	r3, [r2, #48]	; 0x30
 80057c6:	4b18      	ldr	r3, [pc, #96]	; (8005828 <HAL_ADC_MspInit+0xe8>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80057d2:	2303      	movs	r3, #3
 80057d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057d6:	2303      	movs	r3, #3
 80057d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057de:	f107 031c 	add.w	r3, r7, #28
 80057e2:	4619      	mov	r1, r3
 80057e4:	4811      	ldr	r0, [pc, #68]	; (800582c <HAL_ADC_MspInit+0xec>)
 80057e6:	f001 fd83 	bl	80072f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80057ea:	2312      	movs	r3, #18
 80057ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057ee:	2303      	movs	r3, #3
 80057f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057f6:	f107 031c 	add.w	r3, r7, #28
 80057fa:	4619      	mov	r1, r3
 80057fc:	480c      	ldr	r0, [pc, #48]	; (8005830 <HAL_ADC_MspInit+0xf0>)
 80057fe:	f001 fd77 	bl	80072f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005802:	2301      	movs	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005806:	2303      	movs	r3, #3
 8005808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580a:	2300      	movs	r3, #0
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800580e:	f107 031c 	add.w	r3, r7, #28
 8005812:	4619      	mov	r1, r3
 8005814:	4807      	ldr	r0, [pc, #28]	; (8005834 <HAL_ADC_MspInit+0xf4>)
 8005816:	f001 fd6b 	bl	80072f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800581a:	bf00      	nop
 800581c:	3730      	adds	r7, #48	; 0x30
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40012000 	.word	0x40012000
 8005828:	40023800 	.word	0x40023800
 800582c:	40020800 	.word	0x40020800
 8005830:	40020000 	.word	0x40020000
 8005834:	40020400 	.word	0x40020400

08005838 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005840:	f107 0314 	add.w	r3, r7, #20
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	609a      	str	r2, [r3, #8]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_I2C_MspInit+0x84>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d12c      	bne.n	80058b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800585a:	2300      	movs	r3, #0
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <HAL_I2C_MspInit+0x88>)
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <HAL_I2C_MspInit+0x88>)
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	f043 0302 	orr.w	r3, r3, #2
 8005868:	6313      	str	r3, [r2, #48]	; 0x30
 800586a:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <HAL_I2C_MspInit+0x88>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8005876:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800587a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800587c:	2312      	movs	r3, #18
 800587e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005880:	2301      	movs	r3, #1
 8005882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005884:	2303      	movs	r3, #3
 8005886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005888:	2304      	movs	r3, #4
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800588c:	f107 0314 	add.w	r3, r7, #20
 8005890:	4619      	mov	r1, r3
 8005892:	480c      	ldr	r0, [pc, #48]	; (80058c4 <HAL_I2C_MspInit+0x8c>)
 8005894:	f001 fd2c 	bl	80072f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <HAL_I2C_MspInit+0x88>)
 800589e:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <HAL_I2C_MspInit+0x88>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058a6:	6413      	str	r3, [r2, #64]	; 0x40
 80058a8:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_I2C_MspInit+0x88>)
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80058b4:	bf00      	nop
 80058b6:	3728      	adds	r7, #40	; 0x28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40005800 	.word	0x40005800
 80058c0:	40023800 	.word	0x40023800
 80058c4:	40020400 	.word	0x40020400

080058c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b096      	sub	sp, #88	; 0x58
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	609a      	str	r2, [r3, #8]
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a9d      	ldr	r2, [pc, #628]	; (8005b5c <HAL_TIM_Base_MspInit+0x294>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d12d      	bne.n	8005946 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80058ea:	2300      	movs	r3, #0
 80058ec:	643b      	str	r3, [r7, #64]	; 0x40
 80058ee:	4a9c      	ldr	r2, [pc, #624]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 80058f0:	4b9b      	ldr	r3, [pc, #620]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 80058f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6453      	str	r3, [r2, #68]	; 0x44
 80058fa:	4b99      	ldr	r3, [pc, #612]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	643b      	str	r3, [r7, #64]	; 0x40
 8005904:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590a:	4a95      	ldr	r2, [pc, #596]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 800590c:	4b94      	ldr	r3, [pc, #592]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	6313      	str	r3, [r2, #48]	; 0x30
 8005916:	4b92      	ldr	r3, [pc, #584]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005926:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005928:	2302      	movs	r3, #2
 800592a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592c:	2300      	movs	r3, #0
 800592e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005930:	2300      	movs	r3, #0
 8005932:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005934:	2301      	movs	r3, #1
 8005936:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005938:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800593c:	4619      	mov	r1, r3
 800593e:	4889      	ldr	r0, [pc, #548]	; (8005b64 <HAL_TIM_Base_MspInit+0x29c>)
 8005940:	f001 fcd6 	bl	80072f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005944:	e157      	b.n	8005bf6 <HAL_TIM_Base_MspInit+0x32e>
  else if(htim_base->Instance==TIM2)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594e:	d135      	bne.n	80059bc <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005950:	2300      	movs	r3, #0
 8005952:	63bb      	str	r3, [r7, #56]	; 0x38
 8005954:	4a82      	ldr	r2, [pc, #520]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005956:	4b82      	ldr	r3, [pc, #520]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f043 0301 	orr.w	r3, r3, #1
 800595e:	6413      	str	r3, [r2, #64]	; 0x40
 8005960:	4b7f      	ldr	r3, [pc, #508]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	63bb      	str	r3, [r7, #56]	; 0x38
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800596c:	2300      	movs	r3, #0
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
 8005970:	4a7b      	ldr	r2, [pc, #492]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005972:	4b7b      	ldr	r3, [pc, #492]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	6313      	str	r3, [r2, #48]	; 0x30
 800597c:	4b78      	ldr	r3, [pc, #480]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598e:	2302      	movs	r3, #2
 8005990:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005992:	2300      	movs	r3, #0
 8005994:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005996:	2300      	movs	r3, #0
 8005998:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800599a:	2301      	movs	r3, #1
 800599c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800599e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80059a2:	4619      	mov	r1, r3
 80059a4:	486f      	ldr	r0, [pc, #444]	; (8005b64 <HAL_TIM_Base_MspInit+0x29c>)
 80059a6:	f001 fca3 	bl	80072f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80059aa:	2200      	movs	r2, #0
 80059ac:	2100      	movs	r1, #0
 80059ae:	201c      	movs	r0, #28
 80059b0:	f001 f8d7 	bl	8006b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80059b4:	201c      	movs	r0, #28
 80059b6:	f001 f8f0 	bl	8006b9a <HAL_NVIC_EnableIRQ>
}
 80059ba:	e11c      	b.n	8005bf6 <HAL_TIM_Base_MspInit+0x32e>
  else if(htim_base->Instance==TIM3)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a69      	ldr	r2, [pc, #420]	; (8005b68 <HAL_TIM_Base_MspInit+0x2a0>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d12c      	bne.n	8005a20 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059c6:	2300      	movs	r3, #0
 80059c8:	633b      	str	r3, [r7, #48]	; 0x30
 80059ca:	4a65      	ldr	r2, [pc, #404]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 80059cc:	4b64      	ldr	r3, [pc, #400]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	f043 0302 	orr.w	r3, r3, #2
 80059d4:	6413      	str	r3, [r2, #64]	; 0x40
 80059d6:	4b62      	ldr	r3, [pc, #392]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	633b      	str	r3, [r7, #48]	; 0x30
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e6:	4a5e      	ldr	r2, [pc, #376]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 80059e8:	4b5d      	ldr	r3, [pc, #372]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	6313      	str	r3, [r2, #48]	; 0x30
 80059f2:	4b5b      	ldr	r3, [pc, #364]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80059fe:	2380      	movs	r3, #128	; 0x80
 8005a00:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a02:	2302      	movs	r3, #2
 8005a04:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a0e:	2302      	movs	r3, #2
 8005a10:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005a16:	4619      	mov	r1, r3
 8005a18:	4852      	ldr	r0, [pc, #328]	; (8005b64 <HAL_TIM_Base_MspInit+0x29c>)
 8005a1a:	f001 fc69 	bl	80072f0 <HAL_GPIO_Init>
}
 8005a1e:	e0ea      	b.n	8005bf6 <HAL_TIM_Base_MspInit+0x32e>
  else if(htim_base->Instance==TIM4)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a51      	ldr	r2, [pc, #324]	; (8005b6c <HAL_TIM_Base_MspInit+0x2a4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d12c      	bne.n	8005a84 <HAL_TIM_Base_MspInit+0x1bc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2e:	4a4c      	ldr	r2, [pc, #304]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005a30:	4b4b      	ldr	r3, [pc, #300]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	f043 0304 	orr.w	r3, r3, #4
 8005a38:	6413      	str	r3, [r2, #64]	; 0x40
 8005a3a:	4b49      	ldr	r3, [pc, #292]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a46:	2300      	movs	r3, #0
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4a:	4a45      	ldr	r2, [pc, #276]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005a4c:	4b44      	ldr	r3, [pc, #272]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	f043 0302 	orr.w	r3, r3, #2
 8005a54:	6313      	str	r3, [r2, #48]	; 0x30
 8005a56:	4b42      	ldr	r3, [pc, #264]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a66:	2302      	movs	r3, #2
 8005a68:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005a72:	2302      	movs	r3, #2
 8005a74:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	483c      	ldr	r0, [pc, #240]	; (8005b70 <HAL_TIM_Base_MspInit+0x2a8>)
 8005a7e:	f001 fc37 	bl	80072f0 <HAL_GPIO_Init>
}
 8005a82:	e0b8      	b.n	8005bf6 <HAL_TIM_Base_MspInit+0x32e>
  else if(htim_base->Instance==TIM5)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a3a      	ldr	r2, [pc, #232]	; (8005b74 <HAL_TIM_Base_MspInit+0x2ac>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d134      	bne.n	8005af8 <HAL_TIM_Base_MspInit+0x230>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	4a33      	ldr	r2, [pc, #204]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005a94:	4b32      	ldr	r3, [pc, #200]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	f043 0308 	orr.w	r3, r3, #8
 8005a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9e:	4b30      	ldr	r3, [pc, #192]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	623b      	str	r3, [r7, #32]
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	f043 0301 	orr.w	r3, r3, #1
 8005ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aba:	4b29      	ldr	r3, [pc, #164]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	61fb      	str	r3, [r7, #28]
 8005ac4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aca:	2302      	movs	r3, #2
 8005acc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ada:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4820      	ldr	r0, [pc, #128]	; (8005b64 <HAL_TIM_Base_MspInit+0x29c>)
 8005ae2:	f001 fc05 	bl	80072f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	2032      	movs	r0, #50	; 0x32
 8005aec:	f001 f839 	bl	8006b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005af0:	2032      	movs	r0, #50	; 0x32
 8005af2:	f001 f852 	bl	8006b9a <HAL_NVIC_EnableIRQ>
}
 8005af6:	e07e      	b.n	8005bf6 <HAL_TIM_Base_MspInit+0x32e>
  else if(htim_base->Instance==TIM8)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1e      	ldr	r2, [pc, #120]	; (8005b78 <HAL_TIM_Base_MspInit+0x2b0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d13e      	bne.n	8005b80 <HAL_TIM_Base_MspInit+0x2b8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	4a16      	ldr	r2, [pc, #88]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005b08:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0c:	f043 0302 	orr.w	r3, r3, #2
 8005b10:	6453      	str	r3, [r2, #68]	; 0x44
 8005b12:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	61bb      	str	r3, [r7, #24]
 8005b1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	4a0f      	ldr	r2, [pc, #60]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005b24:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	f043 0304 	orr.w	r3, r3, #4
 8005b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	; (8005b60 <HAL_TIM_Base_MspInit+0x298>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b3e:	2302      	movs	r3, #2
 8005b40:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b46:	2300      	movs	r3, #0
 8005b48:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005b52:	4619      	mov	r1, r3
 8005b54:	4809      	ldr	r0, [pc, #36]	; (8005b7c <HAL_TIM_Base_MspInit+0x2b4>)
 8005b56:	f001 fbcb 	bl	80072f0 <HAL_GPIO_Init>
}
 8005b5a:	e04c      	b.n	8005bf6 <HAL_TIM_Base_MspInit+0x32e>
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40023800 	.word	0x40023800
 8005b64:	40020000 	.word	0x40020000
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40020400 	.word	0x40020400
 8005b74:	40000c00 	.word	0x40000c00
 8005b78:	40010400 	.word	0x40010400
 8005b7c:	40020800 	.word	0x40020800
  else if(htim_base->Instance==TIM10)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <HAL_TIM_Base_MspInit+0x338>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d10e      	bne.n	8005ba8 <HAL_TIM_Base_MspInit+0x2e0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	4a1d      	ldr	r2, [pc, #116]	; (8005c04 <HAL_TIM_Base_MspInit+0x33c>)
 8005b90:	4b1c      	ldr	r3, [pc, #112]	; (8005c04 <HAL_TIM_Base_MspInit+0x33c>)
 8005b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b98:	6453      	str	r3, [r2, #68]	; 0x44
 8005b9a:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <HAL_TIM_Base_MspInit+0x33c>)
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba2:	613b      	str	r3, [r7, #16]
 8005ba4:	693b      	ldr	r3, [r7, #16]
}
 8005ba6:	e026      	b.n	8005bf6 <HAL_TIM_Base_MspInit+0x32e>
  else if(htim_base->Instance==TIM11)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <HAL_TIM_Base_MspInit+0x340>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_TIM_Base_MspInit+0x308>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <HAL_TIM_Base_MspInit+0x33c>)
 8005bb8:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <HAL_TIM_Base_MspInit+0x33c>)
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <HAL_TIM_Base_MspInit+0x33c>)
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
}
 8005bce:	e012      	b.n	8005bf6 <HAL_TIM_Base_MspInit+0x32e>
  else if(htim_base->Instance==TIM13)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0d      	ldr	r2, [pc, #52]	; (8005c0c <HAL_TIM_Base_MspInit+0x344>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10d      	bne.n	8005bf6 <HAL_TIM_Base_MspInit+0x32e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60bb      	str	r3, [r7, #8]
 8005bde:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <HAL_TIM_Base_MspInit+0x33c>)
 8005be0:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <HAL_TIM_Base_MspInit+0x33c>)
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <HAL_TIM_Base_MspInit+0x33c>)
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	60bb      	str	r3, [r7, #8]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
}
 8005bf6:	bf00      	nop
 8005bf8:	3758      	adds	r7, #88	; 0x58
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40014400 	.word	0x40014400
 8005c04:	40023800 	.word	0x40023800
 8005c08:	40014800 	.word	0x40014800
 8005c0c:	40001c00 	.word	0x40001c00

08005c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	; 0x28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c18:	f107 0314 	add.w	r3, r7, #20
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a37      	ldr	r2, [pc, #220]	; (8005d0c <HAL_TIM_MspPostInit+0xfc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d11f      	bne.n	8005c72 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	4a36      	ldr	r2, [pc, #216]	; (8005d10 <HAL_TIM_MspPostInit+0x100>)
 8005c38:	4b35      	ldr	r3, [pc, #212]	; (8005d10 <HAL_TIM_MspPostInit+0x100>)
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	f043 0302 	orr.w	r3, r3, #2
 8005c40:	6313      	str	r3, [r2, #48]	; 0x30
 8005c42:	4b33      	ldr	r3, [pc, #204]	; (8005d10 <HAL_TIM_MspPostInit+0x100>)
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	693b      	ldr	r3, [r7, #16]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c54:	2302      	movs	r3, #2
 8005c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005c60:	2303      	movs	r3, #3
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c64:	f107 0314 	add.w	r3, r7, #20
 8005c68:	4619      	mov	r1, r3
 8005c6a:	482a      	ldr	r0, [pc, #168]	; (8005d14 <HAL_TIM_MspPostInit+0x104>)
 8005c6c:	f001 fb40 	bl	80072f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8005c70:	e047      	b.n	8005d02 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM11)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <HAL_TIM_MspPostInit+0x108>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d11f      	bne.n	8005cbc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	4a23      	ldr	r2, [pc, #140]	; (8005d10 <HAL_TIM_MspPostInit+0x100>)
 8005c82:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <HAL_TIM_MspPostInit+0x100>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f043 0302 	orr.w	r3, r3, #2
 8005c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8005c8c:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <HAL_TIM_MspPostInit+0x100>)
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005caa:	2303      	movs	r3, #3
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cae:	f107 0314 	add.w	r3, r7, #20
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4817      	ldr	r0, [pc, #92]	; (8005d14 <HAL_TIM_MspPostInit+0x104>)
 8005cb6:	f001 fb1b 	bl	80072f0 <HAL_GPIO_Init>
}
 8005cba:	e022      	b.n	8005d02 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM13)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a16      	ldr	r2, [pc, #88]	; (8005d1c <HAL_TIM_MspPostInit+0x10c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d11d      	bne.n	8005d02 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	4a11      	ldr	r2, [pc, #68]	; (8005d10 <HAL_TIM_MspPostInit+0x100>)
 8005ccc:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <HAL_TIM_MspPostInit+0x100>)
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005cd6:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <HAL_TIM_MspPostInit+0x100>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005ce2:	2340      	movs	r3, #64	; 0x40
 8005ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8005cf2:	2309      	movs	r3, #9
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf6:	f107 0314 	add.w	r3, r7, #20
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4808      	ldr	r0, [pc, #32]	; (8005d20 <HAL_TIM_MspPostInit+0x110>)
 8005cfe:	f001 faf7 	bl	80072f0 <HAL_GPIO_Init>
}
 8005d02:	bf00      	nop
 8005d04:	3728      	adds	r7, #40	; 0x28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40014400 	.word	0x40014400
 8005d10:	40023800 	.word	0x40023800
 8005d14:	40020400 	.word	0x40020400
 8005d18:	40014800 	.word	0x40014800
 8005d1c:	40001c00 	.word	0x40001c00
 8005d20:	40020000 	.word	0x40020000

08005d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	; 0x30
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d2c:	f107 031c 	add.w	r3, r7, #28
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	605a      	str	r2, [r3, #4]
 8005d36:	609a      	str	r2, [r3, #8]
 8005d38:	60da      	str	r2, [r3, #12]
 8005d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a5d      	ldr	r2, [pc, #372]	; (8005eb8 <HAL_UART_MspInit+0x194>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	f040 8083 	bne.w	8005e4e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d48:	2300      	movs	r3, #0
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	4a5b      	ldr	r2, [pc, #364]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005d4e:	4b5b      	ldr	r3, [pc, #364]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	f043 0310 	orr.w	r3, r3, #16
 8005d56:	6453      	str	r3, [r2, #68]	; 0x44
 8005d58:	4b58      	ldr	r3, [pc, #352]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5c:	f003 0310 	and.w	r3, r3, #16
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	4a54      	ldr	r2, [pc, #336]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005d6a:	4b54      	ldr	r3, [pc, #336]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	6313      	str	r3, [r2, #48]	; 0x30
 8005d74:	4b51      	ldr	r3, [pc, #324]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	4a4d      	ldr	r2, [pc, #308]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005d86:	4b4d      	ldr	r3, [pc, #308]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	f043 0302 	orr.w	r3, r3, #2
 8005d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d90:	4b4a      	ldr	r3, [pc, #296]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da2:	2302      	movs	r3, #2
 8005da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005daa:	2303      	movs	r3, #3
 8005dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005dae:	2307      	movs	r3, #7
 8005db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005db2:	f107 031c 	add.w	r3, r7, #28
 8005db6:	4619      	mov	r1, r3
 8005db8:	4841      	ldr	r0, [pc, #260]	; (8005ec0 <HAL_UART_MspInit+0x19c>)
 8005dba:	f001 fa99 	bl	80072f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005dce:	2307      	movs	r3, #7
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dd2:	f107 031c 	add.w	r3, r7, #28
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	483a      	ldr	r0, [pc, #232]	; (8005ec4 <HAL_UART_MspInit+0x1a0>)
 8005dda:	f001 fa89 	bl	80072f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005dde:	4b3a      	ldr	r3, [pc, #232]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005de0:	4a3a      	ldr	r2, [pc, #232]	; (8005ecc <HAL_UART_MspInit+0x1a8>)
 8005de2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005de4:	4b38      	ldr	r3, [pc, #224]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005de6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005dea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dec:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005df2:	4b35      	ldr	r3, [pc, #212]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005df8:	4b33      	ldr	r3, [pc, #204]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dfe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e00:	4b31      	ldr	r3, [pc, #196]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e06:	4b30      	ldr	r3, [pc, #192]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005e0c:	4b2e      	ldr	r3, [pc, #184]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e12:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e14:	4b2c      	ldr	r3, [pc, #176]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005e20:	4829      	ldr	r0, [pc, #164]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005e22:	f000 fed5 	bl	8006bd0 <HAL_DMA_Init>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005e2c:	f7ff fc58 	bl	80056e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a25      	ldr	r2, [pc, #148]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005e34:	635a      	str	r2, [r3, #52]	; 0x34
 8005e36:	4a24      	ldr	r2, [pc, #144]	; (8005ec8 <HAL_UART_MspInit+0x1a4>)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2100      	movs	r1, #0
 8005e40:	2025      	movs	r0, #37	; 0x25
 8005e42:	f000 fe8e 	bl	8006b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005e46:	2025      	movs	r0, #37	; 0x25
 8005e48:	f000 fea7 	bl	8006b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005e4c:	e030      	b.n	8005eb0 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART2)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <HAL_UART_MspInit+0x1ac>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d12b      	bne.n	8005eb0 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	4a17      	ldr	r2, [pc, #92]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005e5e:	4b17      	ldr	r3, [pc, #92]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e66:	6413      	str	r3, [r2, #64]	; 0x40
 8005e68:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
 8005e78:	4a10      	ldr	r2, [pc, #64]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005e7a:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	6313      	str	r3, [r2, #48]	; 0x30
 8005e84:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <HAL_UART_MspInit+0x198>)
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005e90:	230c      	movs	r3, #12
 8005e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e94:	2302      	movs	r3, #2
 8005e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ea0:	2307      	movs	r3, #7
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ea4:	f107 031c 	add.w	r3, r7, #28
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4805      	ldr	r0, [pc, #20]	; (8005ec0 <HAL_UART_MspInit+0x19c>)
 8005eac:	f001 fa20 	bl	80072f0 <HAL_GPIO_Init>
}
 8005eb0:	bf00      	nop
 8005eb2:	3730      	adds	r7, #48	; 0x30
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	40020000 	.word	0x40020000
 8005ec4:	40020400 	.word	0x40020400
 8005ec8:	20000460 	.word	0x20000460
 8005ecc:	40026440 	.word	0x40026440
 8005ed0:	40004400 	.word	0x40004400

08005ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ed8:	bf00      	nop
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ee6:	e7fe      	b.n	8005ee6 <HardFault_Handler+0x4>

08005ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005eec:	e7fe      	b.n	8005eec <MemManage_Handler+0x4>

08005eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ef2:	e7fe      	b.n	8005ef2 <BusFault_Handler+0x4>

08005ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ef8:	e7fe      	b.n	8005ef8 <UsageFault_Handler+0x4>

08005efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005efa:	b480      	push	{r7}
 8005efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005efe:	bf00      	nop
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f16:	b480      	push	{r7}
 8005f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f1a:	bf00      	nop
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f28:	f000 f934 	bl	8006194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f2c:	bf00      	nop
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005f34:	4802      	ldr	r0, [pc, #8]	; (8005f40 <TIM2_IRQHandler+0x10>)
 8005f36:	f003 f9d5 	bl	80092e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005f3a:	bf00      	nop
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	200006f4 	.word	0x200006f4

08005f44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005f48:	4802      	ldr	r0, [pc, #8]	; (8005f54 <USART1_IRQHandler+0x10>)
 8005f4a:	f004 fc51 	bl	800a7f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005f4e:	bf00      	nop
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000514 	.word	0x20000514

08005f58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005f5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005f60:	f001 fb72 	bl	8007648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005f64:	bf00      	nop
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005f6c:	4802      	ldr	r0, [pc, #8]	; (8005f78 <TIM5_IRQHandler+0x10>)
 8005f6e:	f003 f9b9 	bl	80092e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005f72:	bf00      	nop
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000364 	.word	0x20000364

08005f7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005f80:	4802      	ldr	r0, [pc, #8]	; (8005f8c <DMA2_Stream2_IRQHandler+0x10>)
 8005f82:	f000 ff4d 	bl	8006e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005f86:	bf00      	nop
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000460 	.word	0x20000460

08005f90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f90:	b590      	push	{r4, r7, lr}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	e00a      	b.n	8005fb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005fa2:	68bc      	ldr	r4, [r7, #8]
 8005fa4:	1c63      	adds	r3, r4, #1
 8005fa6:	60bb      	str	r3, [r7, #8]
 8005fa8:	f3af 8000 	nop.w
 8005fac:	4603      	mov	r3, r0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	dbf0      	blt.n	8005fa2 <_read+0x12>
	}

return len;
 8005fc0:	687b      	ldr	r3, [r7, #4]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	371c      	adds	r7, #28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd90      	pop	{r4, r7, pc}

08005fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b086      	sub	sp, #24
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	e009      	b.n	8005ff0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	60ba      	str	r2, [r7, #8]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	3301      	adds	r3, #1
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	dbf1      	blt.n	8005fdc <_write+0x12>
	}
	return len;
 8005ff8:	687b      	ldr	r3, [r7, #4]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800600c:	4b11      	ldr	r3, [pc, #68]	; (8006054 <_sbrk+0x50>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <_sbrk+0x16>
		heap_end = &end;
 8006014:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <_sbrk+0x50>)
 8006016:	4a10      	ldr	r2, [pc, #64]	; (8006058 <_sbrk+0x54>)
 8006018:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800601a:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <_sbrk+0x50>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <_sbrk+0x50>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	466a      	mov	r2, sp
 800602a:	4293      	cmp	r3, r2
 800602c:	d907      	bls.n	800603e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800602e:	f005 fa71 	bl	800b514 <__errno>
 8006032:	4602      	mov	r2, r0
 8006034:	230c      	movs	r3, #12
 8006036:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006038:	f04f 33ff 	mov.w	r3, #4294967295
 800603c:	e006      	b.n	800604c <_sbrk+0x48>
	}

	heap_end += incr;
 800603e:	4b05      	ldr	r3, [pc, #20]	; (8006054 <_sbrk+0x50>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4413      	add	r3, r2
 8006046:	4a03      	ldr	r2, [pc, #12]	; (8006054 <_sbrk+0x50>)
 8006048:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800604a:	68fb      	ldr	r3, [r7, #12]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000178 	.word	0x20000178
 8006058:	200007c0 	.word	0x200007c0

0800605c <_close>:

int _close(int file)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	return -1;
 8006064:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006084:	605a      	str	r2, [r3, #4]
	return 0;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <_isatty>:

int _isatty(int file)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	return 1;
 800609c:	2301      	movs	r3, #1
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
	return 0;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060c8:	4a08      	ldr	r2, [pc, #32]	; (80060ec <SystemInit+0x28>)
 80060ca:	4b08      	ldr	r3, [pc, #32]	; (80060ec <SystemInit+0x28>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80060d8:	4b04      	ldr	r3, [pc, #16]	; (80060ec <SystemInit+0x28>)
 80060da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060de:	609a      	str	r2, [r3, #8]
#endif
}
 80060e0:	bf00      	nop
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	e000ed00 	.word	0xe000ed00

080060f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060f4:	4a0e      	ldr	r2, [pc, #56]	; (8006130 <HAL_Init+0x40>)
 80060f6:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <HAL_Init+0x40>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006100:	4a0b      	ldr	r2, [pc, #44]	; (8006130 <HAL_Init+0x40>)
 8006102:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <HAL_Init+0x40>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800610a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800610c:	4a08      	ldr	r2, [pc, #32]	; (8006130 <HAL_Init+0x40>)
 800610e:	4b08      	ldr	r3, [pc, #32]	; (8006130 <HAL_Init+0x40>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006118:	2003      	movs	r0, #3
 800611a:	f000 fd17 	bl	8006b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800611e:	2000      	movs	r0, #0
 8006120:	f000 f808 	bl	8006134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006124:	f7ff fae4 	bl	80056f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40023c00 	.word	0x40023c00

08006134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800613c:	4b12      	ldr	r3, [pc, #72]	; (8006188 <HAL_InitTick+0x54>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4b12      	ldr	r3, [pc, #72]	; (800618c <HAL_InitTick+0x58>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	4619      	mov	r1, r3
 8006146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800614a:	fbb3 f3f1 	udiv	r3, r3, r1
 800614e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fd2f 	bl	8006bb6 <HAL_SYSTICK_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e00e      	b.n	8006180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b0f      	cmp	r3, #15
 8006166:	d80a      	bhi.n	800617e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006168:	2200      	movs	r2, #0
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	f000 fcf7 	bl	8006b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006174:	4a06      	ldr	r2, [pc, #24]	; (8006190 <HAL_InitTick+0x5c>)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	e000      	b.n	8006180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
}
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20000044 	.word	0x20000044
 800618c:	2000004c 	.word	0x2000004c
 8006190:	20000048 	.word	0x20000048

08006194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006198:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_IncTick+0x20>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	461a      	mov	r2, r3
 800619e:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <HAL_IncTick+0x24>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4413      	add	r3, r2
 80061a4:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <HAL_IncTick+0x24>)
 80061a6:	6013      	str	r3, [r2, #0]
}
 80061a8:	bf00      	nop
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	2000004c 	.word	0x2000004c
 80061b8:	200007b8 	.word	0x200007b8

080061bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return uwTick;
 80061c0:	4b03      	ldr	r3, [pc, #12]	; (80061d0 <HAL_GetTick+0x14>)
 80061c2:	681b      	ldr	r3, [r3, #0]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	200007b8 	.word	0x200007b8

080061d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061dc:	f7ff ffee 	bl	80061bc <HAL_GetTick>
 80061e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ec:	d005      	beq.n	80061fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80061ee:	4b09      	ldr	r3, [pc, #36]	; (8006214 <HAL_Delay+0x40>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80061fa:	bf00      	nop
 80061fc:	f7ff ffde 	bl	80061bc <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	1ad2      	subs	r2, r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	429a      	cmp	r2, r3
 800620a:	d3f7      	bcc.n	80061fc <HAL_Delay+0x28>
  {
  }
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	2000004c 	.word	0x2000004c

08006218 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e033      	b.n	8006296 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff fa82 	bl	8005740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	f003 0310 	and.w	r3, r3, #16
 8006252:	2b00      	cmp	r3, #0
 8006254:	d118      	bne.n	8006288 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800625e:	f023 0302 	bic.w	r3, r3, #2
 8006262:	f043 0202 	orr.w	r2, r3, #2
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 faa4 	bl	80067b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f023 0303 	bic.w	r3, r3, #3
 800627e:	f043 0201 	orr.w	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	641a      	str	r2, [r3, #64]	; 0x40
 8006286:	e001      	b.n	800628c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_ADC_Start+0x1a>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e0a5      	b.n	8006406 <HAL_ADC_Start+0x166>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d018      	beq.n	8006302 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6812      	ldr	r2, [r2, #0]
 80062d8:	6892      	ldr	r2, [r2, #8]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80062e0:	4b4c      	ldr	r3, [pc, #304]	; (8006414 <HAL_ADC_Start+0x174>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a4c      	ldr	r2, [pc, #304]	; (8006418 <HAL_ADC_Start+0x178>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	0c9a      	lsrs	r2, r3, #18
 80062ec:	4613      	mov	r3, r2
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	4413      	add	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80062f4:	e002      	b.n	80062fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f9      	bne.n	80062f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	2b01      	cmp	r3, #1
 800630e:	d179      	bne.n	8006404 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006318:	f023 0301 	bic.w	r3, r3, #1
 800631c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800633a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800634a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634e:	d106      	bne.n	800635e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006354:	f023 0206 	bic.w	r2, r3, #6
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	645a      	str	r2, [r3, #68]	; 0x44
 800635c:	e002      	b.n	8006364 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800636c:	4b2b      	ldr	r3, [pc, #172]	; (800641c <HAL_ADC_Start+0x17c>)
 800636e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006378:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2b00      	cmp	r3, #0
 8006384:	d12a      	bne.n	80063dc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a25      	ldr	r2, [pc, #148]	; (8006420 <HAL_ADC_Start+0x180>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d015      	beq.n	80063bc <HAL_ADC_Start+0x11c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a23      	ldr	r2, [pc, #140]	; (8006424 <HAL_ADC_Start+0x184>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d105      	bne.n	80063a6 <HAL_ADC_Start+0x106>
 800639a:	4b20      	ldr	r3, [pc, #128]	; (800641c <HAL_ADC_Start+0x17c>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <HAL_ADC_Start+0x188>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d129      	bne.n	8006404 <HAL_ADC_Start+0x164>
 80063b0:	4b1a      	ldr	r3, [pc, #104]	; (800641c <HAL_ADC_Start+0x17c>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2b0f      	cmp	r3, #15
 80063ba:	d823      	bhi.n	8006404 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d11c      	bne.n	8006404 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	6892      	ldr	r2, [r2, #8]
 80063d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80063d8:	609a      	str	r2, [r3, #8]
 80063da:	e013      	b.n	8006404 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a0f      	ldr	r2, [pc, #60]	; (8006420 <HAL_ADC_Start+0x180>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10e      	bne.n	8006404 <HAL_ADC_Start+0x164>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d107      	bne.n	8006404 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	6892      	ldr	r2, [r2, #8]
 80063fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006402:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000044 	.word	0x20000044
 8006418:	431bde83 	.word	0x431bde83
 800641c:	40012300 	.word	0x40012300
 8006420:	40012000 	.word	0x40012000
 8006424:	40012100 	.word	0x40012100
 8006428:	40012200 	.word	0x40012200

0800642c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006448:	d113      	bne.n	8006472 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006458:	d10b      	bne.n	8006472 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e05c      	b.n	800652c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006472:	f7ff fea3 	bl	80061bc <HAL_GetTick>
 8006476:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006478:	e01a      	b.n	80064b0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d016      	beq.n	80064b0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <HAL_ADC_PollForConversion+0x6c>
 8006488:	f7ff fe98 	bl	80061bc <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1ad2      	subs	r2, r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d90b      	bls.n	80064b0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	f043 0204 	orr.w	r2, r3, #4
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e03d      	b.n	800652c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d1dd      	bne.n	800647a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f06f 0212 	mvn.w	r2, #18
 80064c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d123      	bne.n	800652a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d11f      	bne.n	800652a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d006      	beq.n	8006506 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006502:	2b00      	cmp	r3, #0
 8006504:	d111      	bne.n	800652a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d105      	bne.n	800652a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f043 0201 	orr.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006550:	b490      	push	{r4, r7}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_ADC_ConfigChannel+0x1c>
 8006568:	2302      	movs	r3, #2
 800656a:	e115      	b.n	8006798 <HAL_ADC_ConfigChannel+0x248>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b09      	cmp	r3, #9
 800657a:	d926      	bls.n	80065ca <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68d9      	ldr	r1, [r3, #12]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	4618      	mov	r0, r3
 800658e:	4603      	mov	r3, r0
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	4403      	add	r3, r0
 8006594:	3b1e      	subs	r3, #30
 8006596:	2007      	movs	r0, #7
 8006598:	fa00 f303 	lsl.w	r3, r0, r3
 800659c:	43db      	mvns	r3, r3
 800659e:	400b      	ands	r3, r1
 80065a0:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68d9      	ldr	r1, [r3, #12]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	6898      	ldr	r0, [r3, #8]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	461c      	mov	r4, r3
 80065b8:	4623      	mov	r3, r4
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	4423      	add	r3, r4
 80065be:	3b1e      	subs	r3, #30
 80065c0:	fa00 f303 	lsl.w	r3, r0, r3
 80065c4:	430b      	orrs	r3, r1
 80065c6:	60d3      	str	r3, [r2, #12]
 80065c8:	e023      	b.n	8006612 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6919      	ldr	r1, [r3, #16]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	4618      	mov	r0, r3
 80065dc:	4603      	mov	r3, r0
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4403      	add	r3, r0
 80065e2:	2007      	movs	r0, #7
 80065e4:	fa00 f303 	lsl.w	r3, r0, r3
 80065e8:	43db      	mvns	r3, r3
 80065ea:	400b      	ands	r3, r1
 80065ec:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6919      	ldr	r1, [r3, #16]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	6898      	ldr	r0, [r3, #8]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	461c      	mov	r4, r3
 8006604:	4623      	mov	r3, r4
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	4423      	add	r3, r4
 800660a:	fa00 f303 	lsl.w	r3, r0, r3
 800660e:	430b      	orrs	r3, r1
 8006610:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b06      	cmp	r3, #6
 8006618:	d824      	bhi.n	8006664 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6819      	ldr	r1, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	3b05      	subs	r3, #5
 8006630:	221f      	movs	r2, #31
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	43db      	mvns	r3, r3
 8006638:	4003      	ands	r3, r0
 800663a:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6819      	ldr	r1, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	461c      	mov	r4, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	3b05      	subs	r3, #5
 800665a:	fa04 f303 	lsl.w	r3, r4, r3
 800665e:	4303      	orrs	r3, r0
 8006660:	634b      	str	r3, [r1, #52]	; 0x34
 8006662:	e04c      	b.n	80066fe <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b0c      	cmp	r3, #12
 800666a:	d824      	bhi.n	80066b6 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6819      	ldr	r1, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	3b23      	subs	r3, #35	; 0x23
 8006682:	221f      	movs	r2, #31
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	43db      	mvns	r3, r3
 800668a:	4003      	ands	r3, r0
 800668c:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6819      	ldr	r1, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	461c      	mov	r4, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	3b23      	subs	r3, #35	; 0x23
 80066ac:	fa04 f303 	lsl.w	r3, r4, r3
 80066b0:	4303      	orrs	r3, r0
 80066b2:	630b      	str	r3, [r1, #48]	; 0x30
 80066b4:	e023      	b.n	80066fe <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6819      	ldr	r1, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	3b41      	subs	r3, #65	; 0x41
 80066cc:	221f      	movs	r2, #31
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	43db      	mvns	r3, r3
 80066d4:	4003      	ands	r3, r0
 80066d6:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6819      	ldr	r1, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	461c      	mov	r4, r3
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	3b41      	subs	r3, #65	; 0x41
 80066f6:	fa04 f303 	lsl.w	r3, r4, r3
 80066fa:	4303      	orrs	r3, r0
 80066fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066fe:	4b29      	ldr	r3, [pc, #164]	; (80067a4 <HAL_ADC_ConfigChannel+0x254>)
 8006700:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a28      	ldr	r2, [pc, #160]	; (80067a8 <HAL_ADC_ConfigChannel+0x258>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d10f      	bne.n	800672c <HAL_ADC_ConfigChannel+0x1dc>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b12      	cmp	r3, #18
 8006712:	d10b      	bne.n	800672c <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1d      	ldr	r2, [pc, #116]	; (80067a8 <HAL_ADC_ConfigChannel+0x258>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d12b      	bne.n	800678e <HAL_ADC_ConfigChannel+0x23e>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a1c      	ldr	r2, [pc, #112]	; (80067ac <HAL_ADC_ConfigChannel+0x25c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <HAL_ADC_ConfigChannel+0x1f8>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b11      	cmp	r3, #17
 8006746:	d122      	bne.n	800678e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a11      	ldr	r2, [pc, #68]	; (80067ac <HAL_ADC_ConfigChannel+0x25c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d111      	bne.n	800678e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800676a:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <HAL_ADC_ConfigChannel+0x260>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a11      	ldr	r2, [pc, #68]	; (80067b4 <HAL_ADC_ConfigChannel+0x264>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	0c9a      	lsrs	r2, r3, #18
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006780:	e002      	b.n	8006788 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3b01      	subs	r3, #1
 8006786:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1f9      	bne.n	8006782 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bc90      	pop	{r4, r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	40012300 	.word	0x40012300
 80067a8:	40012000 	.word	0x40012000
 80067ac:	10000012 	.word	0x10000012
 80067b0:	20000044 	.word	0x20000044
 80067b4:	431bde83 	.word	0x431bde83

080067b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067c0:	4b79      	ldr	r3, [pc, #484]	; (80069a8 <ADC_Init+0x1f0>)
 80067c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	431a      	orrs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	6852      	ldr	r2, [r2, #4]
 80067e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	6851      	ldr	r1, [r2, #4]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6912      	ldr	r2, [r2, #16]
 80067fc:	0212      	lsls	r2, r2, #8
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	6852      	ldr	r2, [r2, #4]
 800680c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6812      	ldr	r2, [r2, #0]
 800681a:	6851      	ldr	r1, [r2, #4]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6892      	ldr	r2, [r2, #8]
 8006820:	430a      	orrs	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	6892      	ldr	r2, [r2, #8]
 800682e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	6891      	ldr	r1, [r2, #8]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	68d2      	ldr	r2, [r2, #12]
 8006842:	430a      	orrs	r2, r1
 8006844:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	4a58      	ldr	r2, [pc, #352]	; (80069ac <ADC_Init+0x1f4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d022      	beq.n	8006896 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	6892      	ldr	r2, [r2, #8]
 800685a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800685e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6812      	ldr	r2, [r2, #0]
 8006868:	6891      	ldr	r1, [r2, #8]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800686e:	430a      	orrs	r2, r1
 8006870:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	6892      	ldr	r2, [r2, #8]
 800687c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006880:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	6891      	ldr	r1, [r2, #8]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006890:	430a      	orrs	r2, r1
 8006892:	609a      	str	r2, [r3, #8]
 8006894:	e00f      	b.n	80068b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	6812      	ldr	r2, [r2, #0]
 800689e:	6892      	ldr	r2, [r2, #8]
 80068a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6812      	ldr	r2, [r2, #0]
 80068ae:	6892      	ldr	r2, [r2, #8]
 80068b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80068b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	6892      	ldr	r2, [r2, #8]
 80068c0:	f022 0202 	bic.w	r2, r2, #2
 80068c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	6891      	ldr	r1, [r2, #8]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	7e12      	ldrb	r2, [r2, #24]
 80068d4:	0052      	lsls	r2, r2, #1
 80068d6:	430a      	orrs	r2, r1
 80068d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01b      	beq.n	800691c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	6852      	ldr	r2, [r2, #4]
 80068ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	6852      	ldr	r2, [r2, #4]
 80068fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006902:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6812      	ldr	r2, [r2, #0]
 800690c:	6851      	ldr	r1, [r2, #4]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006912:	3a01      	subs	r2, #1
 8006914:	0352      	lsls	r2, r2, #13
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
 800691a:	e007      	b.n	800692c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	6852      	ldr	r2, [r2, #4]
 8006926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800692a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006936:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800693a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	69d2      	ldr	r2, [r2, #28]
 800694a:	3a01      	subs	r2, #1
 800694c:	0512      	lsls	r2, r2, #20
 800694e:	430a      	orrs	r2, r1
 8006950:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6812      	ldr	r2, [r2, #0]
 800695a:	6892      	ldr	r2, [r2, #8]
 800695c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6812      	ldr	r2, [r2, #0]
 800696a:	6891      	ldr	r1, [r2, #8]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006972:	0252      	lsls	r2, r2, #9
 8006974:	430a      	orrs	r2, r1
 8006976:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	6892      	ldr	r2, [r2, #8]
 8006982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6812      	ldr	r2, [r2, #0]
 8006990:	6891      	ldr	r1, [r2, #8]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6952      	ldr	r2, [r2, #20]
 8006996:	0292      	lsls	r2, r2, #10
 8006998:	430a      	orrs	r2, r1
 800699a:	609a      	str	r2, [r3, #8]
}
 800699c:	bf00      	nop
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	40012300 	.word	0x40012300
 80069ac:	0f000001 	.word	0x0f000001

080069b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069c0:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <__NVIC_SetPriorityGrouping+0x44>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069cc:	4013      	ands	r3, r2
 80069ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069e2:	4a04      	ldr	r2, [pc, #16]	; (80069f4 <__NVIC_SetPriorityGrouping+0x44>)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	60d3      	str	r3, [r2, #12]
}
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	e000ed00 	.word	0xe000ed00

080069f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069fc:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <__NVIC_GetPriorityGrouping+0x18>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	0a1b      	lsrs	r3, r3, #8
 8006a02:	f003 0307 	and.w	r3, r3, #7
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	e000ed00 	.word	0xe000ed00

08006a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	db0b      	blt.n	8006a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a26:	4909      	ldr	r1, [pc, #36]	; (8006a4c <__NVIC_EnableIRQ+0x38>)
 8006a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	79fa      	ldrb	r2, [r7, #7]
 8006a30:	f002 021f 	and.w	r2, r2, #31
 8006a34:	2001      	movs	r0, #1
 8006a36:	fa00 f202 	lsl.w	r2, r0, r2
 8006a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	e000e100 	.word	0xe000e100

08006a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	6039      	str	r1, [r7, #0]
 8006a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	db0a      	blt.n	8006a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a64:	490d      	ldr	r1, [pc, #52]	; (8006a9c <__NVIC_SetPriority+0x4c>)
 8006a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	0112      	lsls	r2, r2, #4
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	440b      	add	r3, r1
 8006a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a78:	e00a      	b.n	8006a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a7a:	4909      	ldr	r1, [pc, #36]	; (8006aa0 <__NVIC_SetPriority+0x50>)
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	3b04      	subs	r3, #4
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	0112      	lsls	r2, r2, #4
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	761a      	strb	r2, [r3, #24]
}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	e000e100 	.word	0xe000e100
 8006aa0:	e000ed00 	.word	0xe000ed00

08006aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b089      	sub	sp, #36	; 0x24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f1c3 0307 	rsb	r3, r3, #7
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	bf28      	it	cs
 8006ac2:	2304      	movcs	r3, #4
 8006ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	2b06      	cmp	r3, #6
 8006acc:	d902      	bls.n	8006ad4 <NVIC_EncodePriority+0x30>
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3b03      	subs	r3, #3
 8006ad2:	e000      	b.n	8006ad6 <NVIC_EncodePriority+0x32>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ad8:	2201      	movs	r2, #1
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	1e5a      	subs	r2, r3, #1
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	401a      	ands	r2, r3
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006aea:	2101      	movs	r1, #1
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	fa01 f303 	lsl.w	r3, r1, r3
 8006af2:	1e59      	subs	r1, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006af8:	4313      	orrs	r3, r2
         );
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3724      	adds	r7, #36	; 0x24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b18:	d301      	bcc.n	8006b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e00f      	b.n	8006b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b1e:	4a0a      	ldr	r2, [pc, #40]	; (8006b48 <SysTick_Config+0x40>)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b26:	210f      	movs	r1, #15
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	f7ff ff90 	bl	8006a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b30:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <SysTick_Config+0x40>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b36:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <SysTick_Config+0x40>)
 8006b38:	2207      	movs	r2, #7
 8006b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	e000e010 	.word	0xe000e010

08006b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff ff2b 	bl	80069b0 <__NVIC_SetPriorityGrouping>
}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	4603      	mov	r3, r0
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b74:	f7ff ff40 	bl	80069f8 <__NVIC_GetPriorityGrouping>
 8006b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	6978      	ldr	r0, [r7, #20]
 8006b80:	f7ff ff90 	bl	8006aa4 <NVIC_EncodePriority>
 8006b84:	4602      	mov	r2, r0
 8006b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff ff5f 	bl	8006a50 <__NVIC_SetPriority>
}
 8006b92:	bf00      	nop
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff ff33 	bl	8006a14 <__NVIC_EnableIRQ>
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff ffa2 	bl	8006b08 <SysTick_Config>
 8006bc4:	4603      	mov	r3, r0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006bdc:	f7ff faee 	bl	80061bc <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e099      	b.n	8006d20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	f022 0201 	bic.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c0c:	e00f      	b.n	8006c2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c0e:	f7ff fad5 	bl	80061bc <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b05      	cmp	r3, #5
 8006c1a:	d908      	bls.n	8006c2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2203      	movs	r2, #3
 8006c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e078      	b.n	8006d20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e8      	bne.n	8006c0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	4b38      	ldr	r3, [pc, #224]	; (8006d28 <HAL_DMA_Init+0x158>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d107      	bne.n	8006c98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	4313      	orrs	r3, r2
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0307 	bic.w	r3, r3, #7
 8006cae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d117      	bne.n	8006cf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fa91 	bl	80071fc <DMA_CheckFifoParam>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d008      	beq.n	8006cf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2240      	movs	r2, #64	; 0x40
 8006ce4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e016      	b.n	8006d20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa48 	bl	8007190 <DMA_CalcBaseAndBitshift>
 8006d00:	4603      	mov	r3, r0
 8006d02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d08:	223f      	movs	r2, #63	; 0x3f
 8006d0a:	409a      	lsls	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	f010803f 	.word	0xf010803f

08006d2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <HAL_DMA_Start_IT+0x26>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e040      	b.n	8006dd4 <HAL_DMA_Start_IT+0xa8>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d12f      	bne.n	8006dc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2202      	movs	r2, #2
 8006d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 f9da 	bl	8007134 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d84:	223f      	movs	r2, #63	; 0x3f
 8006d86:	409a      	lsls	r2, r3
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	6812      	ldr	r2, [r2, #0]
 8006d94:	6812      	ldr	r2, [r2, #0]
 8006d96:	f042 0216 	orr.w	r2, r2, #22
 8006d9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	f042 0208 	orr.w	r2, r2, #8
 8006db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	6812      	ldr	r2, [r2, #0]
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	e005      	b.n	8006dd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d004      	beq.n	8006dfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2280      	movs	r2, #128	; 0x80
 8006df4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e00c      	b.n	8006e14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2205      	movs	r2, #5
 8006dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6812      	ldr	r2, [r2, #0]
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	f022 0201 	bic.w	r2, r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e2c:	4b92      	ldr	r3, [pc, #584]	; (8007078 <HAL_DMA_IRQHandler+0x258>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a92      	ldr	r2, [pc, #584]	; (800707c <HAL_DMA_IRQHandler+0x25c>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	0a9b      	lsrs	r3, r3, #10
 8006e38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	409a      	lsls	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d01a      	beq.n	8006e8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d013      	beq.n	8006e8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	f022 0204 	bic.w	r2, r2, #4
 8006e72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e78:	2208      	movs	r2, #8
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e84:	f043 0201 	orr.w	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e90:	2201      	movs	r2, #1
 8006e92:	409a      	lsls	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d012      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00b      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eae:	2201      	movs	r2, #1
 8006eb0:	409a      	lsls	r2, r3
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	f043 0202 	orr.w	r2, r3, #2
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	409a      	lsls	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d012      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	409a      	lsls	r2, r3
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef0:	f043 0204 	orr.w	r2, r3, #4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efc:	2210      	movs	r2, #16
 8006efe:	409a      	lsls	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4013      	ands	r3, r2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d043      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d03c      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	409a      	lsls	r2, r3
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d018      	beq.n	8006f62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d108      	bne.n	8006f50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d024      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
 8006f4e:	e01f      	b.n	8006f90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01b      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
 8006f60:	e016      	b.n	8006f90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d107      	bne.n	8006f80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	6812      	ldr	r2, [r2, #0]
 8006f7a:	f022 0208 	bic.w	r2, r2, #8
 8006f7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f94:	2220      	movs	r2, #32
 8006f96:	409a      	lsls	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 808e 	beq.w	80070be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8086 	beq.w	80070be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	409a      	lsls	r2, r3
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b05      	cmp	r3, #5
 8006fc8:	d136      	bne.n	8007038 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	f022 0216 	bic.w	r2, r2, #22
 8006fd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6812      	ldr	r2, [r2, #0]
 8006fe2:	6952      	ldr	r2, [r2, #20]
 8006fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fe8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d103      	bne.n	8006ffa <HAL_DMA_IRQHandler+0x1da>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	f022 0208 	bic.w	r2, r2, #8
 8007008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700e:	223f      	movs	r2, #63	; 0x3f
 8007010:	409a      	lsls	r2, r3
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702a:	2b00      	cmp	r3, #0
 800702c:	d07d      	beq.n	800712a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
        }
        return;
 8007036:	e078      	b.n	800712a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01c      	beq.n	8007080 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d108      	bne.n	8007066 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007058:	2b00      	cmp	r3, #0
 800705a:	d030      	beq.n	80070be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
 8007064:	e02b      	b.n	80070be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d027      	beq.n	80070be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	4798      	blx	r3
 8007076:	e022      	b.n	80070be <HAL_DMA_IRQHandler+0x29e>
 8007078:	20000044 	.word	0x20000044
 800707c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10f      	bne.n	80070ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	f022 0210 	bic.w	r2, r2, #16
 800709c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d032      	beq.n	800712c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d022      	beq.n	8007118 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2205      	movs	r2, #5
 80070d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6812      	ldr	r2, [r2, #0]
 80070e2:	6812      	ldr	r2, [r2, #0]
 80070e4:	f022 0201 	bic.w	r2, r2, #1
 80070e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	3301      	adds	r3, #1
 80070ee:	60bb      	str	r3, [r7, #8]
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d807      	bhi.n	8007106 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1f2      	bne.n	80070ea <HAL_DMA_IRQHandler+0x2ca>
 8007104:	e000      	b.n	8007108 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007106:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	4798      	blx	r3
 8007128:	e000      	b.n	800712c <HAL_DMA_IRQHandler+0x30c>
        return;
 800712a:	bf00      	nop
    }
  }
}
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop

08007134 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007150:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d108      	bne.n	8007174 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007172:	e007      	b.n	8007184 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	60da      	str	r2, [r3, #12]
}
 8007184:	bf00      	nop
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	3b10      	subs	r3, #16
 80071a0:	4a14      	ldr	r2, [pc, #80]	; (80071f4 <DMA_CalcBaseAndBitshift+0x64>)
 80071a2:	fba2 2303 	umull	r2, r3, r2, r3
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80071aa:	4a13      	ldr	r2, [pc, #76]	; (80071f8 <DMA_CalcBaseAndBitshift+0x68>)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d909      	bls.n	80071d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80071c6:	f023 0303 	bic.w	r3, r3, #3
 80071ca:	1d1a      	adds	r2, r3, #4
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	659a      	str	r2, [r3, #88]	; 0x58
 80071d0:	e007      	b.n	80071e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80071da:	f023 0303 	bic.w	r3, r3, #3
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	aaaaaaab 	.word	0xaaaaaaab
 80071f8:	0800c8c8 	.word	0x0800c8c8

080071fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d11f      	bne.n	8007256 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b03      	cmp	r3, #3
 800721a:	d855      	bhi.n	80072c8 <DMA_CheckFifoParam+0xcc>
 800721c:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <DMA_CheckFifoParam+0x28>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	08007235 	.word	0x08007235
 8007228:	08007247 	.word	0x08007247
 800722c:	08007235 	.word	0x08007235
 8007230:	080072c9 	.word	0x080072c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d045      	beq.n	80072cc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007244:	e042      	b.n	80072cc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800724e:	d13f      	bne.n	80072d0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007254:	e03c      	b.n	80072d0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725e:	d121      	bne.n	80072a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b03      	cmp	r3, #3
 8007264:	d836      	bhi.n	80072d4 <DMA_CheckFifoParam+0xd8>
 8007266:	a201      	add	r2, pc, #4	; (adr r2, 800726c <DMA_CheckFifoParam+0x70>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	0800727d 	.word	0x0800727d
 8007270:	08007283 	.word	0x08007283
 8007274:	0800727d 	.word	0x0800727d
 8007278:	08007295 	.word	0x08007295
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	73fb      	strb	r3, [r7, #15]
      break;
 8007280:	e02f      	b.n	80072e2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d024      	beq.n	80072d8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007292:	e021      	b.n	80072d8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800729c:	d11e      	bne.n	80072dc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80072a2:	e01b      	b.n	80072dc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d902      	bls.n	80072b0 <DMA_CheckFifoParam+0xb4>
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d003      	beq.n	80072b6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80072ae:	e018      	b.n	80072e2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	73fb      	strb	r3, [r7, #15]
      break;
 80072b4:	e015      	b.n	80072e2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00e      	beq.n	80072e0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	73fb      	strb	r3, [r7, #15]
      break;
 80072c6:	e00b      	b.n	80072e0 <DMA_CheckFifoParam+0xe4>
      break;
 80072c8:	bf00      	nop
 80072ca:	e00a      	b.n	80072e2 <DMA_CheckFifoParam+0xe6>
      break;
 80072cc:	bf00      	nop
 80072ce:	e008      	b.n	80072e2 <DMA_CheckFifoParam+0xe6>
      break;
 80072d0:	bf00      	nop
 80072d2:	e006      	b.n	80072e2 <DMA_CheckFifoParam+0xe6>
      break;
 80072d4:	bf00      	nop
 80072d6:	e004      	b.n	80072e2 <DMA_CheckFifoParam+0xe6>
      break;
 80072d8:	bf00      	nop
 80072da:	e002      	b.n	80072e2 <DMA_CheckFifoParam+0xe6>
      break;   
 80072dc:	bf00      	nop
 80072de:	e000      	b.n	80072e2 <DMA_CheckFifoParam+0xe6>
      break;
 80072e0:	bf00      	nop
    }
  } 
  
  return status; 
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b089      	sub	sp, #36	; 0x24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007302:	2300      	movs	r3, #0
 8007304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007306:	2300      	movs	r3, #0
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	e165      	b.n	80075d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800730c:	2201      	movs	r2, #1
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	4013      	ands	r3, r2
 800731e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	429a      	cmp	r2, r3
 8007326:	f040 8154 	bne.w	80075d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d00b      	beq.n	800734a <HAL_GPIO_Init+0x5a>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d007      	beq.n	800734a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800733e:	2b11      	cmp	r3, #17
 8007340:	d003      	beq.n	800734a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b12      	cmp	r3, #18
 8007348:	d130      	bne.n	80073ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	2203      	movs	r2, #3
 8007356:	fa02 f303 	lsl.w	r3, r2, r3
 800735a:	43db      	mvns	r3, r3
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	4013      	ands	r3, r2
 8007360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	4313      	orrs	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007380:	2201      	movs	r2, #1
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	fa02 f303 	lsl.w	r3, r2, r3
 8007388:	43db      	mvns	r3, r3
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	4013      	ands	r3, r2
 800738e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	091b      	lsrs	r3, r3, #4
 8007396:	f003 0201 	and.w	r2, r3, #1
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	2203      	movs	r2, #3
 80073b8:	fa02 f303 	lsl.w	r3, r2, r3
 80073bc:	43db      	mvns	r3, r3
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	4013      	ands	r3, r2
 80073c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	fa02 f303 	lsl.w	r3, r2, r3
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d003      	beq.n	80073ec <HAL_GPIO_Init+0xfc>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b12      	cmp	r3, #18
 80073ea:	d123      	bne.n	8007434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	08da      	lsrs	r2, r3, #3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3208      	adds	r2, #8
 80073f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	220f      	movs	r2, #15
 8007404:	fa02 f303 	lsl.w	r3, r2, r3
 8007408:	43db      	mvns	r3, r3
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	4013      	ands	r3, r2
 800740e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	4313      	orrs	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	08da      	lsrs	r2, r3, #3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3208      	adds	r2, #8
 800742e:	69b9      	ldr	r1, [r7, #24]
 8007430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	2203      	movs	r2, #3
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	43db      	mvns	r3, r3
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	4013      	ands	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f003 0203 	and.w	r2, r3, #3
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4313      	orrs	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80ae 	beq.w	80075d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007476:	2300      	movs	r3, #0
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	4a5c      	ldr	r2, [pc, #368]	; (80075ec <HAL_GPIO_Init+0x2fc>)
 800747c:	4b5b      	ldr	r3, [pc, #364]	; (80075ec <HAL_GPIO_Init+0x2fc>)
 800747e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007484:	6453      	str	r3, [r2, #68]	; 0x44
 8007486:	4b59      	ldr	r3, [pc, #356]	; (80075ec <HAL_GPIO_Init+0x2fc>)
 8007488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007492:	4a57      	ldr	r2, [pc, #348]	; (80075f0 <HAL_GPIO_Init+0x300>)
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	089b      	lsrs	r3, r3, #2
 8007498:	3302      	adds	r3, #2
 800749a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	220f      	movs	r2, #15
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	43db      	mvns	r3, r3
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	4013      	ands	r3, r2
 80074b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a4e      	ldr	r2, [pc, #312]	; (80075f4 <HAL_GPIO_Init+0x304>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d025      	beq.n	800750a <HAL_GPIO_Init+0x21a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a4d      	ldr	r2, [pc, #308]	; (80075f8 <HAL_GPIO_Init+0x308>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d01f      	beq.n	8007506 <HAL_GPIO_Init+0x216>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a4c      	ldr	r2, [pc, #304]	; (80075fc <HAL_GPIO_Init+0x30c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d019      	beq.n	8007502 <HAL_GPIO_Init+0x212>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a4b      	ldr	r2, [pc, #300]	; (8007600 <HAL_GPIO_Init+0x310>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d013      	beq.n	80074fe <HAL_GPIO_Init+0x20e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a4a      	ldr	r2, [pc, #296]	; (8007604 <HAL_GPIO_Init+0x314>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00d      	beq.n	80074fa <HAL_GPIO_Init+0x20a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a49      	ldr	r2, [pc, #292]	; (8007608 <HAL_GPIO_Init+0x318>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d007      	beq.n	80074f6 <HAL_GPIO_Init+0x206>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a48      	ldr	r2, [pc, #288]	; (800760c <HAL_GPIO_Init+0x31c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d101      	bne.n	80074f2 <HAL_GPIO_Init+0x202>
 80074ee:	2306      	movs	r3, #6
 80074f0:	e00c      	b.n	800750c <HAL_GPIO_Init+0x21c>
 80074f2:	2307      	movs	r3, #7
 80074f4:	e00a      	b.n	800750c <HAL_GPIO_Init+0x21c>
 80074f6:	2305      	movs	r3, #5
 80074f8:	e008      	b.n	800750c <HAL_GPIO_Init+0x21c>
 80074fa:	2304      	movs	r3, #4
 80074fc:	e006      	b.n	800750c <HAL_GPIO_Init+0x21c>
 80074fe:	2303      	movs	r3, #3
 8007500:	e004      	b.n	800750c <HAL_GPIO_Init+0x21c>
 8007502:	2302      	movs	r3, #2
 8007504:	e002      	b.n	800750c <HAL_GPIO_Init+0x21c>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <HAL_GPIO_Init+0x21c>
 800750a:	2300      	movs	r3, #0
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	f002 0203 	and.w	r2, r2, #3
 8007512:	0092      	lsls	r2, r2, #2
 8007514:	4093      	lsls	r3, r2
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	4313      	orrs	r3, r2
 800751a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800751c:	4934      	ldr	r1, [pc, #208]	; (80075f0 <HAL_GPIO_Init+0x300>)
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	089b      	lsrs	r3, r3, #2
 8007522:	3302      	adds	r3, #2
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800752a:	4b39      	ldr	r3, [pc, #228]	; (8007610 <HAL_GPIO_Init+0x320>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	43db      	mvns	r3, r3
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	4013      	ands	r3, r2
 8007538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800754e:	4a30      	ldr	r2, [pc, #192]	; (8007610 <HAL_GPIO_Init+0x320>)
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007554:	4b2e      	ldr	r3, [pc, #184]	; (8007610 <HAL_GPIO_Init+0x320>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	43db      	mvns	r3, r3
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	4013      	ands	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007578:	4a25      	ldr	r2, [pc, #148]	; (8007610 <HAL_GPIO_Init+0x320>)
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800757e:	4b24      	ldr	r3, [pc, #144]	; (8007610 <HAL_GPIO_Init+0x320>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	43db      	mvns	r3, r3
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	4013      	ands	r3, r2
 800758c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	4313      	orrs	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80075a2:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <HAL_GPIO_Init+0x320>)
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80075a8:	4b19      	ldr	r3, [pc, #100]	; (8007610 <HAL_GPIO_Init+0x320>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	43db      	mvns	r3, r3
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	4013      	ands	r3, r2
 80075b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80075cc:	4a10      	ldr	r2, [pc, #64]	; (8007610 <HAL_GPIO_Init+0x320>)
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	3301      	adds	r3, #1
 80075d6:	61fb      	str	r3, [r7, #28]
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	2b0f      	cmp	r3, #15
 80075dc:	f67f ae96 	bls.w	800730c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80075e0:	bf00      	nop
 80075e2:	3724      	adds	r7, #36	; 0x24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	40023800 	.word	0x40023800
 80075f0:	40013800 	.word	0x40013800
 80075f4:	40020000 	.word	0x40020000
 80075f8:	40020400 	.word	0x40020400
 80075fc:	40020800 	.word	0x40020800
 8007600:	40020c00 	.word	0x40020c00
 8007604:	40021000 	.word	0x40021000
 8007608:	40021400 	.word	0x40021400
 800760c:	40021800 	.word	0x40021800
 8007610:	40013c00 	.word	0x40013c00

08007614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	807b      	strh	r3, [r7, #2]
 8007620:	4613      	mov	r3, r2
 8007622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007624:	787b      	ldrb	r3, [r7, #1]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800762a:	887a      	ldrh	r2, [r7, #2]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007630:	e003      	b.n	800763a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007632:	887b      	ldrh	r3, [r7, #2]
 8007634:	041a      	lsls	r2, r3, #16
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	619a      	str	r2, [r3, #24]
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
	...

08007648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007652:	4b08      	ldr	r3, [pc, #32]	; (8007674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007654:	695a      	ldr	r2, [r3, #20]
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	4013      	ands	r3, r2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d006      	beq.n	800766c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800765e:	4a05      	ldr	r2, [pc, #20]	; (8007674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	4618      	mov	r0, r3
 8007668:	f7fd fb7c 	bl	8004d64 <HAL_GPIO_EXTI_Callback>
  }
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40013c00 	.word	0x40013c00

08007678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007678:	b590      	push	{r4, r7, lr}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e11f      	b.n	80078ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7fe f8ca 	bl	8005838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2224      	movs	r2, #36	; 0x24
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6812      	ldr	r2, [r2, #0]
 80076b4:	6812      	ldr	r2, [r2, #0]
 80076b6:	f022 0201 	bic.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	6812      	ldr	r2, [r2, #0]
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80076dc:	f001 f848 	bl	8008770 <HAL_RCC_GetPCLK1Freq>
 80076e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4a7b      	ldr	r2, [pc, #492]	; (80078d4 <HAL_I2C_Init+0x25c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d807      	bhi.n	80076fc <HAL_I2C_Init+0x84>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4a7a      	ldr	r2, [pc, #488]	; (80078d8 <HAL_I2C_Init+0x260>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	bf94      	ite	ls
 80076f4:	2301      	movls	r3, #1
 80076f6:	2300      	movhi	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	e006      	b.n	800770a <HAL_I2C_Init+0x92>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4a77      	ldr	r2, [pc, #476]	; (80078dc <HAL_I2C_Init+0x264>)
 8007700:	4293      	cmp	r3, r2
 8007702:	bf94      	ite	ls
 8007704:	2301      	movls	r3, #1
 8007706:	2300      	movhi	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e0db      	b.n	80078ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a72      	ldr	r2, [pc, #456]	; (80078e0 <HAL_I2C_Init+0x268>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	0c9b      	lsrs	r3, r3, #18
 800771c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	6852      	ldr	r2, [r2, #4]
 8007728:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	430a      	orrs	r2, r1
 8007730:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4863      	ldr	r0, [pc, #396]	; (80078d4 <HAL_I2C_Init+0x25c>)
 8007746:	4283      	cmp	r3, r0
 8007748:	d802      	bhi.n	8007750 <HAL_I2C_Init+0xd8>
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	3301      	adds	r3, #1
 800774e:	e009      	b.n	8007764 <HAL_I2C_Init+0xec>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007756:	fb00 f303 	mul.w	r3, r0, r3
 800775a:	4862      	ldr	r0, [pc, #392]	; (80078e4 <HAL_I2C_Init+0x26c>)
 800775c:	fba0 0303 	umull	r0, r3, r0, r3
 8007760:	099b      	lsrs	r3, r3, #6
 8007762:	3301      	adds	r3, #1
 8007764:	430b      	orrs	r3, r1
 8007766:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007776:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	4955      	ldr	r1, [pc, #340]	; (80078d4 <HAL_I2C_Init+0x25c>)
 8007780:	428b      	cmp	r3, r1
 8007782:	d80d      	bhi.n	80077a0 <HAL_I2C_Init+0x128>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	1e59      	subs	r1, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007792:	3301      	adds	r3, #1
 8007794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007798:	2b04      	cmp	r3, #4
 800779a:	bf38      	it	cc
 800779c:	2304      	movcc	r3, #4
 800779e:	e04f      	b.n	8007840 <HAL_I2C_Init+0x1c8>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d111      	bne.n	80077cc <HAL_I2C_Init+0x154>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	1e5c      	subs	r4, r3, #1
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6859      	ldr	r1, [r3, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	440b      	add	r3, r1
 80077b6:	fbb4 f3f3 	udiv	r3, r4, r3
 80077ba:	3301      	adds	r3, #1
 80077bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	bf0c      	ite	eq
 80077c4:	2301      	moveq	r3, #1
 80077c6:	2300      	movne	r3, #0
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	e012      	b.n	80077f2 <HAL_I2C_Init+0x17a>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	1e5c      	subs	r4, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6859      	ldr	r1, [r3, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	0099      	lsls	r1, r3, #2
 80077dc:	440b      	add	r3, r1
 80077de:	fbb4 f3f3 	udiv	r3, r4, r3
 80077e2:	3301      	adds	r3, #1
 80077e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bf0c      	ite	eq
 80077ec:	2301      	moveq	r3, #1
 80077ee:	2300      	movne	r3, #0
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <HAL_I2C_Init+0x182>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e022      	b.n	8007840 <HAL_I2C_Init+0x1c8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10e      	bne.n	8007820 <HAL_I2C_Init+0x1a8>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	1e5c      	subs	r4, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6859      	ldr	r1, [r3, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	440b      	add	r3, r1
 8007810:	fbb4 f3f3 	udiv	r3, r4, r3
 8007814:	3301      	adds	r3, #1
 8007816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800781a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800781e:	e00f      	b.n	8007840 <HAL_I2C_Init+0x1c8>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	1e5c      	subs	r4, r3, #1
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6859      	ldr	r1, [r3, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	440b      	add	r3, r1
 800782e:	0099      	lsls	r1, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	fbb4 f3f3 	udiv	r3, r4, r3
 8007836:	3301      	adds	r3, #1
 8007838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800783c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007840:	4313      	orrs	r3, r2
 8007842:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6812      	ldr	r2, [r2, #0]
 800784c:	6812      	ldr	r2, [r2, #0]
 800784e:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	69d0      	ldr	r0, [r2, #28]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	6a12      	ldr	r2, [r2, #32]
 800785a:	4302      	orrs	r2, r0
 800785c:	430a      	orrs	r2, r1
 800785e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800786e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	6908      	ldr	r0, [r1, #16]
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	68c9      	ldr	r1, [r1, #12]
 800787a:	4301      	orrs	r1, r0
 800787c:	430b      	orrs	r3, r1
 800787e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	68d2      	ldr	r2, [r2, #12]
 800788a:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6950      	ldr	r0, [r2, #20]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6992      	ldr	r2, [r2, #24]
 8007896:	4302      	orrs	r2, r0
 8007898:	430a      	orrs	r2, r1
 800789a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	6812      	ldr	r2, [r2, #0]
 80078a4:	6812      	ldr	r2, [r2, #0]
 80078a6:	f042 0201 	orr.w	r2, r2, #1
 80078aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd90      	pop	{r4, r7, pc}
 80078d2:	bf00      	nop
 80078d4:	000186a0 	.word	0x000186a0
 80078d8:	001e847f 	.word	0x001e847f
 80078dc:	003d08ff 	.word	0x003d08ff
 80078e0:	431bde83 	.word	0x431bde83
 80078e4:	10624dd3 	.word	0x10624dd3

080078e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	607a      	str	r2, [r7, #4]
 80078f2:	461a      	mov	r2, r3
 80078f4:	460b      	mov	r3, r1
 80078f6:	817b      	strh	r3, [r7, #10]
 80078f8:	4613      	mov	r3, r2
 80078fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078fc:	f7fe fc5e 	bl	80061bc <HAL_GetTick>
 8007900:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b20      	cmp	r3, #32
 800790c:	f040 80e0 	bne.w	8007ad0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	2319      	movs	r3, #25
 8007916:	2201      	movs	r2, #1
 8007918:	4970      	ldr	r1, [pc, #448]	; (8007adc <HAL_I2C_Master_Transmit+0x1f4>)
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 fc58 	bl	80081d0 <I2C_WaitOnFlagUntilTimeout>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007926:	2302      	movs	r3, #2
 8007928:	e0d3      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_I2C_Master_Transmit+0x50>
 8007934:	2302      	movs	r3, #2
 8007936:	e0cc      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x1ea>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b01      	cmp	r3, #1
 800794c:	d007      	beq.n	800795e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	6812      	ldr	r2, [r2, #0]
 8007958:	f042 0201 	orr.w	r2, r2, #1
 800795c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	6812      	ldr	r2, [r2, #0]
 8007966:	6812      	ldr	r2, [r2, #0]
 8007968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800796c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2221      	movs	r2, #33	; 0x21
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2210      	movs	r2, #16
 800797a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	893a      	ldrh	r2, [r7, #8]
 800798e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007994:	b29a      	uxth	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4a50      	ldr	r2, [pc, #320]	; (8007ae0 <HAL_I2C_Master_Transmit+0x1f8>)
 800799e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80079a0:	8979      	ldrh	r1, [r7, #10]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	6a3a      	ldr	r2, [r7, #32]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 fac2 	bl	8007f30 <I2C_MasterRequestWrite>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e08d      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80079cc:	e066      	b.n	8007a9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	6a39      	ldr	r1, [r7, #32]
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 fcd2 	bl	800837c <I2C_WaitOnTXEFlagUntilTimeout>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00d      	beq.n	80079fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d107      	bne.n	80079f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e06b      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d11b      	bne.n	8007a70 <HAL_I2C_Master_Transmit+0x188>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d017      	beq.n	8007a70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a48:	7812      	ldrb	r2, [r2, #0]
 8007a4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	6a39      	ldr	r1, [r7, #32]
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fcc2 	bl	80083fe <I2C_WaitOnBTFFlagUntilTimeout>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00d      	beq.n	8007a9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	d107      	bne.n	8007a98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e01a      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d194      	bne.n	80079ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	6812      	ldr	r2, [r2, #0]
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	e000      	b.n	8007ad2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007ad0:	2302      	movs	r3, #2
  }
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3718      	adds	r7, #24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	00100002 	.word	0x00100002
 8007ae0:	ffff0000 	.word	0xffff0000

08007ae4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08c      	sub	sp, #48	; 0x30
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	461a      	mov	r2, r3
 8007af0:	460b      	mov	r3, r1
 8007af2:	817b      	strh	r3, [r7, #10]
 8007af4:	4613      	mov	r3, r2
 8007af6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007af8:	f7fe fb60 	bl	80061bc <HAL_GetTick>
 8007afc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	f040 820b 	bne.w	8007f22 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	2319      	movs	r3, #25
 8007b12:	2201      	movs	r2, #1
 8007b14:	497c      	ldr	r1, [pc, #496]	; (8007d08 <HAL_I2C_Master_Receive+0x224>)
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fb5a 	bl	80081d0 <I2C_WaitOnFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
 8007b24:	e1fe      	b.n	8007f24 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_I2C_Master_Receive+0x50>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e1f7      	b.n	8007f24 <HAL_I2C_Master_Receive+0x440>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d007      	beq.n	8007b5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	6812      	ldr	r2, [r2, #0]
 8007b52:	6812      	ldr	r2, [r2, #0]
 8007b54:	f042 0201 	orr.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	6812      	ldr	r2, [r2, #0]
 8007b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2222      	movs	r2, #34	; 0x22
 8007b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2210      	movs	r2, #16
 8007b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	893a      	ldrh	r2, [r7, #8]
 8007b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4a5c      	ldr	r2, [pc, #368]	; (8007d0c <HAL_I2C_Master_Receive+0x228>)
 8007b9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007b9c:	8979      	ldrh	r1, [r7, #10]
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fa46 	bl	8008034 <I2C_MasterRequestRead>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e1b8      	b.n	8007f24 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d113      	bne.n	8007be2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	623b      	str	r3, [r7, #32]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	623b      	str	r3, [r7, #32]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	623b      	str	r3, [r7, #32]
 8007bce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	6812      	ldr	r2, [r2, #0]
 8007bd8:	6812      	ldr	r2, [r2, #0]
 8007bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	e18c      	b.n	8007efc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d11b      	bne.n	8007c22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	6812      	ldr	r2, [r2, #0]
 8007bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61fb      	str	r3, [r7, #28]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	61fb      	str	r3, [r7, #28]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	61fb      	str	r3, [r7, #28]
 8007c0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	6812      	ldr	r2, [r2, #0]
 8007c18:	6812      	ldr	r2, [r2, #0]
 8007c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	e16c      	b.n	8007efc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d11b      	bne.n	8007c62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	6812      	ldr	r2, [r2, #0]
 8007c32:	6812      	ldr	r2, [r2, #0]
 8007c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	6812      	ldr	r2, [r2, #0]
 8007c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61bb      	str	r3, [r7, #24]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	61bb      	str	r3, [r7, #24]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	61bb      	str	r3, [r7, #24]
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	e14c      	b.n	8007efc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	6812      	ldr	r2, [r2, #0]
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c72:	2300      	movs	r3, #0
 8007c74:	617b      	str	r3, [r7, #20]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c88:	e138      	b.n	8007efc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	f200 80f1 	bhi.w	8007e76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d123      	bne.n	8007ce4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fbed 	bl	8008480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e139      	b.n	8007f24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	6812      	ldr	r2, [r2, #0]
 8007cb8:	6912      	ldr	r2, [r2, #16]
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ce2:	e10b      	b.n	8007efc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d14e      	bne.n	8007d8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4906      	ldr	r1, [pc, #24]	; (8007d10 <HAL_I2C_Master_Receive+0x22c>)
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 fa6a 	bl	80081d0 <I2C_WaitOnFlagUntilTimeout>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d008      	beq.n	8007d14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e10e      	b.n	8007f24 <HAL_I2C_Master_Receive+0x440>
 8007d06:	bf00      	nop
 8007d08:	00100002 	.word	0x00100002
 8007d0c:	ffff0000 	.word	0xffff0000
 8007d10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	6812      	ldr	r2, [r2, #0]
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	6812      	ldr	r2, [r2, #0]
 8007d2c:	6912      	ldr	r2, [r2, #16]
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	6912      	ldr	r2, [r2, #16]
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d88:	e0b8      	b.n	8007efc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	2200      	movs	r2, #0
 8007d92:	4966      	ldr	r1, [pc, #408]	; (8007f2c <HAL_I2C_Master_Receive+0x448>)
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 fa1b 	bl	80081d0 <I2C_WaitOnFlagUntilTimeout>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e0bf      	b.n	8007f24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	6812      	ldr	r2, [r2, #0]
 8007dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007db2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	6912      	ldr	r2, [r2, #16]
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	2200      	movs	r2, #0
 8007dee:	494f      	ldr	r1, [pc, #316]	; (8007f2c <HAL_I2C_Master_Receive+0x448>)
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f9ed 	bl	80081d0 <I2C_WaitOnFlagUntilTimeout>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e091      	b.n	8007f24 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	6812      	ldr	r2, [r2, #0]
 8007e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	6812      	ldr	r2, [r2, #0]
 8007e18:	6912      	ldr	r2, [r2, #16]
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	6912      	ldr	r2, [r2, #16]
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e74:	e042      	b.n	8007efc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 fb00 	bl	8008480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e04c      	b.n	8007f24 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	6912      	ldr	r2, [r2, #16]
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d118      	bne.n	8007efc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	6912      	ldr	r2, [r2, #16]
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f47f aec2 	bne.w	8007c8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e000      	b.n	8007f24 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007f22:	2302      	movs	r3, #2
  }
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3728      	adds	r7, #40	; 0x28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	00010004 	.word	0x00010004

08007f30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	607a      	str	r2, [r7, #4]
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d006      	beq.n	8007f5a <I2C_MasterRequestWrite+0x2a>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d003      	beq.n	8007f5a <I2C_MasterRequestWrite+0x2a>
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f58:	d108      	bne.n	8007f6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	e00b      	b.n	8007f84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	2b12      	cmp	r3, #18
 8007f72:	d107      	bne.n	8007f84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	6812      	ldr	r2, [r2, #0]
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f91d 	bl	80081d0 <I2C_WaitOnFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00d      	beq.n	8007fb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007faa:	d103      	bne.n	8007fb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e034      	b.n	8008022 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fc0:	d107      	bne.n	8007fd2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	897a      	ldrh	r2, [r7, #10]
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007fce:	611a      	str	r2, [r3, #16]
 8007fd0:	e01b      	b.n	800800a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	897a      	ldrh	r2, [r7, #10]
 8007fd8:	11d2      	asrs	r2, r2, #7
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	f002 0206 	and.w	r2, r2, #6
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	f062 020f 	orn	r2, r2, #15
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	490f      	ldr	r1, [pc, #60]	; (800802c <I2C_MasterRequestWrite+0xfc>)
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 f944 	bl	800827e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e010      	b.n	8008022 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	897a      	ldrh	r2, [r7, #10]
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	4908      	ldr	r1, [pc, #32]	; (8008030 <I2C_MasterRequestWrite+0x100>)
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 f934 	bl	800827e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e000      	b.n	8008022 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	00010008 	.word	0x00010008
 8008030:	00010002 	.word	0x00010002

08008034 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af02      	add	r7, sp, #8
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	607a      	str	r2, [r7, #4]
 800803e:	603b      	str	r3, [r7, #0]
 8008040:	460b      	mov	r3, r1
 8008042:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	6812      	ldr	r2, [r2, #0]
 8008052:	6812      	ldr	r2, [r2, #0]
 8008054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008058:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b08      	cmp	r3, #8
 800805e:	d006      	beq.n	800806e <I2C_MasterRequestRead+0x3a>
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d003      	beq.n	800806e <I2C_MasterRequestRead+0x3a>
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800806c:	d108      	bne.n	8008080 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	6812      	ldr	r2, [r2, #0]
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	e00b      	b.n	8008098 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	2b11      	cmp	r3, #17
 8008086:	d107      	bne.n	8008098 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	6812      	ldr	r2, [r2, #0]
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008096:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 f893 	bl	80081d0 <I2C_WaitOnFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00d      	beq.n	80080cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080be:	d103      	bne.n	80080c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e079      	b.n	80081c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080d4:	d108      	bne.n	80080e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	897a      	ldrh	r2, [r7, #10]
 80080dc:	b2d2      	uxtb	r2, r2
 80080de:	f042 0201 	orr.w	r2, r2, #1
 80080e2:	b2d2      	uxtb	r2, r2
 80080e4:	611a      	str	r2, [r3, #16]
 80080e6:	e05f      	b.n	80081a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	897a      	ldrh	r2, [r7, #10]
 80080ee:	11d2      	asrs	r2, r2, #7
 80080f0:	b2d2      	uxtb	r2, r2
 80080f2:	f002 0206 	and.w	r2, r2, #6
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	f062 020f 	orn	r2, r2, #15
 80080fc:	b2d2      	uxtb	r2, r2
 80080fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	4930      	ldr	r1, [pc, #192]	; (80081c8 <I2C_MasterRequestRead+0x194>)
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f8b9 	bl	800827e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e054      	b.n	80081c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	897a      	ldrh	r2, [r7, #10]
 800811c:	b2d2      	uxtb	r2, r2
 800811e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4929      	ldr	r1, [pc, #164]	; (80081cc <I2C_MasterRequestRead+0x198>)
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 f8a9 	bl	800827e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e044      	b.n	80081c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008136:	2300      	movs	r3, #0
 8008138:	613b      	str	r3, [r7, #16]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	613b      	str	r3, [r7, #16]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	6812      	ldr	r2, [r2, #0]
 8008154:	6812      	ldr	r2, [r2, #0]
 8008156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800815a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 f831 	bl	80081d0 <I2C_WaitOnFlagUntilTimeout>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00d      	beq.n	8008190 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008182:	d103      	bne.n	800818c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800818a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e017      	b.n	80081c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	897a      	ldrh	r2, [r7, #10]
 8008196:	11d2      	asrs	r2, r2, #7
 8008198:	b2d2      	uxtb	r2, r2
 800819a:	f002 0206 	and.w	r2, r2, #6
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	f062 020e 	orn	r2, r2, #14
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	4907      	ldr	r1, [pc, #28]	; (80081cc <I2C_MasterRequestRead+0x198>)
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f865 	bl	800827e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e000      	b.n	80081c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	00010008 	.word	0x00010008
 80081cc:	00010002 	.word	0x00010002

080081d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	4613      	mov	r3, r2
 80081de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081e0:	e025      	b.n	800822e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e8:	d021      	beq.n	800822e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ea:	f7fd ffe7 	bl	80061bc <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	1ad2      	subs	r2, r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d802      	bhi.n	8008200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d116      	bne.n	800822e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2220      	movs	r2, #32
 800820a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	f043 0220 	orr.w	r2, r3, #32
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e023      	b.n	8008276 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	0c1b      	lsrs	r3, r3, #16
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b01      	cmp	r3, #1
 8008236:	d10d      	bne.n	8008254 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	43da      	mvns	r2, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	4013      	ands	r3, r2
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	bf0c      	ite	eq
 800824a:	2301      	moveq	r3, #1
 800824c:	2300      	movne	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	461a      	mov	r2, r3
 8008252:	e00c      	b.n	800826e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	43da      	mvns	r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	4013      	ands	r3, r2
 8008260:	b29b      	uxth	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	bf0c      	ite	eq
 8008266:	2301      	moveq	r3, #1
 8008268:	2300      	movne	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	461a      	mov	r2, r3
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	429a      	cmp	r2, r3
 8008272:	d0b6      	beq.n	80081e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800828c:	e051      	b.n	8008332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800829c:	d123      	bne.n	80082e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	6812      	ldr	r2, [r2, #0]
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f043 0204 	orr.w	r2, r3, #4
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e046      	b.n	8008374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ec:	d021      	beq.n	8008332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ee:	f7fd ff65 	bl	80061bc <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	1ad2      	subs	r2, r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d802      	bhi.n	8008304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d116      	bne.n	8008332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2220      	movs	r2, #32
 800830e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	f043 0220 	orr.w	r2, r3, #32
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e020      	b.n	8008374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	0c1b      	lsrs	r3, r3, #16
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b01      	cmp	r3, #1
 800833a:	d10c      	bne.n	8008356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	43da      	mvns	r2, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	4013      	ands	r3, r2
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	bf14      	ite	ne
 800834e:	2301      	movne	r3, #1
 8008350:	2300      	moveq	r3, #0
 8008352:	b2db      	uxtb	r3, r3
 8008354:	e00b      	b.n	800836e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	43da      	mvns	r2, r3
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	4013      	ands	r3, r2
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	bf14      	ite	ne
 8008368:	2301      	movne	r3, #1
 800836a:	2300      	moveq	r3, #0
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d18d      	bne.n	800828e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008388:	e02d      	b.n	80083e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f8ce 	bl	800852c <I2C_IsAcknowledgeFailed>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e02d      	b.n	80083f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a0:	d021      	beq.n	80083e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a2:	f7fd ff0b 	bl	80061bc <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d802      	bhi.n	80083b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d116      	bne.n	80083e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2220      	movs	r2, #32
 80083c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	f043 0220 	orr.w	r2, r3, #32
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e007      	b.n	80083f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083f0:	2b80      	cmp	r3, #128	; 0x80
 80083f2:	d1ca      	bne.n	800838a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b084      	sub	sp, #16
 8008402:	af00      	add	r7, sp, #0
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800840a:	e02d      	b.n	8008468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f88d 	bl	800852c <I2C_IsAcknowledgeFailed>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e02d      	b.n	8008478 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008422:	d021      	beq.n	8008468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008424:	f7fd feca 	bl	80061bc <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	1ad2      	subs	r2, r2, r3
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	429a      	cmp	r2, r3
 8008432:	d802      	bhi.n	800843a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d116      	bne.n	8008468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008454:	f043 0220 	orr.w	r2, r3, #32
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e007      	b.n	8008478 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b04      	cmp	r3, #4
 8008474:	d1ca      	bne.n	800840c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800848c:	e042      	b.n	8008514 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b10      	cmp	r3, #16
 800849a:	d119      	bne.n	80084d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f06f 0210 	mvn.w	r2, #16
 80084a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e029      	b.n	8008524 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084d0:	f7fd fe74 	bl	80061bc <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	1ad2      	subs	r2, r2, r3
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d802      	bhi.n	80084e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d116      	bne.n	8008514 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	f043 0220 	orr.w	r2, r3, #32
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	e007      	b.n	8008524 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851e:	2b40      	cmp	r3, #64	; 0x40
 8008520:	d1b5      	bne.n	800848e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800853e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008542:	d11b      	bne.n	800857c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800854c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2220      	movs	r2, #32
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008568:	f043 0204 	orr.w	r2, r3, #4
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e000      	b.n	800857e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
	...

0800858c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e0cc      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085a0:	4b68      	ldr	r3, [pc, #416]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 020f 	and.w	r2, r3, #15
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d20c      	bcs.n	80085c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ae:	4b65      	ldr	r3, [pc, #404]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085b6:	4b63      	ldr	r3, [pc, #396]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 020f 	and.w	r2, r3, #15
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d001      	beq.n	80085c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0b8      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d020      	beq.n	8008616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085e0:	4a59      	ldr	r2, [pc, #356]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085e2:	4b59      	ldr	r3, [pc, #356]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085f8:	4a53      	ldr	r2, [pc, #332]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085fa:	4b53      	ldr	r3, [pc, #332]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008604:	4950      	ldr	r1, [pc, #320]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008606:	4b50      	ldr	r3, [pc, #320]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	4313      	orrs	r3, r2
 8008614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d044      	beq.n	80086ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d107      	bne.n	800863a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800862a:	4b47      	ldr	r3, [pc, #284]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d119      	bne.n	800866a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e07f      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b02      	cmp	r3, #2
 8008640:	d003      	beq.n	800864a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008646:	2b03      	cmp	r3, #3
 8008648:	d107      	bne.n	800865a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800864a:	4b3f      	ldr	r3, [pc, #252]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d109      	bne.n	800866a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e06f      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800865a:	4b3b      	ldr	r3, [pc, #236]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e067      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800866a:	4937      	ldr	r1, [pc, #220]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800866c:	4b36      	ldr	r3, [pc, #216]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	f023 0203 	bic.w	r2, r3, #3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	4313      	orrs	r3, r2
 800867a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800867c:	f7fd fd9e 	bl	80061bc <HAL_GetTick>
 8008680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008682:	e00a      	b.n	800869a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008684:	f7fd fd9a 	bl	80061bc <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008692:	4293      	cmp	r3, r2
 8008694:	d901      	bls.n	800869a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e04f      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800869a:	4b2b      	ldr	r3, [pc, #172]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 020c 	and.w	r2, r3, #12
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d1eb      	bne.n	8008684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086ac:	4b25      	ldr	r3, [pc, #148]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 020f 	and.w	r2, r3, #15
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d90c      	bls.n	80086d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ba:	4b22      	ldr	r3, [pc, #136]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c2:	4b20      	ldr	r3, [pc, #128]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 020f 	and.w	r2, r3, #15
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d001      	beq.n	80086d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e032      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d008      	beq.n	80086f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086e0:	4919      	ldr	r1, [pc, #100]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80086e2:	4b19      	ldr	r3, [pc, #100]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d009      	beq.n	8008712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086fe:	4912      	ldr	r1, [pc, #72]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008700:	4b11      	ldr	r3, [pc, #68]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	4313      	orrs	r3, r2
 8008710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008712:	f000 f855 	bl	80087c0 <HAL_RCC_GetSysClockFreq>
 8008716:	4601      	mov	r1, r0
 8008718:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	091b      	lsrs	r3, r3, #4
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	4a0a      	ldr	r2, [pc, #40]	; (800874c <HAL_RCC_ClockConfig+0x1c0>)
 8008724:	5cd3      	ldrb	r3, [r2, r3]
 8008726:	fa21 f303 	lsr.w	r3, r1, r3
 800872a:	4a09      	ldr	r2, [pc, #36]	; (8008750 <HAL_RCC_ClockConfig+0x1c4>)
 800872c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <HAL_RCC_ClockConfig+0x1c8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd fcfe 	bl	8006134 <HAL_InitTick>

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	40023c00 	.word	0x40023c00
 8008748:	40023800 	.word	0x40023800
 800874c:	0800c8b0 	.word	0x0800c8b0
 8008750:	20000044 	.word	0x20000044
 8008754:	20000048 	.word	0x20000048

08008758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800875c:	4b03      	ldr	r3, [pc, #12]	; (800876c <HAL_RCC_GetHCLKFreq+0x14>)
 800875e:	681b      	ldr	r3, [r3, #0]
}
 8008760:	4618      	mov	r0, r3
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	20000044 	.word	0x20000044

08008770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008774:	f7ff fff0 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 8008778:	4601      	mov	r1, r0
 800877a:	4b05      	ldr	r3, [pc, #20]	; (8008790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	0a9b      	lsrs	r3, r3, #10
 8008780:	f003 0307 	and.w	r3, r3, #7
 8008784:	4a03      	ldr	r2, [pc, #12]	; (8008794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008786:	5cd3      	ldrb	r3, [r2, r3]
 8008788:	fa21 f303 	lsr.w	r3, r1, r3
}
 800878c:	4618      	mov	r0, r3
 800878e:	bd80      	pop	{r7, pc}
 8008790:	40023800 	.word	0x40023800
 8008794:	0800c8c0 	.word	0x0800c8c0

08008798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800879c:	f7ff ffdc 	bl	8008758 <HAL_RCC_GetHCLKFreq>
 80087a0:	4601      	mov	r1, r0
 80087a2:	4b05      	ldr	r3, [pc, #20]	; (80087b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	0b5b      	lsrs	r3, r3, #13
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	4a03      	ldr	r2, [pc, #12]	; (80087bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80087ae:	5cd3      	ldrb	r3, [r2, r3]
 80087b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	40023800 	.word	0x40023800
 80087bc:	0800c8c0 	.word	0x0800c8c0

080087c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	b0a1      	sub	sp, #132	; 0x84
 80087c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80087dc:	4ba0      	ldr	r3, [pc, #640]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f003 030c 	and.w	r3, r3, #12
 80087e4:	2b0c      	cmp	r3, #12
 80087e6:	f200 8193 	bhi.w	8008b10 <HAL_RCC_GetSysClockFreq+0x350>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <HAL_RCC_GetSysClockFreq+0x30>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	08008825 	.word	0x08008825
 80087f4:	08008b11 	.word	0x08008b11
 80087f8:	08008b11 	.word	0x08008b11
 80087fc:	08008b11 	.word	0x08008b11
 8008800:	0800882b 	.word	0x0800882b
 8008804:	08008b11 	.word	0x08008b11
 8008808:	08008b11 	.word	0x08008b11
 800880c:	08008b11 	.word	0x08008b11
 8008810:	08008831 	.word	0x08008831
 8008814:	08008b11 	.word	0x08008b11
 8008818:	08008b11 	.word	0x08008b11
 800881c:	08008b11 	.word	0x08008b11
 8008820:	080089ad 	.word	0x080089ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008824:	4b8f      	ldr	r3, [pc, #572]	; (8008a64 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8008826:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8008828:	e175      	b.n	8008b16 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800882a:	4b8f      	ldr	r3, [pc, #572]	; (8008a68 <HAL_RCC_GetSysClockFreq+0x2a8>)
 800882c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800882e:	e172      	b.n	8008b16 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008830:	4b8b      	ldr	r3, [pc, #556]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008838:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800883a:	4b89      	ldr	r3, [pc, #548]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d056      	beq.n	80088f4 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008846:	4b86      	ldr	r3, [pc, #536]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	099b      	lsrs	r3, r3, #6
 800884c:	f04f 0400 	mov.w	r4, #0
 8008850:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008854:	f04f 0200 	mov.w	r2, #0
 8008858:	ea01 0103 	and.w	r1, r1, r3
 800885c:	ea02 0204 	and.w	r2, r2, r4
 8008860:	460b      	mov	r3, r1
 8008862:	4614      	mov	r4, r2
 8008864:	0160      	lsls	r0, r4, #5
 8008866:	6678      	str	r0, [r7, #100]	; 0x64
 8008868:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800886a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800886e:	6678      	str	r0, [r7, #100]	; 0x64
 8008870:	015b      	lsls	r3, r3, #5
 8008872:	663b      	str	r3, [r7, #96]	; 0x60
 8008874:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8008878:	1a5b      	subs	r3, r3, r1
 800887a:	eb64 0402 	sbc.w	r4, r4, r2
 800887e:	01a0      	lsls	r0, r4, #6
 8008880:	65f8      	str	r0, [r7, #92]	; 0x5c
 8008882:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008884:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8008888:	65f8      	str	r0, [r7, #92]	; 0x5c
 800888a:	0198      	lsls	r0, r3, #6
 800888c:	65b8      	str	r0, [r7, #88]	; 0x58
 800888e:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8008892:	1aed      	subs	r5, r5, r3
 8008894:	eb66 0604 	sbc.w	r6, r6, r4
 8008898:	4633      	mov	r3, r6
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	657b      	str	r3, [r7, #84]	; 0x54
 800889e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a0:	4628      	mov	r0, r5
 80088a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80088a6:	657b      	str	r3, [r7, #84]	; 0x54
 80088a8:	462b      	mov	r3, r5
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	653b      	str	r3, [r7, #80]	; 0x50
 80088ae:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80088b2:	461d      	mov	r5, r3
 80088b4:	4626      	mov	r6, r4
 80088b6:	186b      	adds	r3, r5, r1
 80088b8:	eb46 0402 	adc.w	r4, r6, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	4621      	mov	r1, r4
 80088c0:	460b      	mov	r3, r1
 80088c2:	025b      	lsls	r3, r3, #9
 80088c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c8:	4602      	mov	r2, r0
 80088ca:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 80088ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d0:	4603      	mov	r3, r0
 80088d2:	025b      	lsls	r3, r3, #9
 80088d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80088d6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80088da:	4618      	mov	r0, r3
 80088dc:	4621      	mov	r1, r4
 80088de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088e0:	f04f 0400 	mov.w	r4, #0
 80088e4:	461a      	mov	r2, r3
 80088e6:	4623      	mov	r3, r4
 80088e8:	f7f8 f904 	bl	8000af4 <__aeabi_uldivmod>
 80088ec:	4603      	mov	r3, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088f2:	e04d      	b.n	8008990 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088f4:	4b5a      	ldr	r3, [pc, #360]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	099b      	lsrs	r3, r3, #6
 80088fa:	f04f 0400 	mov.w	r4, #0
 80088fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008902:	f04f 0200 	mov.w	r2, #0
 8008906:	ea01 0103 	and.w	r1, r1, r3
 800890a:	ea02 0204 	and.w	r2, r2, r4
 800890e:	460b      	mov	r3, r1
 8008910:	4614      	mov	r4, r2
 8008912:	0160      	lsls	r0, r4, #5
 8008914:	6478      	str	r0, [r7, #68]	; 0x44
 8008916:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008918:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800891c:	6478      	str	r0, [r7, #68]	; 0x44
 800891e:	015b      	lsls	r3, r3, #5
 8008920:	643b      	str	r3, [r7, #64]	; 0x40
 8008922:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8008926:	1a5b      	subs	r3, r3, r1
 8008928:	eb64 0402 	sbc.w	r4, r4, r2
 800892c:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8008930:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8008934:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8008938:	ebba 0a03 	subs.w	sl, sl, r3
 800893c:	eb6b 0b04 	sbc.w	fp, fp, r4
 8008940:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008948:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800894e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008952:	63bb      	str	r3, [r7, #56]	; 0x38
 8008954:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8008958:	eb1a 0a01 	adds.w	sl, sl, r1
 800895c:	eb4b 0b02 	adc.w	fp, fp, r2
 8008960:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
 8008966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008968:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 800896c:	637b      	str	r3, [r7, #52]	; 0x34
 800896e:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8008972:	633b      	str	r3, [r7, #48]	; 0x30
 8008974:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008978:	4650      	mov	r0, sl
 800897a:	4659      	mov	r1, fp
 800897c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800897e:	f04f 0400 	mov.w	r4, #0
 8008982:	461a      	mov	r2, r3
 8008984:	4623      	mov	r3, r4
 8008986:	f7f8 f8b5 	bl	8000af4 <__aeabi_uldivmod>
 800898a:	4603      	mov	r3, r0
 800898c:	460c      	mov	r4, r1
 800898e:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008990:	4b33      	ldr	r3, [pc, #204]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	0c1b      	lsrs	r3, r3, #16
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	3301      	adds	r3, #1
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 80089a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80089a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a8:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80089aa:	e0b4      	b.n	8008b16 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089ac:	4b2c      	ldr	r3, [pc, #176]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089b4:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089b6:	4b2a      	ldr	r3, [pc, #168]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d054      	beq.n	8008a6c <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089c2:	4b27      	ldr	r3, [pc, #156]	; (8008a60 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	099b      	lsrs	r3, r3, #6
 80089c8:	f04f 0400 	mov.w	r4, #0
 80089cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	ea01 0103 	and.w	r1, r1, r3
 80089d8:	ea02 0204 	and.w	r2, r2, r4
 80089dc:	460b      	mov	r3, r1
 80089de:	4614      	mov	r4, r2
 80089e0:	0160      	lsls	r0, r4, #5
 80089e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80089e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089e6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80089ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80089ec:	015b      	lsls	r3, r3, #5
 80089ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80089f0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80089f4:	1a5b      	subs	r3, r3, r1
 80089f6:	eb64 0402 	sbc.w	r4, r4, r2
 80089fa:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80089fe:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8008a02:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8008a06:	ebb8 0803 	subs.w	r8, r8, r3
 8008a0a:	eb69 0904 	sbc.w	r9, r9, r4
 8008a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a1c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8008a20:	623b      	str	r3, [r7, #32]
 8008a22:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008a26:	eb18 0801 	adds.w	r8, r8, r1
 8008a2a:	eb49 0902 	adc.w	r9, r9, r2
 8008a2e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8008a32:	61fb      	str	r3, [r7, #28]
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8008a40:	61bb      	str	r3, [r7, #24]
 8008a42:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8008a46:	4640      	mov	r0, r8
 8008a48:	4649      	mov	r1, r9
 8008a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a4c:	f04f 0400 	mov.w	r4, #0
 8008a50:	461a      	mov	r2, r3
 8008a52:	4623      	mov	r3, r4
 8008a54:	f7f8 f84e 	bl	8000af4 <__aeabi_uldivmod>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a5e:	e04b      	b.n	8008af8 <HAL_RCC_GetSysClockFreq+0x338>
 8008a60:	40023800 	.word	0x40023800
 8008a64:	00f42400 	.word	0x00f42400
 8008a68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a6c:	4b2d      	ldr	r3, [pc, #180]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x364>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	099b      	lsrs	r3, r3, #6
 8008a72:	f04f 0400 	mov.w	r4, #0
 8008a76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	ea01 0103 	and.w	r1, r1, r3
 8008a82:	ea02 0204 	and.w	r2, r2, r4
 8008a86:	460b      	mov	r3, r1
 8008a88:	4614      	mov	r4, r2
 8008a8a:	0160      	lsls	r0, r4, #5
 8008a8c:	6178      	str	r0, [r7, #20]
 8008a8e:	6978      	ldr	r0, [r7, #20]
 8008a90:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8008a94:	6178      	str	r0, [r7, #20]
 8008a96:	015b      	lsls	r3, r3, #5
 8008a98:	613b      	str	r3, [r7, #16]
 8008a9a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008a9e:	1a5b      	subs	r3, r3, r1
 8008aa0:	eb64 0402 	sbc.w	r4, r4, r2
 8008aa4:	01a6      	lsls	r6, r4, #6
 8008aa6:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8008aaa:	019d      	lsls	r5, r3, #6
 8008aac:	1aed      	subs	r5, r5, r3
 8008aae:	eb66 0604 	sbc.w	r6, r6, r4
 8008ab2:	00f3      	lsls	r3, r6, #3
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	00eb      	lsls	r3, r5, #3
 8008ac0:	60bb      	str	r3, [r7, #8]
 8008ac2:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8008ac6:	186d      	adds	r5, r5, r1
 8008ac8:	eb46 0602 	adc.w	r6, r6, r2
 8008acc:	02b3      	lsls	r3, r6, #10
 8008ace:	607b      	str	r3, [r7, #4]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8008ad6:	607b      	str	r3, [r7, #4]
 8008ad8:	02ab      	lsls	r3, r5, #10
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	e897 0060 	ldmia.w	r7, {r5, r6}
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ae6:	f04f 0400 	mov.w	r4, #0
 8008aea:	461a      	mov	r2, r3
 8008aec:	4623      	mov	r3, r4
 8008aee:	f7f8 f801 	bl	8000af4 <__aeabi_uldivmod>
 8008af2:	4603      	mov	r3, r0
 8008af4:	460c      	mov	r4, r1
 8008af6:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008af8:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x364>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	0f1b      	lsrs	r3, r3, #28
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8008b04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b0c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8008b0e:	e002      	b.n	8008b16 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b10:	4b05      	ldr	r3, [pc, #20]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x368>)
 8008b12:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8008b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3784      	adds	r7, #132	; 0x84
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b22:	bf00      	nop
 8008b24:	40023800 	.word	0x40023800
 8008b28:	00f42400 	.word	0x00f42400

08008b2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 8083 	beq.w	8008c4c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008b46:	4b95      	ldr	r3, [pc, #596]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 030c 	and.w	r3, r3, #12
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	d019      	beq.n	8008b86 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008b52:	4b92      	ldr	r3, [pc, #584]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	d106      	bne.n	8008b6c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008b5e:	4b8f      	ldr	r3, [pc, #572]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b6a:	d00c      	beq.n	8008b86 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b6c:	4b8b      	ldr	r3, [pc, #556]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008b74:	2b0c      	cmp	r3, #12
 8008b76:	d112      	bne.n	8008b9e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b78:	4b88      	ldr	r3, [pc, #544]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b84:	d10b      	bne.n	8008b9e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b86:	4b85      	ldr	r3, [pc, #532]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d05b      	beq.n	8008c4a <HAL_RCC_OscConfig+0x11e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d157      	bne.n	8008c4a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e216      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba6:	d106      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x8a>
 8008ba8:	4a7c      	ldr	r2, [pc, #496]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008baa:	4b7c      	ldr	r3, [pc, #496]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	e01d      	b.n	8008bf2 <HAL_RCC_OscConfig+0xc6>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bbe:	d10c      	bne.n	8008bda <HAL_RCC_OscConfig+0xae>
 8008bc0:	4a76      	ldr	r2, [pc, #472]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bc2:	4b76      	ldr	r3, [pc, #472]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	4a73      	ldr	r2, [pc, #460]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bce:	4b73      	ldr	r3, [pc, #460]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	e00b      	b.n	8008bf2 <HAL_RCC_OscConfig+0xc6>
 8008bda:	4a70      	ldr	r2, [pc, #448]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bdc:	4b6f      	ldr	r3, [pc, #444]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	4a6d      	ldr	r2, [pc, #436]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008be8:	4b6c      	ldr	r3, [pc, #432]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bf0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d013      	beq.n	8008c22 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfa:	f7fd fadf 	bl	80061bc <HAL_GetTick>
 8008bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c00:	e008      	b.n	8008c14 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c02:	f7fd fadb 	bl	80061bc <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b64      	cmp	r3, #100	; 0x64
 8008c0e:	d901      	bls.n	8008c14 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e1db      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c14:	4b61      	ldr	r3, [pc, #388]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d0f0      	beq.n	8008c02 <HAL_RCC_OscConfig+0xd6>
 8008c20:	e014      	b.n	8008c4c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c22:	f7fd facb 	bl	80061bc <HAL_GetTick>
 8008c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c28:	e008      	b.n	8008c3c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c2a:	f7fd fac7 	bl	80061bc <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b64      	cmp	r3, #100	; 0x64
 8008c36:	d901      	bls.n	8008c3c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e1c7      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c3c:	4b57      	ldr	r3, [pc, #348]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1f0      	bne.n	8008c2a <HAL_RCC_OscConfig+0xfe>
 8008c48:	e000      	b.n	8008c4c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d06f      	beq.n	8008d38 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008c58:	4b50      	ldr	r3, [pc, #320]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f003 030c 	and.w	r3, r3, #12
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d017      	beq.n	8008c94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008c64:	4b4d      	ldr	r3, [pc, #308]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d105      	bne.n	8008c7c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008c70:	4b4a      	ldr	r3, [pc, #296]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c7c:	4b47      	ldr	r3, [pc, #284]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008c84:	2b0c      	cmp	r3, #12
 8008c86:	d11c      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c88:	4b44      	ldr	r3, [pc, #272]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d116      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c94:	4b41      	ldr	r3, [pc, #260]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <HAL_RCC_OscConfig+0x180>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d001      	beq.n	8008cac <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e18f      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cac:	493b      	ldr	r1, [pc, #236]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cae:	4b3b      	ldr	r3, [pc, #236]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cc0:	e03a      	b.n	8008d38 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d020      	beq.n	8008d0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cca:	4b35      	ldr	r3, [pc, #212]	; (8008da0 <HAL_RCC_OscConfig+0x274>)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd0:	f7fd fa74 	bl	80061bc <HAL_GetTick>
 8008cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cd6:	e008      	b.n	8008cea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cd8:	f7fd fa70 	bl	80061bc <HAL_GetTick>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e170      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cea:	4b2c      	ldr	r3, [pc, #176]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0f0      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cf6:	4929      	ldr	r1, [pc, #164]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cf8:	4b28      	ldr	r3, [pc, #160]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	4313      	orrs	r3, r2
 8008d08:	600b      	str	r3, [r1, #0]
 8008d0a:	e015      	b.n	8008d38 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d0c:	4b24      	ldr	r3, [pc, #144]	; (8008da0 <HAL_RCC_OscConfig+0x274>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d12:	f7fd fa53 	bl	80061bc <HAL_GetTick>
 8008d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d18:	e008      	b.n	8008d2c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d1a:	f7fd fa4f 	bl	80061bc <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d901      	bls.n	8008d2c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e14f      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d2c:	4b1b      	ldr	r3, [pc, #108]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1f0      	bne.n	8008d1a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0308 	and.w	r3, r3, #8
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d037      	beq.n	8008db4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d016      	beq.n	8008d7a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d4c:	4b15      	ldr	r3, [pc, #84]	; (8008da4 <HAL_RCC_OscConfig+0x278>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d52:	f7fd fa33 	bl	80061bc <HAL_GetTick>
 8008d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d58:	e008      	b.n	8008d6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d5a:	f7fd fa2f 	bl	80061bc <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d901      	bls.n	8008d6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e12f      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d6c:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <HAL_RCC_OscConfig+0x270>)
 8008d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d70:	f003 0302 	and.w	r3, r3, #2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0f0      	beq.n	8008d5a <HAL_RCC_OscConfig+0x22e>
 8008d78:	e01c      	b.n	8008db4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d7a:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <HAL_RCC_OscConfig+0x278>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d80:	f7fd fa1c 	bl	80061bc <HAL_GetTick>
 8008d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d86:	e00f      	b.n	8008da8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d88:	f7fd fa18 	bl	80061bc <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d908      	bls.n	8008da8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e118      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
 8008d9a:	bf00      	nop
 8008d9c:	40023800 	.word	0x40023800
 8008da0:	42470000 	.word	0x42470000
 8008da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008da8:	4b8a      	ldr	r3, [pc, #552]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e9      	bne.n	8008d88 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 8097 	beq.w	8008ef0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dc6:	4b83      	ldr	r3, [pc, #524]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10f      	bne.n	8008df2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	4a7f      	ldr	r2, [pc, #508]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008dd8:	4b7e      	ldr	r3, [pc, #504]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de0:	6413      	str	r3, [r2, #64]	; 0x40
 8008de2:	4b7c      	ldr	r3, [pc, #496]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008dee:	2301      	movs	r3, #1
 8008df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df2:	4b79      	ldr	r3, [pc, #484]	; (8008fd8 <HAL_RCC_OscConfig+0x4ac>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d118      	bne.n	8008e30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dfe:	4a76      	ldr	r2, [pc, #472]	; (8008fd8 <HAL_RCC_OscConfig+0x4ac>)
 8008e00:	4b75      	ldr	r3, [pc, #468]	; (8008fd8 <HAL_RCC_OscConfig+0x4ac>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e0a:	f7fd f9d7 	bl	80061bc <HAL_GetTick>
 8008e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e10:	e008      	b.n	8008e24 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e12:	f7fd f9d3 	bl	80061bc <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e0d3      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e24:	4b6c      	ldr	r3, [pc, #432]	; (8008fd8 <HAL_RCC_OscConfig+0x4ac>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0f0      	beq.n	8008e12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d106      	bne.n	8008e46 <HAL_RCC_OscConfig+0x31a>
 8008e38:	4a66      	ldr	r2, [pc, #408]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008e3a:	4b66      	ldr	r3, [pc, #408]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	6713      	str	r3, [r2, #112]	; 0x70
 8008e44:	e01c      	b.n	8008e80 <HAL_RCC_OscConfig+0x354>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	2b05      	cmp	r3, #5
 8008e4c:	d10c      	bne.n	8008e68 <HAL_RCC_OscConfig+0x33c>
 8008e4e:	4a61      	ldr	r2, [pc, #388]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008e50:	4b60      	ldr	r3, [pc, #384]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e54:	f043 0304 	orr.w	r3, r3, #4
 8008e58:	6713      	str	r3, [r2, #112]	; 0x70
 8008e5a:	4a5e      	ldr	r2, [pc, #376]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008e5c:	4b5d      	ldr	r3, [pc, #372]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e60:	f043 0301 	orr.w	r3, r3, #1
 8008e64:	6713      	str	r3, [r2, #112]	; 0x70
 8008e66:	e00b      	b.n	8008e80 <HAL_RCC_OscConfig+0x354>
 8008e68:	4a5a      	ldr	r2, [pc, #360]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008e6a:	4b5a      	ldr	r3, [pc, #360]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6e:	f023 0301 	bic.w	r3, r3, #1
 8008e72:	6713      	str	r3, [r2, #112]	; 0x70
 8008e74:	4a57      	ldr	r2, [pc, #348]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008e76:	4b57      	ldr	r3, [pc, #348]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e7a:	f023 0304 	bic.w	r3, r3, #4
 8008e7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d015      	beq.n	8008eb4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e88:	f7fd f998 	bl	80061bc <HAL_GetTick>
 8008e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e8e:	e00a      	b.n	8008ea6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e90:	f7fd f994 	bl	80061bc <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d901      	bls.n	8008ea6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e092      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ea6:	4b4b      	ldr	r3, [pc, #300]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0ee      	beq.n	8008e90 <HAL_RCC_OscConfig+0x364>
 8008eb2:	e014      	b.n	8008ede <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb4:	f7fd f982 	bl	80061bc <HAL_GetTick>
 8008eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008eba:	e00a      	b.n	8008ed2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ebc:	f7fd f97e 	bl	80061bc <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d901      	bls.n	8008ed2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e07c      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ed2:	4b40      	ldr	r3, [pc, #256]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1ee      	bne.n	8008ebc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d105      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ee4:	4a3b      	ldr	r2, [pc, #236]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008ee6:	4b3b      	ldr	r3, [pc, #236]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d068      	beq.n	8008fca <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ef8:	4b36      	ldr	r3, [pc, #216]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f003 030c 	and.w	r3, r3, #12
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d060      	beq.n	8008fc6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d145      	bne.n	8008f98 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f0c:	4b33      	ldr	r3, [pc, #204]	; (8008fdc <HAL_RCC_OscConfig+0x4b0>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f12:	f7fd f953 	bl	80061bc <HAL_GetTick>
 8008f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f18:	e008      	b.n	8008f2c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f1a:	f7fd f94f 	bl	80061bc <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d901      	bls.n	8008f2c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e04f      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f2c:	4b29      	ldr	r3, [pc, #164]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1f0      	bne.n	8008f1a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f38:	4926      	ldr	r1, [pc, #152]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69da      	ldr	r2, [r3, #28]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	019b      	lsls	r3, r3, #6
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f50:	085b      	lsrs	r3, r3, #1
 8008f52:	3b01      	subs	r3, #1
 8008f54:	041b      	lsls	r3, r3, #16
 8008f56:	431a      	orrs	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	061b      	lsls	r3, r3, #24
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f64:	071b      	lsls	r3, r3, #28
 8008f66:	4313      	orrs	r3, r2
 8008f68:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f6a:	4b1c      	ldr	r3, [pc, #112]	; (8008fdc <HAL_RCC_OscConfig+0x4b0>)
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f70:	f7fd f924 	bl	80061bc <HAL_GetTick>
 8008f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f76:	e008      	b.n	8008f8a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f78:	f7fd f920 	bl	80061bc <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e020      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f8a:	4b12      	ldr	r3, [pc, #72]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0f0      	beq.n	8008f78 <HAL_RCC_OscConfig+0x44c>
 8008f96:	e018      	b.n	8008fca <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f98:	4b10      	ldr	r3, [pc, #64]	; (8008fdc <HAL_RCC_OscConfig+0x4b0>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9e:	f7fd f90d 	bl	80061bc <HAL_GetTick>
 8008fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fa4:	e008      	b.n	8008fb8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fa6:	f7fd f909 	bl	80061bc <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d901      	bls.n	8008fb8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e009      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb8:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <HAL_RCC_OscConfig+0x4a8>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1f0      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x47a>
 8008fc4:	e001      	b.n	8008fca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3718      	adds	r7, #24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	40023800 	.word	0x40023800
 8008fd8:	40007000 	.word	0x40007000
 8008fdc:	42470060 	.word	0x42470060

08008fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e01d      	b.n	800902e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d106      	bne.n	800900c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fc fc5e 	bl	80058c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2202      	movs	r2, #2
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3304      	adds	r3, #4
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f000 fd30 	bl	8009a84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009036:	b480      	push	{r7}
 8009038:	b085      	sub	sp, #20
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2202      	movs	r2, #2
 8009042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f003 0307 	and.w	r3, r3, #7
 8009050:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2b06      	cmp	r3, #6
 8009056:	d007      	beq.n	8009068 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	6812      	ldr	r2, [r2, #0]
 8009060:	6812      	ldr	r2, [r2, #0]
 8009062:	f042 0201 	orr.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e01d      	b.n	80090cc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b00      	cmp	r3, #0
 800909a:	d106      	bne.n	80090aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f815 	bl	80090d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3304      	adds	r3, #4
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f000 fce1 	bl	8009a84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2201      	movs	r2, #1
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 f95c 	bl	800a3b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a15      	ldr	r2, [pc, #84]	; (800915c <HAL_TIM_PWM_Start+0x74>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d004      	beq.n	8009114 <HAL_TIM_PWM_Start+0x2c>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a14      	ldr	r2, [pc, #80]	; (8009160 <HAL_TIM_PWM_Start+0x78>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d101      	bne.n	8009118 <HAL_TIM_PWM_Start+0x30>
 8009114:	2301      	movs	r3, #1
 8009116:	e000      	b.n	800911a <HAL_TIM_PWM_Start+0x32>
 8009118:	2300      	movs	r3, #0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	6812      	ldr	r2, [r2, #0]
 8009126:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800912c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 0307 	and.w	r3, r3, #7
 8009138:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b06      	cmp	r3, #6
 800913e:	d007      	beq.n	8009150 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	6812      	ldr	r2, [r2, #0]
 8009148:	6812      	ldr	r2, [r2, #0]
 800914a:	f042 0201 	orr.w	r2, r2, #1
 800914e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	40010000 	.word	0x40010000
 8009160:	40010400 	.word	0x40010400

08009164 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e01d      	b.n	80091b2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d106      	bne.n	8009190 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f815 	bl	80091ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	3304      	adds	r3, #4
 80091a0:	4619      	mov	r1, r3
 80091a2:	4610      	mov	r0, r2
 80091a4:	f000 fc6e 	bl	8009a84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2201      	movs	r2, #1
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f001 f8e9 	bl	800a3b8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f003 0307 	and.w	r3, r3, #7
 80091f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2b06      	cmp	r3, #6
 80091f6:	d007      	beq.n	8009208 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	6812      	ldr	r2, [r2, #0]
 8009200:	6812      	ldr	r2, [r2, #0]
 8009202:	f042 0201 	orr.w	r2, r2, #1
 8009206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b0c      	cmp	r3, #12
 8009222:	d841      	bhi.n	80092a8 <HAL_TIM_IC_Start_IT+0x94>
 8009224:	a201      	add	r2, pc, #4	; (adr r2, 800922c <HAL_TIM_IC_Start_IT+0x18>)
 8009226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922a:	bf00      	nop
 800922c:	08009261 	.word	0x08009261
 8009230:	080092a9 	.word	0x080092a9
 8009234:	080092a9 	.word	0x080092a9
 8009238:	080092a9 	.word	0x080092a9
 800923c:	08009273 	.word	0x08009273
 8009240:	080092a9 	.word	0x080092a9
 8009244:	080092a9 	.word	0x080092a9
 8009248:	080092a9 	.word	0x080092a9
 800924c:	08009285 	.word	0x08009285
 8009250:	080092a9 	.word	0x080092a9
 8009254:	080092a9 	.word	0x080092a9
 8009258:	080092a9 	.word	0x080092a9
 800925c:	08009297 	.word	0x08009297
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6812      	ldr	r2, [r2, #0]
 8009268:	68d2      	ldr	r2, [r2, #12]
 800926a:	f042 0202 	orr.w	r2, r2, #2
 800926e:	60da      	str	r2, [r3, #12]
      break;
 8009270:	e01b      	b.n	80092aa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	6812      	ldr	r2, [r2, #0]
 800927a:	68d2      	ldr	r2, [r2, #12]
 800927c:	f042 0204 	orr.w	r2, r2, #4
 8009280:	60da      	str	r2, [r3, #12]
      break;
 8009282:	e012      	b.n	80092aa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	6812      	ldr	r2, [r2, #0]
 800928c:	68d2      	ldr	r2, [r2, #12]
 800928e:	f042 0208 	orr.w	r2, r2, #8
 8009292:	60da      	str	r2, [r3, #12]
      break;
 8009294:	e009      	b.n	80092aa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	6812      	ldr	r2, [r2, #0]
 800929e:	68d2      	ldr	r2, [r2, #12]
 80092a0:	f042 0210 	orr.w	r2, r2, #16
 80092a4:	60da      	str	r2, [r3, #12]
      break;
 80092a6:	e000      	b.n	80092aa <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80092a8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2201      	movs	r2, #1
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 f880 	bl	800a3b8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f003 0307 	and.w	r3, r3, #7
 80092c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b06      	cmp	r3, #6
 80092c8:	d007      	beq.n	80092da <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	6812      	ldr	r2, [r2, #0]
 80092d2:	6812      	ldr	r2, [r2, #0]
 80092d4:	f042 0201 	orr.w	r2, r2, #1
 80092d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d122      	bne.n	8009340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b02      	cmp	r3, #2
 8009306:	d11b      	bne.n	8009340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0202 	mvn.w	r2, #2
 8009310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7fb fa8a 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 800932c:	e005      	b.n	800933a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fb8a 	bl	8009a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fb91 	bl	8009a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0304 	and.w	r3, r3, #4
 800934a:	2b04      	cmp	r3, #4
 800934c:	d122      	bne.n	8009394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f003 0304 	and.w	r3, r3, #4
 8009358:	2b04      	cmp	r3, #4
 800935a:	d11b      	bne.n	8009394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f06f 0204 	mvn.w	r2, #4
 8009364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2202      	movs	r2, #2
 800936a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7fb fa60 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 8009380:	e005      	b.n	800938e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fb60 	bl	8009a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fb67 	bl	8009a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 0308 	and.w	r3, r3, #8
 800939e:	2b08      	cmp	r3, #8
 80093a0:	d122      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b08      	cmp	r3, #8
 80093ae:	d11b      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f06f 0208 	mvn.w	r2, #8
 80093b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2204      	movs	r2, #4
 80093be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7fb fa36 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 80093d4:	e005      	b.n	80093e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fb36 	bl	8009a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fb3d 	bl	8009a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b10      	cmp	r3, #16
 80093f4:	d122      	bne.n	800943c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f003 0310 	and.w	r3, r3, #16
 8009400:	2b10      	cmp	r3, #16
 8009402:	d11b      	bne.n	800943c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f06f 0210 	mvn.w	r2, #16
 800940c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2208      	movs	r2, #8
 8009412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7fb fa0c 	bl	8004840 <HAL_TIM_IC_CaptureCallback>
 8009428:	e005      	b.n	8009436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fb0c 	bl	8009a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 fb13 	bl	8009a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b01      	cmp	r3, #1
 8009448:	d10e      	bne.n	8009468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b01      	cmp	r3, #1
 8009456:	d107      	bne.n	8009468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0201 	mvn.w	r2, #1
 8009460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fae6 	bl	8009a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009472:	2b80      	cmp	r3, #128	; 0x80
 8009474:	d10e      	bne.n	8009494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009480:	2b80      	cmp	r3, #128	; 0x80
 8009482:	d107      	bne.n	8009494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800948c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 f83e 	bl	800a510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949e:	2b40      	cmp	r3, #64	; 0x40
 80094a0:	d10e      	bne.n	80094c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ac:	2b40      	cmp	r3, #64	; 0x40
 80094ae:	d107      	bne.n	80094c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fad8 	bl	8009a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	f003 0320 	and.w	r3, r3, #32
 80094ca:	2b20      	cmp	r3, #32
 80094cc:	d10e      	bne.n	80094ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f003 0320 	and.w	r3, r3, #32
 80094d8:	2b20      	cmp	r3, #32
 80094da:	d107      	bne.n	80094ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f06f 0220 	mvn.w	r2, #32
 80094e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f001 f808 	bl	800a4fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094ec:	bf00      	nop
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009506:	2b01      	cmp	r3, #1
 8009508:	d101      	bne.n	800950e <HAL_TIM_IC_ConfigChannel+0x1a>
 800950a:	2302      	movs	r3, #2
 800950c:	e08a      	b.n	8009624 <HAL_TIM_IC_ConfigChannel+0x130>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2202      	movs	r2, #2
 800951a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d11b      	bne.n	800955c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	6819      	ldr	r1, [r3, #0]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f000 fd7c 	bl	800a030 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	6812      	ldr	r2, [r2, #0]
 8009540:	6992      	ldr	r2, [r2, #24]
 8009542:	f022 020c 	bic.w	r2, r2, #12
 8009546:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	6812      	ldr	r2, [r2, #0]
 8009550:	6991      	ldr	r1, [r2, #24]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	6892      	ldr	r2, [r2, #8]
 8009556:	430a      	orrs	r2, r1
 8009558:	619a      	str	r2, [r3, #24]
 800955a:	e05a      	b.n	8009612 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b04      	cmp	r3, #4
 8009560:	d11c      	bne.n	800959c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	6819      	ldr	r1, [r3, #0]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f000 fe00 	bl	800a176 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	6812      	ldr	r2, [r2, #0]
 800957e:	6992      	ldr	r2, [r2, #24]
 8009580:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009584:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	6812      	ldr	r2, [r2, #0]
 800958e:	6991      	ldr	r1, [r2, #24]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	6892      	ldr	r2, [r2, #8]
 8009594:	0212      	lsls	r2, r2, #8
 8009596:	430a      	orrs	r2, r1
 8009598:	619a      	str	r2, [r3, #24]
 800959a:	e03a      	b.n	8009612 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b08      	cmp	r3, #8
 80095a0:	d11b      	bne.n	80095da <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	6819      	ldr	r1, [r3, #0]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f000 fe4d 	bl	800a250 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	69d2      	ldr	r2, [r2, #28]
 80095c0:	f022 020c 	bic.w	r2, r2, #12
 80095c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	6812      	ldr	r2, [r2, #0]
 80095ce:	69d1      	ldr	r1, [r2, #28]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	6892      	ldr	r2, [r2, #8]
 80095d4:	430a      	orrs	r2, r1
 80095d6:	61da      	str	r2, [r3, #28]
 80095d8:	e01b      	b.n	8009612 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	6819      	ldr	r1, [r3, #0]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	f000 fe6d 	bl	800a2c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	6812      	ldr	r2, [r2, #0]
 80095f6:	69d2      	ldr	r2, [r2, #28]
 80095f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80095fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	6812      	ldr	r2, [r2, #0]
 8009606:	69d1      	ldr	r1, [r2, #28]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	6892      	ldr	r2, [r2, #8]
 800960c:	0212      	lsls	r2, r2, #8
 800960e:	430a      	orrs	r2, r1
 8009610:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800963e:	2b01      	cmp	r3, #1
 8009640:	d101      	bne.n	8009646 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009642:	2302      	movs	r3, #2
 8009644:	e0b4      	b.n	80097b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2202      	movs	r2, #2
 8009652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b0c      	cmp	r3, #12
 800965a:	f200 809f 	bhi.w	800979c <HAL_TIM_PWM_ConfigChannel+0x170>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	08009699 	.word	0x08009699
 8009668:	0800979d 	.word	0x0800979d
 800966c:	0800979d 	.word	0x0800979d
 8009670:	0800979d 	.word	0x0800979d
 8009674:	080096d9 	.word	0x080096d9
 8009678:	0800979d 	.word	0x0800979d
 800967c:	0800979d 	.word	0x0800979d
 8009680:	0800979d 	.word	0x0800979d
 8009684:	0800971b 	.word	0x0800971b
 8009688:	0800979d 	.word	0x0800979d
 800968c:	0800979d 	.word	0x0800979d
 8009690:	0800979d 	.word	0x0800979d
 8009694:	0800975b 	.word	0x0800975b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68b9      	ldr	r1, [r7, #8]
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fa90 	bl	8009bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	6812      	ldr	r2, [r2, #0]
 80096ac:	6992      	ldr	r2, [r2, #24]
 80096ae:	f042 0208 	orr.w	r2, r2, #8
 80096b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	6812      	ldr	r2, [r2, #0]
 80096bc:	6992      	ldr	r2, [r2, #24]
 80096be:	f022 0204 	bic.w	r2, r2, #4
 80096c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	6812      	ldr	r2, [r2, #0]
 80096cc:	6991      	ldr	r1, [r2, #24]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	6912      	ldr	r2, [r2, #16]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	619a      	str	r2, [r3, #24]
      break;
 80096d6:	e062      	b.n	800979e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 fae0 	bl	8009ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	6812      	ldr	r2, [r2, #0]
 80096ec:	6992      	ldr	r2, [r2, #24]
 80096ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	6812      	ldr	r2, [r2, #0]
 80096fc:	6992      	ldr	r2, [r2, #24]
 80096fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	6812      	ldr	r2, [r2, #0]
 800970c:	6991      	ldr	r1, [r2, #24]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	6912      	ldr	r2, [r2, #16]
 8009712:	0212      	lsls	r2, r2, #8
 8009714:	430a      	orrs	r2, r1
 8009716:	619a      	str	r2, [r3, #24]
      break;
 8009718:	e041      	b.n	800979e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fb35 	bl	8009d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	6812      	ldr	r2, [r2, #0]
 800972e:	69d2      	ldr	r2, [r2, #28]
 8009730:	f042 0208 	orr.w	r2, r2, #8
 8009734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	6812      	ldr	r2, [r2, #0]
 800973e:	69d2      	ldr	r2, [r2, #28]
 8009740:	f022 0204 	bic.w	r2, r2, #4
 8009744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	69d1      	ldr	r1, [r2, #28]
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	6912      	ldr	r2, [r2, #16]
 8009754:	430a      	orrs	r2, r1
 8009756:	61da      	str	r2, [r3, #28]
      break;
 8009758:	e021      	b.n	800979e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 fb89 	bl	8009e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	6812      	ldr	r2, [r2, #0]
 800976e:	69d2      	ldr	r2, [r2, #28]
 8009770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	6812      	ldr	r2, [r2, #0]
 800977e:	69d2      	ldr	r2, [r2, #28]
 8009780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	6812      	ldr	r2, [r2, #0]
 800978e:	69d1      	ldr	r1, [r2, #28]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	6912      	ldr	r2, [r2, #16]
 8009794:	0212      	lsls	r2, r2, #8
 8009796:	430a      	orrs	r2, r1
 8009798:	61da      	str	r2, [r3, #28]
      break;
 800979a:	e000      	b.n	800979e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800979c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_TIM_ConfigClockSource+0x18>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e0a6      	b.n	800991e <HAL_TIM_ConfigClockSource+0x166>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80097ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b40      	cmp	r3, #64	; 0x40
 8009806:	d067      	beq.n	80098d8 <HAL_TIM_ConfigClockSource+0x120>
 8009808:	2b40      	cmp	r3, #64	; 0x40
 800980a:	d80b      	bhi.n	8009824 <HAL_TIM_ConfigClockSource+0x6c>
 800980c:	2b10      	cmp	r3, #16
 800980e:	d073      	beq.n	80098f8 <HAL_TIM_ConfigClockSource+0x140>
 8009810:	2b10      	cmp	r3, #16
 8009812:	d802      	bhi.n	800981a <HAL_TIM_ConfigClockSource+0x62>
 8009814:	2b00      	cmp	r3, #0
 8009816:	d06f      	beq.n	80098f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009818:	e078      	b.n	800990c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800981a:	2b20      	cmp	r3, #32
 800981c:	d06c      	beq.n	80098f8 <HAL_TIM_ConfigClockSource+0x140>
 800981e:	2b30      	cmp	r3, #48	; 0x30
 8009820:	d06a      	beq.n	80098f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009822:	e073      	b.n	800990c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009824:	2b70      	cmp	r3, #112	; 0x70
 8009826:	d00d      	beq.n	8009844 <HAL_TIM_ConfigClockSource+0x8c>
 8009828:	2b70      	cmp	r3, #112	; 0x70
 800982a:	d804      	bhi.n	8009836 <HAL_TIM_ConfigClockSource+0x7e>
 800982c:	2b50      	cmp	r3, #80	; 0x50
 800982e:	d033      	beq.n	8009898 <HAL_TIM_ConfigClockSource+0xe0>
 8009830:	2b60      	cmp	r3, #96	; 0x60
 8009832:	d041      	beq.n	80098b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009834:	e06a      	b.n	800990c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800983a:	d066      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x152>
 800983c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009840:	d017      	beq.n	8009872 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009842:	e063      	b.n	800990c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6818      	ldr	r0, [r3, #0]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	6899      	ldr	r1, [r3, #8]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f000 fd90 	bl	800a378 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009866:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	609a      	str	r2, [r3, #8]
      break;
 8009870:	e04c      	b.n	800990c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6818      	ldr	r0, [r3, #0]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	6899      	ldr	r1, [r3, #8]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f000 fd79 	bl	800a378 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	6812      	ldr	r2, [r2, #0]
 800988e:	6892      	ldr	r2, [r2, #8]
 8009890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009894:	609a      	str	r2, [r3, #8]
      break;
 8009896:	e039      	b.n	800990c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6818      	ldr	r0, [r3, #0]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	6859      	ldr	r1, [r3, #4]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	461a      	mov	r2, r3
 80098a6:	f000 fc37 	bl	800a118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2150      	movs	r1, #80	; 0x50
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fd46 	bl	800a342 <TIM_ITRx_SetConfig>
      break;
 80098b6:	e029      	b.n	800990c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6818      	ldr	r0, [r3, #0]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	6859      	ldr	r1, [r3, #4]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	461a      	mov	r2, r3
 80098c6:	f000 fc93 	bl	800a1f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2160      	movs	r1, #96	; 0x60
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fd36 	bl	800a342 <TIM_ITRx_SetConfig>
      break;
 80098d6:	e019      	b.n	800990c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	6859      	ldr	r1, [r3, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	461a      	mov	r2, r3
 80098e6:	f000 fc17 	bl	800a118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2140      	movs	r1, #64	; 0x40
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 fd26 	bl	800a342 <TIM_ITRx_SetConfig>
      break;
 80098f6:	e009      	b.n	800990c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4619      	mov	r1, r3
 8009902:	4610      	mov	r0, r2
 8009904:	f000 fd1d 	bl	800a342 <TIM_ITRx_SetConfig>
      break;
 8009908:	e000      	b.n	800990c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800990a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009936:	2b01      	cmp	r3, #1
 8009938:	d101      	bne.n	800993e <HAL_TIM_SlaveConfigSynchro+0x18>
 800993a:	2302      	movs	r3, #2
 800993c:	e031      	b.n	80099a2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2202      	movs	r2, #2
 800994a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fae7 	bl	8009f24 <TIM_SlaveTimer_SetConfig>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d009      	beq.n	8009970 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e018      	b.n	80099a2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	6812      	ldr	r2, [r2, #0]
 8009978:	68d2      	ldr	r2, [r2, #12]
 800997a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800997e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	6812      	ldr	r2, [r2, #0]
 8009988:	68d2      	ldr	r2, [r2, #12]
 800998a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800998e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b0c      	cmp	r3, #12
 80099be:	d831      	bhi.n	8009a24 <HAL_TIM_ReadCapturedValue+0x78>
 80099c0:	a201      	add	r2, pc, #4	; (adr r2, 80099c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80099c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c6:	bf00      	nop
 80099c8:	080099fd 	.word	0x080099fd
 80099cc:	08009a25 	.word	0x08009a25
 80099d0:	08009a25 	.word	0x08009a25
 80099d4:	08009a25 	.word	0x08009a25
 80099d8:	08009a07 	.word	0x08009a07
 80099dc:	08009a25 	.word	0x08009a25
 80099e0:	08009a25 	.word	0x08009a25
 80099e4:	08009a25 	.word	0x08009a25
 80099e8:	08009a11 	.word	0x08009a11
 80099ec:	08009a25 	.word	0x08009a25
 80099f0:	08009a25 	.word	0x08009a25
 80099f4:	08009a25 	.word	0x08009a25
 80099f8:	08009a1b 	.word	0x08009a1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a02:	60fb      	str	r3, [r7, #12]

      break;
 8009a04:	e00f      	b.n	8009a26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0c:	60fb      	str	r3, [r7, #12]

      break;
 8009a0e:	e00a      	b.n	8009a26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a16:	60fb      	str	r3, [r7, #12]

      break;
 8009a18:	e005      	b.n	8009a26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	60fb      	str	r3, [r7, #12]

      break;
 8009a22:	e000      	b.n	8009a26 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009a24:	bf00      	nop
  }

  return tmpreg;
 8009a26:	68fb      	ldr	r3, [r7, #12]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a40      	ldr	r2, [pc, #256]	; (8009b98 <TIM_Base_SetConfig+0x114>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d013      	beq.n	8009ac4 <TIM_Base_SetConfig+0x40>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aa2:	d00f      	beq.n	8009ac4 <TIM_Base_SetConfig+0x40>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a3d      	ldr	r2, [pc, #244]	; (8009b9c <TIM_Base_SetConfig+0x118>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d00b      	beq.n	8009ac4 <TIM_Base_SetConfig+0x40>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a3c      	ldr	r2, [pc, #240]	; (8009ba0 <TIM_Base_SetConfig+0x11c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d007      	beq.n	8009ac4 <TIM_Base_SetConfig+0x40>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a3b      	ldr	r2, [pc, #236]	; (8009ba4 <TIM_Base_SetConfig+0x120>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d003      	beq.n	8009ac4 <TIM_Base_SetConfig+0x40>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a3a      	ldr	r2, [pc, #232]	; (8009ba8 <TIM_Base_SetConfig+0x124>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d108      	bne.n	8009ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a2f      	ldr	r2, [pc, #188]	; (8009b98 <TIM_Base_SetConfig+0x114>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d02b      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae4:	d027      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a2c      	ldr	r2, [pc, #176]	; (8009b9c <TIM_Base_SetConfig+0x118>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d023      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a2b      	ldr	r2, [pc, #172]	; (8009ba0 <TIM_Base_SetConfig+0x11c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d01f      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a2a      	ldr	r2, [pc, #168]	; (8009ba4 <TIM_Base_SetConfig+0x120>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d01b      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a29      	ldr	r2, [pc, #164]	; (8009ba8 <TIM_Base_SetConfig+0x124>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d017      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a28      	ldr	r2, [pc, #160]	; (8009bac <TIM_Base_SetConfig+0x128>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d013      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a27      	ldr	r2, [pc, #156]	; (8009bb0 <TIM_Base_SetConfig+0x12c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00f      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a26      	ldr	r2, [pc, #152]	; (8009bb4 <TIM_Base_SetConfig+0x130>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d00b      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a25      	ldr	r2, [pc, #148]	; (8009bb8 <TIM_Base_SetConfig+0x134>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d007      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a24      	ldr	r2, [pc, #144]	; (8009bbc <TIM_Base_SetConfig+0x138>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d003      	beq.n	8009b36 <TIM_Base_SetConfig+0xb2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a23      	ldr	r2, [pc, #140]	; (8009bc0 <TIM_Base_SetConfig+0x13c>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d108      	bne.n	8009b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	689a      	ldr	r2, [r3, #8]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a0a      	ldr	r2, [pc, #40]	; (8009b98 <TIM_Base_SetConfig+0x114>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d003      	beq.n	8009b7c <TIM_Base_SetConfig+0xf8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a0c      	ldr	r2, [pc, #48]	; (8009ba8 <TIM_Base_SetConfig+0x124>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d103      	bne.n	8009b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	691a      	ldr	r2, [r3, #16]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	615a      	str	r2, [r3, #20]
}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	40010000 	.word	0x40010000
 8009b9c:	40000400 	.word	0x40000400
 8009ba0:	40000800 	.word	0x40000800
 8009ba4:	40000c00 	.word	0x40000c00
 8009ba8:	40010400 	.word	0x40010400
 8009bac:	40014000 	.word	0x40014000
 8009bb0:	40014400 	.word	0x40014400
 8009bb4:	40014800 	.word	0x40014800
 8009bb8:	40001800 	.word	0x40001800
 8009bbc:	40001c00 	.word	0x40001c00
 8009bc0:	40002000 	.word	0x40002000

08009bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	f023 0201 	bic.w	r2, r3, #1
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f023 0303 	bic.w	r3, r3, #3
 8009bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f023 0302 	bic.w	r3, r3, #2
 8009c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a20      	ldr	r2, [pc, #128]	; (8009c9c <TIM_OC1_SetConfig+0xd8>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d003      	beq.n	8009c28 <TIM_OC1_SetConfig+0x64>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <TIM_OC1_SetConfig+0xdc>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d10c      	bne.n	8009c42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f023 0308 	bic.w	r3, r3, #8
 8009c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f023 0304 	bic.w	r3, r3, #4
 8009c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a15      	ldr	r2, [pc, #84]	; (8009c9c <TIM_OC1_SetConfig+0xd8>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d003      	beq.n	8009c52 <TIM_OC1_SetConfig+0x8e>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a14      	ldr	r2, [pc, #80]	; (8009ca0 <TIM_OC1_SetConfig+0xdc>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d111      	bne.n	8009c76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	621a      	str	r2, [r3, #32]
}
 8009c90:	bf00      	nop
 8009c92:	371c      	adds	r7, #28
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	40010000 	.word	0x40010000
 8009ca0:	40010400 	.word	0x40010400

08009ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	f023 0210 	bic.w	r2, r3, #16
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	021b      	lsls	r3, r3, #8
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f023 0320 	bic.w	r3, r3, #32
 8009cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	011b      	lsls	r3, r3, #4
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a22      	ldr	r2, [pc, #136]	; (8009d88 <TIM_OC2_SetConfig+0xe4>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d003      	beq.n	8009d0c <TIM_OC2_SetConfig+0x68>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a21      	ldr	r2, [pc, #132]	; (8009d8c <TIM_OC2_SetConfig+0xe8>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d10d      	bne.n	8009d28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	011b      	lsls	r3, r3, #4
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a17      	ldr	r2, [pc, #92]	; (8009d88 <TIM_OC2_SetConfig+0xe4>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d003      	beq.n	8009d38 <TIM_OC2_SetConfig+0x94>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a16      	ldr	r2, [pc, #88]	; (8009d8c <TIM_OC2_SetConfig+0xe8>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d113      	bne.n	8009d60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	695b      	ldr	r3, [r3, #20]
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	621a      	str	r2, [r3, #32]
}
 8009d7a:	bf00      	nop
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	40010000 	.word	0x40010000
 8009d8c:	40010400 	.word	0x40010400

08009d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a1b      	ldr	r3, [r3, #32]
 8009daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f023 0303 	bic.w	r3, r3, #3
 8009dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	021b      	lsls	r3, r3, #8
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a21      	ldr	r2, [pc, #132]	; (8009e70 <TIM_OC3_SetConfig+0xe0>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d003      	beq.n	8009df6 <TIM_OC3_SetConfig+0x66>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a20      	ldr	r2, [pc, #128]	; (8009e74 <TIM_OC3_SetConfig+0xe4>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d10d      	bne.n	8009e12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	021b      	lsls	r3, r3, #8
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a16      	ldr	r2, [pc, #88]	; (8009e70 <TIM_OC3_SetConfig+0xe0>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d003      	beq.n	8009e22 <TIM_OC3_SetConfig+0x92>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a15      	ldr	r2, [pc, #84]	; (8009e74 <TIM_OC3_SetConfig+0xe4>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d113      	bne.n	8009e4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	011b      	lsls	r3, r3, #4
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	621a      	str	r2, [r3, #32]
}
 8009e64:	bf00      	nop
 8009e66:	371c      	adds	r7, #28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	40010000 	.word	0x40010000
 8009e74:	40010400 	.word	0x40010400

08009e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	69db      	ldr	r3, [r3, #28]
 8009e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	021b      	lsls	r3, r3, #8
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	031b      	lsls	r3, r3, #12
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a12      	ldr	r2, [pc, #72]	; (8009f1c <TIM_OC4_SetConfig+0xa4>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d003      	beq.n	8009ee0 <TIM_OC4_SetConfig+0x68>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a11      	ldr	r2, [pc, #68]	; (8009f20 <TIM_OC4_SetConfig+0xa8>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d109      	bne.n	8009ef4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	019b      	lsls	r3, r3, #6
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	621a      	str	r2, [r3, #32]
}
 8009f0e:	bf00      	nop
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	40010000 	.word	0x40010000
 8009f20:	40010400 	.word	0x40010400

08009f24 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f023 0307 	bic.w	r3, r3, #7
 8009f4e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	2b30      	cmp	r3, #48	; 0x30
 8009f68:	d05c      	beq.n	800a024 <TIM_SlaveTimer_SetConfig+0x100>
 8009f6a:	2b30      	cmp	r3, #48	; 0x30
 8009f6c:	d806      	bhi.n	8009f7c <TIM_SlaveTimer_SetConfig+0x58>
 8009f6e:	2b10      	cmp	r3, #16
 8009f70:	d058      	beq.n	800a024 <TIM_SlaveTimer_SetConfig+0x100>
 8009f72:	2b20      	cmp	r3, #32
 8009f74:	d056      	beq.n	800a024 <TIM_SlaveTimer_SetConfig+0x100>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d054      	beq.n	800a024 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8009f7a:	e054      	b.n	800a026 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009f7c:	2b50      	cmp	r3, #80	; 0x50
 8009f7e:	d03d      	beq.n	8009ffc <TIM_SlaveTimer_SetConfig+0xd8>
 8009f80:	2b50      	cmp	r3, #80	; 0x50
 8009f82:	d802      	bhi.n	8009f8a <TIM_SlaveTimer_SetConfig+0x66>
 8009f84:	2b40      	cmp	r3, #64	; 0x40
 8009f86:	d010      	beq.n	8009faa <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8009f88:	e04d      	b.n	800a026 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8009f8a:	2b60      	cmp	r3, #96	; 0x60
 8009f8c:	d040      	beq.n	800a010 <TIM_SlaveTimer_SetConfig+0xec>
 8009f8e:	2b70      	cmp	r3, #112	; 0x70
 8009f90:	d000      	beq.n	8009f94 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8009f92:	e048      	b.n	800a026 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	68d9      	ldr	r1, [r3, #12]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	f000 f9e8 	bl	800a378 <TIM_ETR_SetConfig>
      break;
 8009fa8:	e03d      	b.n	800a026 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b05      	cmp	r3, #5
 8009fb0:	d101      	bne.n	8009fb6 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e038      	b.n	800a028 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6a1b      	ldr	r3, [r3, #32]
 8009fbc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6812      	ldr	r2, [r2, #0]
 8009fc6:	6a12      	ldr	r2, [r2, #32]
 8009fc8:	f022 0201 	bic.w	r2, r2, #1
 8009fcc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fdc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	011b      	lsls	r3, r3, #4
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	621a      	str	r2, [r3, #32]
      break;
 8009ffa:	e014      	b.n	800a026 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	6899      	ldr	r1, [r3, #8]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	461a      	mov	r2, r3
 800a00a:	f000 f885 	bl	800a118 <TIM_TI1_ConfigInputStage>
      break;
 800a00e:	e00a      	b.n	800a026 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	6899      	ldr	r1, [r3, #8]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	461a      	mov	r2, r3
 800a01e:	f000 f8e7 	bl	800a1f0 <TIM_TI2_ConfigInputStage>
      break;
 800a022:	e000      	b.n	800a026 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800a024:	bf00      	nop
  }
  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a030:	b480      	push	{r7}
 800a032:	b087      	sub	sp, #28
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	f023 0201 	bic.w	r2, r3, #1
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4a28      	ldr	r2, [pc, #160]	; (800a0fc <TIM_TI1_SetConfig+0xcc>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d01b      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a064:	d017      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4a25      	ldr	r2, [pc, #148]	; (800a100 <TIM_TI1_SetConfig+0xd0>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d013      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	4a24      	ldr	r2, [pc, #144]	; (800a104 <TIM_TI1_SetConfig+0xd4>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00f      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4a23      	ldr	r2, [pc, #140]	; (800a108 <TIM_TI1_SetConfig+0xd8>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00b      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4a22      	ldr	r2, [pc, #136]	; (800a10c <TIM_TI1_SetConfig+0xdc>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d007      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	4a21      	ldr	r2, [pc, #132]	; (800a110 <TIM_TI1_SetConfig+0xe0>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d003      	beq.n	800a096 <TIM_TI1_SetConfig+0x66>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4a20      	ldr	r2, [pc, #128]	; (800a114 <TIM_TI1_SetConfig+0xe4>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d101      	bne.n	800a09a <TIM_TI1_SetConfig+0x6a>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <TIM_TI1_SetConfig+0x6c>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d008      	beq.n	800a0b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	e003      	b.n	800a0ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f043 0301 	orr.w	r3, r3, #1
 800a0b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	011b      	lsls	r3, r3, #4
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f023 030a 	bic.w	r3, r3, #10
 800a0d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f003 030a 	and.w	r3, r3, #10
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	621a      	str	r2, [r3, #32]
}
 800a0ee:	bf00      	nop
 800a0f0:	371c      	adds	r7, #28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	40010000 	.word	0x40010000
 800a100:	40000400 	.word	0x40000400
 800a104:	40000800 	.word	0x40000800
 800a108:	40000c00 	.word	0x40000c00
 800a10c:	40010400 	.word	0x40010400
 800a110:	40014000 	.word	0x40014000
 800a114:	40001800 	.word	0x40001800

0800a118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a118:	b480      	push	{r7}
 800a11a:	b087      	sub	sp, #28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	f023 0201 	bic.w	r2, r3, #1
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	011b      	lsls	r3, r3, #4
 800a148:	693a      	ldr	r2, [r7, #16]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f023 030a 	bic.w	r3, r3, #10
 800a154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	621a      	str	r2, [r3, #32]
}
 800a16a:	bf00      	nop
 800a16c:	371c      	adds	r7, #28
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a176:	b480      	push	{r7}
 800a178:	b087      	sub	sp, #28
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	60f8      	str	r0, [r7, #12]
 800a17e:	60b9      	str	r1, [r7, #8]
 800a180:	607a      	str	r2, [r7, #4]
 800a182:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	f023 0210 	bic.w	r2, r3, #16
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	021b      	lsls	r3, r3, #8
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	031b      	lsls	r3, r3, #12
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	011b      	lsls	r3, r3, #4
 800a1ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	621a      	str	r2, [r3, #32]
}
 800a1e4:	bf00      	nop
 800a1e6:	371c      	adds	r7, #28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b087      	sub	sp, #28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6a1b      	ldr	r3, [r3, #32]
 800a200:	f023 0210 	bic.w	r2, r3, #16
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a21a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	031b      	lsls	r3, r3, #12
 800a220:	697a      	ldr	r2, [r7, #20]
 800a222:	4313      	orrs	r3, r2
 800a224:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a22c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	011b      	lsls	r3, r3, #4
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	4313      	orrs	r3, r2
 800a236:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	621a      	str	r2, [r3, #32]
}
 800a244:	bf00      	nop
 800a246:	371c      	adds	r7, #28
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f023 0303 	bic.w	r3, r3, #3
 800a27c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4313      	orrs	r3, r2
 800a284:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a28c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	b2db      	uxtb	r3, r3
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	4313      	orrs	r3, r2
 800a298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a2a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	021b      	lsls	r3, r3, #8
 800a2a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	621a      	str	r2, [r3, #32]
}
 800a2bc:	bf00      	nop
 800a2be:	371c      	adds	r7, #28
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	021b      	lsls	r3, r3, #8
 800a2fa:	697a      	ldr	r2, [r7, #20]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a306:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	031b      	lsls	r3, r3, #12
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	4313      	orrs	r3, r2
 800a312:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a31a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	031b      	lsls	r3, r3, #12
 800a320:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	4313      	orrs	r3, r2
 800a328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	621a      	str	r2, [r3, #32]
}
 800a336:	bf00      	nop
 800a338:	371c      	adds	r7, #28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a342:	b480      	push	{r7}
 800a344:	b085      	sub	sp, #20
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4313      	orrs	r3, r2
 800a360:	f043 0307 	orr.w	r3, r3, #7
 800a364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	609a      	str	r2, [r3, #8]
}
 800a36c:	bf00      	nop
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a378:	b480      	push	{r7}
 800a37a:	b087      	sub	sp, #28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	021a      	lsls	r2, r3, #8
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	431a      	orrs	r2, r3
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	609a      	str	r2, [r3, #8]
}
 800a3ac:	bf00      	nop
 800a3ae:	371c      	adds	r7, #28
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	f003 031f 	and.w	r3, r3, #31
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6a1a      	ldr	r2, [r3, #32]
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	43db      	mvns	r3, r3
 800a3da:	401a      	ands	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6a1a      	ldr	r2, [r3, #32]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f003 031f 	and.w	r3, r3, #31
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	621a      	str	r2, [r3, #32]
}
 800a3f6:	bf00      	nop
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
	...

0800a404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a414:	2b01      	cmp	r3, #1
 800a416:	d101      	bne.n	800a41c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a418:	2302      	movs	r3, #2
 800a41a:	e05a      	b.n	800a4d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a21      	ldr	r2, [pc, #132]	; (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d022      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a468:	d01d      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1d      	ldr	r2, [pc, #116]	; (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d018      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a1b      	ldr	r2, [pc, #108]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d013      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1a      	ldr	r2, [pc, #104]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d00e      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a18      	ldr	r2, [pc, #96]	; (800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d009      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a17      	ldr	r2, [pc, #92]	; (800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d004      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a15      	ldr	r2, [pc, #84]	; (800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d10c      	bne.n	800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	40010000 	.word	0x40010000
 800a4e4:	40000400 	.word	0x40000400
 800a4e8:	40000800 	.word	0x40000800
 800a4ec:	40000c00 	.word	0x40000c00
 800a4f0:	40010400 	.word	0x40010400
 800a4f4:	40014000 	.word	0x40014000
 800a4f8:	40001800 	.word	0x40001800

0800a4fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e03f      	b.n	800a5b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d106      	bne.n	800a550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f7fb fbea 	bl	8005d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2224      	movs	r2, #36	; 0x24
 800a554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	6812      	ldr	r2, [r2, #0]
 800a560:	68d2      	ldr	r2, [r2, #12]
 800a562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fc6b 	bl	800ae44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	6912      	ldr	r2, [r2, #16]
 800a578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a57c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	6812      	ldr	r2, [r2, #0]
 800a586:	6952      	ldr	r2, [r2, #20]
 800a588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a58c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	6812      	ldr	r2, [r2, #0]
 800a596:	68d2      	ldr	r2, [r2, #12]
 800a598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a59c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2220      	movs	r2, #32
 800a5b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b088      	sub	sp, #32
 800a5c2:	af02      	add	r7, sp, #8
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	603b      	str	r3, [r7, #0]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	f040 8082 	bne.w	800a6e4 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <HAL_UART_Transmit+0x2e>
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e07a      	b.n	800a6e6 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d101      	bne.n	800a5fe <HAL_UART_Transmit+0x40>
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	e073      	b.n	800a6e6 <HAL_UART_Transmit+0x128>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2201      	movs	r2, #1
 800a602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2221      	movs	r2, #33	; 0x21
 800a610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a614:	f7fb fdd2 	bl	80061bc <HAL_GetTick>
 800a618:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	88fa      	ldrh	r2, [r7, #6]
 800a61e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	88fa      	ldrh	r2, [r7, #6]
 800a624:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a62e:	e041      	b.n	800a6b4 <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a634:	b29b      	uxth	r3, r3
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a646:	d121      	bne.n	800a68c <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	2200      	movs	r2, #0
 800a650:	2180      	movs	r1, #128	; 0x80
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 fa76 	bl	800ab44 <UART_WaitOnFlagUntilTimeout>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e041      	b.n	800a6e6 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	8812      	ldrh	r2, [r2, #0]
 800a66e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a672:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d103      	bne.n	800a684 <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	3302      	adds	r3, #2
 800a680:	60bb      	str	r3, [r7, #8]
 800a682:	e017      	b.n	800a6b4 <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	3301      	adds	r3, #1
 800a688:	60bb      	str	r3, [r7, #8]
 800a68a:	e013      	b.n	800a6b4 <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	2200      	movs	r2, #0
 800a694:	2180      	movs	r1, #128	; 0x80
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 fa54 	bl	800ab44 <UART_WaitOnFlagUntilTimeout>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	e01f      	b.n	800a6e6 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	1c59      	adds	r1, r3, #1
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1b8      	bne.n	800a630 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2140      	movs	r1, #64	; 0x40
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 fa3b 	bl	800ab44 <UART_WaitOnFlagUntilTimeout>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e006      	b.n	800a6e6 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e000      	b.n	800a6e6 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800a6e4:	2302      	movs	r3, #2
  }
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
	...

0800a6f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b20      	cmp	r3, #32
 800a708:	d166      	bne.n	800a7d8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <HAL_UART_Receive_DMA+0x26>
 800a710:	88fb      	ldrh	r3, [r7, #6]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e05f      	b.n	800a7da <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_UART_Receive_DMA+0x38>
 800a724:	2302      	movs	r3, #2
 800a726:	e058      	b.n	800a7da <HAL_UART_Receive_DMA+0xea>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	88fa      	ldrh	r2, [r7, #6]
 800a73a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2222      	movs	r2, #34	; 0x22
 800a746:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74e:	4a25      	ldr	r2, [pc, #148]	; (800a7e4 <HAL_UART_Receive_DMA+0xf4>)
 800a750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a756:	4a24      	ldr	r2, [pc, #144]	; (800a7e8 <HAL_UART_Receive_DMA+0xf8>)
 800a758:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75e:	4a23      	ldr	r2, [pc, #140]	; (800a7ec <HAL_UART_Receive_DMA+0xfc>)
 800a760:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a766:	2200      	movs	r2, #0
 800a768:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800a76a:	f107 0308 	add.w	r3, r7, #8
 800a76e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3304      	adds	r3, #4
 800a77a:	4619      	mov	r1, r3
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	88fb      	ldrh	r3, [r7, #6]
 800a782:	f7fc fad3 	bl	8006d2c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a786:	2300      	movs	r3, #0
 800a788:	613b      	str	r3, [r7, #16]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	613b      	str	r3, [r7, #16]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	613b      	str	r3, [r7, #16]
 800a79a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	6812      	ldr	r2, [r2, #0]
 800a7ac:	68d2      	ldr	r2, [r2, #12]
 800a7ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	6812      	ldr	r2, [r2, #0]
 800a7bc:	6952      	ldr	r2, [r2, #20]
 800a7be:	f042 0201 	orr.w	r2, r2, #1
 800a7c2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	6812      	ldr	r2, [r2, #0]
 800a7cc:	6952      	ldr	r2, [r2, #20]
 800a7ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7d2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	e000      	b.n	800a7da <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a7d8:	2302      	movs	r3, #2
  }
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	0800aa2d 	.word	0x0800aa2d
 800a7e8:	0800aa95 	.word	0x0800aa95
 800a7ec:	0800aab1 	.word	0x0800aab1

0800a7f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b088      	sub	sp, #32
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a810:	2300      	movs	r3, #0
 800a812:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a814:	2300      	movs	r3, #0
 800a816:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	f003 030f 	and.w	r3, r3, #15
 800a81e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10d      	bne.n	800a842 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d008      	beq.n	800a842 <HAL_UART_IRQHandler+0x52>
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fa81 	bl	800ad42 <UART_Receive_IT>
      return;
 800a840:	e0d1      	b.n	800a9e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 80b0 	beq.w	800a9aa <HAL_UART_IRQHandler+0x1ba>
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	2b00      	cmp	r3, #0
 800a852:	d105      	bne.n	800a860 <HAL_UART_IRQHandler+0x70>
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f000 80a5 	beq.w	800a9aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <HAL_UART_IRQHandler+0x90>
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a878:	f043 0201 	orr.w	r2, r3, #1
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	f003 0304 	and.w	r3, r3, #4
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <HAL_UART_IRQHandler+0xb0>
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a898:	f043 0202 	orr.w	r2, r3, #2
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	f003 0302 	and.w	r3, r3, #2
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <HAL_UART_IRQHandler+0xd0>
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d005      	beq.n	800a8c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b8:	f043 0204 	orr.w	r2, r3, #4
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	f003 0308 	and.w	r3, r3, #8
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00f      	beq.n	800a8ea <HAL_UART_IRQHandler+0xfa>
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	f003 0320 	and.w	r3, r3, #32
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d104      	bne.n	800a8de <HAL_UART_IRQHandler+0xee>
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d005      	beq.n	800a8ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e2:	f043 0208 	orr.w	r2, r3, #8
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d078      	beq.n	800a9e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	f003 0320 	and.w	r3, r3, #32
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d007      	beq.n	800a90c <HAL_UART_IRQHandler+0x11c>
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	f003 0320 	and.w	r3, r3, #32
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fa1b 	bl	800ad42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a916:	2b40      	cmp	r3, #64	; 0x40
 800a918:	bf0c      	ite	eq
 800a91a:	2301      	moveq	r3, #1
 800a91c:	2300      	movne	r3, #0
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a926:	f003 0308 	and.w	r3, r3, #8
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d102      	bne.n	800a934 <HAL_UART_IRQHandler+0x144>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d031      	beq.n	800a998 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f965 	bl	800ac04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a944:	2b40      	cmp	r3, #64	; 0x40
 800a946:	d123      	bne.n	800a990 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	6812      	ldr	r2, [r2, #0]
 800a950:	6952      	ldr	r2, [r2, #20]
 800a952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a956:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d013      	beq.n	800a988 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a964:	4a21      	ldr	r2, [pc, #132]	; (800a9ec <HAL_UART_IRQHandler+0x1fc>)
 800a966:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fc fa35 	bl	8006ddc <HAL_DMA_Abort_IT>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d016      	beq.n	800a9a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a982:	4610      	mov	r0, r2
 800a984:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a986:	e00e      	b.n	800a9a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f845 	bl	800aa18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a98e:	e00a      	b.n	800a9a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 f841 	bl	800aa18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a996:	e006      	b.n	800a9a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f83d 	bl	800aa18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a9a4:	e01e      	b.n	800a9e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a6:	bf00      	nop
    return;
 800a9a8:	e01c      	b.n	800a9e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d008      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x1d6>
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f952 	bl	800ac68 <UART_Transmit_IT>
    return;
 800a9c4:	e00f      	b.n	800a9e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00a      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x1f6>
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f999 	bl	800ad12 <UART_EndTransmit_IT>
    return;
 800a9e0:	bf00      	nop
 800a9e2:	e000      	b.n	800a9e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 800a9e4:	bf00      	nop
  }
}
 800a9e6:	3720      	adds	r7, #32
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	0800ac41 	.word	0x0800ac41

0800a9f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa38:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d11e      	bne.n	800aa86 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	6812      	ldr	r2, [r2, #0]
 800aa56:	68d2      	ldr	r2, [r2, #12]
 800aa58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa5c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	6812      	ldr	r2, [r2, #0]
 800aa66:	6952      	ldr	r2, [r2, #20]
 800aa68:	f022 0201 	bic.w	r2, r2, #1
 800aa6c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	6812      	ldr	r2, [r2, #0]
 800aa76:	6952      	ldr	r2, [r2, #20]
 800aa78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa7c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2220      	movs	r2, #32
 800aa82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7f6 fbcc 	bl	8001224 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa8c:	bf00      	nop
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7ff ffae 	bl	800aa04 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaa8:	bf00      	nop
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aab8:	2300      	movs	r3, #0
 800aaba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aacc:	2b80      	cmp	r3, #128	; 0x80
 800aace:	bf0c      	ite	eq
 800aad0:	2301      	moveq	r3, #1
 800aad2:	2300      	movne	r3, #0
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b21      	cmp	r3, #33	; 0x21
 800aae2:	d108      	bne.n	800aaf6 <UART_DMAError+0x46>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2200      	movs	r2, #0
 800aaee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aaf0:	68b8      	ldr	r0, [r7, #8]
 800aaf2:	f000 f871 	bl	800abd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab00:	2b40      	cmp	r3, #64	; 0x40
 800ab02:	bf0c      	ite	eq
 800ab04:	2301      	moveq	r3, #1
 800ab06:	2300      	movne	r3, #0
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	2b22      	cmp	r3, #34	; 0x22
 800ab16:	d108      	bne.n	800ab2a <UART_DMAError+0x7a>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d005      	beq.n	800ab2a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	2200      	movs	r2, #0
 800ab22:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ab24:	68b8      	ldr	r0, [r7, #8]
 800ab26:	f000 f86d 	bl	800ac04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2e:	f043 0210 	orr.w	r2, r3, #16
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab36:	68b8      	ldr	r0, [r7, #8]
 800ab38:	f7ff ff6e 	bl	800aa18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab3c:	bf00      	nop
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	603b      	str	r3, [r7, #0]
 800ab50:	4613      	mov	r3, r2
 800ab52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab54:	e02c      	b.n	800abb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab5c:	d028      	beq.n	800abb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d007      	beq.n	800ab74 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab64:	f7fb fb2a 	bl	80061bc <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	1ad2      	subs	r2, r2, r3
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d91d      	bls.n	800abb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	6812      	ldr	r2, [r2, #0]
 800ab7c:	68d2      	ldr	r2, [r2, #12]
 800ab7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	6812      	ldr	r2, [r2, #0]
 800ab8c:	6952      	ldr	r2, [r2, #20]
 800ab8e:	f022 0201 	bic.w	r2, r2, #1
 800ab92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2220      	movs	r2, #32
 800ab98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800abac:	2303      	movs	r3, #3
 800abae:	e00f      	b.n	800abd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	401a      	ands	r2, r3
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	bf0c      	ite	eq
 800abc0:	2301      	moveq	r3, #1
 800abc2:	2300      	movne	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	461a      	mov	r2, r3
 800abc8:	79fb      	ldrb	r3, [r7, #7]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d0c3      	beq.n	800ab56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	6812      	ldr	r2, [r2, #0]
 800abe8:	68d2      	ldr	r2, [r2, #12]
 800abea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800abee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2220      	movs	r2, #32
 800abf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	6812      	ldr	r2, [r2, #0]
 800ac14:	68d2      	ldr	r2, [r2, #12]
 800ac16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	6812      	ldr	r2, [r2, #0]
 800ac24:	6952      	ldr	r2, [r2, #20]
 800ac26:	f022 0201 	bic.w	r2, r2, #1
 800ac2a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff fedc 	bl	800aa18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac60:	bf00      	nop
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b21      	cmp	r3, #33	; 0x21
 800ac7a:	d143      	bne.n	800ad04 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac84:	d119      	bne.n	800acba <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	8812      	ldrh	r2, [r2, #0]
 800ac94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac98:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d105      	bne.n	800acae <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	1c9a      	adds	r2, r3, #2
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	621a      	str	r2, [r3, #32]
 800acac:	e00e      	b.n	800accc <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	621a      	str	r2, [r3, #32]
 800acb8:	e008      	b.n	800accc <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	1c58      	adds	r0, r3, #1
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	6208      	str	r0, [r1, #32]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	3b01      	subs	r3, #1
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	4619      	mov	r1, r3
 800acda:	84d1      	strh	r1, [r2, #38]	; 0x26
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10f      	bne.n	800ad00 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	6812      	ldr	r2, [r2, #0]
 800ace8:	68d2      	ldr	r2, [r2, #12]
 800acea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	6812      	ldr	r2, [r2, #0]
 800acf8:	68d2      	ldr	r2, [r2, #12]
 800acfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	e000      	b.n	800ad06 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800ad04:	2302      	movs	r3, #2
  }
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	6812      	ldr	r2, [r2, #0]
 800ad22:	68d2      	ldr	r2, [r2, #12]
 800ad24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2220      	movs	r2, #32
 800ad2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff fe5c 	bl	800a9f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b084      	sub	sp, #16
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b22      	cmp	r3, #34	; 0x22
 800ad54:	d171      	bne.n	800ae3a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad5e:	d123      	bne.n	800ada8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad64:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d10e      	bne.n	800ad8c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad84:	1c9a      	adds	r2, r3, #2
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	629a      	str	r2, [r3, #40]	; 0x28
 800ad8a:	e029      	b.n	800ade0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada0:	1c5a      	adds	r2, r3, #1
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	629a      	str	r2, [r3, #40]	; 0x28
 800ada6:	e01b      	b.n	800ade0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10a      	bne.n	800adc6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb4:	1c59      	adds	r1, r3, #1
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	6291      	str	r1, [r2, #40]	; 0x28
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	6812      	ldr	r2, [r2, #0]
 800adbe:	6852      	ldr	r2, [r2, #4]
 800adc0:	b2d2      	uxtb	r2, r2
 800adc2:	701a      	strb	r2, [r3, #0]
 800adc4:	e00c      	b.n	800ade0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adca:	1c59      	adds	r1, r3, #1
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	6291      	str	r1, [r2, #40]	; 0x28
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	6812      	ldr	r2, [r2, #0]
 800add4:	6852      	ldr	r2, [r2, #4]
 800add6:	b2d2      	uxtb	r2, r2
 800add8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800addc:	b2d2      	uxtb	r2, r2
 800adde:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	3b01      	subs	r3, #1
 800ade8:	b29b      	uxth	r3, r3
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	4619      	mov	r1, r3
 800adee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d120      	bne.n	800ae36 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6812      	ldr	r2, [r2, #0]
 800adfc:	68d2      	ldr	r2, [r2, #12]
 800adfe:	f022 0220 	bic.w	r2, r2, #32
 800ae02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	6812      	ldr	r2, [r2, #0]
 800ae0c:	68d2      	ldr	r2, [r2, #12]
 800ae0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	6812      	ldr	r2, [r2, #0]
 800ae1c:	6952      	ldr	r2, [r2, #20]
 800ae1e:	f022 0201 	bic.w	r2, r2, #1
 800ae22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2220      	movs	r2, #32
 800ae28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7f6 f9f9 	bl	8001224 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	e002      	b.n	800ae3c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	e000      	b.n	800ae3c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ae3a:	2302      	movs	r3, #2
  }
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae48:	b0a3      	sub	sp, #140	; 0x8c
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae50:	6819      	ldr	r1, [r3, #0]
 800ae52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ae5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	431a      	orrs	r2, r3
 800ae74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 800ae7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae80:	6819      	ldr	r1, [r3, #0]
 800ae82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 800ae8c:	f022 020c 	bic.w	r2, r2, #12
 800ae90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae94:	4313      	orrs	r3, r2
 800ae96:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae9a:	6819      	ldr	r1, [r3, #0]
 800ae9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aea6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aea8:	699b      	ldr	r3, [r3, #24]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aeb0:	69db      	ldr	r3, [r3, #28]
 800aeb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeb6:	f040 8171 	bne.w	800b19c <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aeba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4ab4      	ldr	r2, [pc, #720]	; (800b190 <UART_SetConfig+0x34c>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d005      	beq.n	800aed0 <UART_SetConfig+0x8c>
 800aec4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4ab2      	ldr	r2, [pc, #712]	; (800b194 <UART_SetConfig+0x350>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	f040 80b1 	bne.w	800b032 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aed0:	f7fd fc62 	bl	8008798 <HAL_RCC_GetPCLK2Freq>
 800aed4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aeda:	681d      	ldr	r5, [r3, #0]
 800aedc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aee0:	4619      	mov	r1, r3
 800aee2:	f04f 0200 	mov.w	r2, #0
 800aee6:	460b      	mov	r3, r1
 800aee8:	4614      	mov	r4, r2
 800aeea:	18db      	adds	r3, r3, r3
 800aeec:	eb44 0404 	adc.w	r4, r4, r4
 800aef0:	185b      	adds	r3, r3, r1
 800aef2:	eb44 0402 	adc.w	r4, r4, r2
 800aef6:	00e0      	lsls	r0, r4, #3
 800aef8:	6478      	str	r0, [r7, #68]	; 0x44
 800aefa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800aefc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800af00:	6478      	str	r0, [r7, #68]	; 0x44
 800af02:	00db      	lsls	r3, r3, #3
 800af04:	643b      	str	r3, [r7, #64]	; 0x40
 800af06:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800af0a:	eb13 0801 	adds.w	r8, r3, r1
 800af0e:	eb44 0902 	adc.w	r9, r4, r2
 800af12:	4640      	mov	r0, r8
 800af14:	4649      	mov	r1, r9
 800af16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f04f 0400 	mov.w	r4, #0
 800af1e:	18db      	adds	r3, r3, r3
 800af20:	eb44 0404 	adc.w	r4, r4, r4
 800af24:	461a      	mov	r2, r3
 800af26:	4623      	mov	r3, r4
 800af28:	f7f5 fde4 	bl	8000af4 <__aeabi_uldivmod>
 800af2c:	4603      	mov	r3, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	461a      	mov	r2, r3
 800af32:	4b99      	ldr	r3, [pc, #612]	; (800b198 <UART_SetConfig+0x354>)
 800af34:	fba3 2302 	umull	r2, r3, r3, r2
 800af38:	095b      	lsrs	r3, r3, #5
 800af3a:	011e      	lsls	r6, r3, #4
 800af3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af40:	4619      	mov	r1, r3
 800af42:	f04f 0200 	mov.w	r2, #0
 800af46:	460b      	mov	r3, r1
 800af48:	4614      	mov	r4, r2
 800af4a:	18db      	adds	r3, r3, r3
 800af4c:	eb44 0404 	adc.w	r4, r4, r4
 800af50:	185b      	adds	r3, r3, r1
 800af52:	eb44 0402 	adc.w	r4, r4, r2
 800af56:	00e0      	lsls	r0, r4, #3
 800af58:	63f8      	str	r0, [r7, #60]	; 0x3c
 800af5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800af5c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800af60:	63f8      	str	r0, [r7, #60]	; 0x3c
 800af62:	00db      	lsls	r3, r3, #3
 800af64:	63bb      	str	r3, [r7, #56]	; 0x38
 800af66:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800af6a:	eb13 0801 	adds.w	r8, r3, r1
 800af6e:	eb44 0902 	adc.w	r9, r4, r2
 800af72:	4640      	mov	r0, r8
 800af74:	4649      	mov	r1, r9
 800af76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f04f 0400 	mov.w	r4, #0
 800af7e:	18db      	adds	r3, r3, r3
 800af80:	eb44 0404 	adc.w	r4, r4, r4
 800af84:	461a      	mov	r2, r3
 800af86:	4623      	mov	r3, r4
 800af88:	f7f5 fdb4 	bl	8000af4 <__aeabi_uldivmod>
 800af8c:	4603      	mov	r3, r0
 800af8e:	460c      	mov	r4, r1
 800af90:	461a      	mov	r2, r3
 800af92:	4b81      	ldr	r3, [pc, #516]	; (800b198 <UART_SetConfig+0x354>)
 800af94:	fba3 1302 	umull	r1, r3, r3, r2
 800af98:	095b      	lsrs	r3, r3, #5
 800af9a:	2164      	movs	r1, #100	; 0x64
 800af9c:	fb01 f303 	mul.w	r3, r1, r3
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	00db      	lsls	r3, r3, #3
 800afa4:	3332      	adds	r3, #50	; 0x32
 800afa6:	4a7c      	ldr	r2, [pc, #496]	; (800b198 <UART_SetConfig+0x354>)
 800afa8:	fba2 2303 	umull	r2, r3, r2, r3
 800afac:	095b      	lsrs	r3, r3, #5
 800afae:	005b      	lsls	r3, r3, #1
 800afb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800afb4:	441e      	add	r6, r3
 800afb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800afba:	4619      	mov	r1, r3
 800afbc:	f04f 0200 	mov.w	r2, #0
 800afc0:	460b      	mov	r3, r1
 800afc2:	4614      	mov	r4, r2
 800afc4:	18db      	adds	r3, r3, r3
 800afc6:	eb44 0404 	adc.w	r4, r4, r4
 800afca:	185b      	adds	r3, r3, r1
 800afcc:	eb44 0402 	adc.w	r4, r4, r2
 800afd0:	00e0      	lsls	r0, r4, #3
 800afd2:	6378      	str	r0, [r7, #52]	; 0x34
 800afd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800afd6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800afda:	6378      	str	r0, [r7, #52]	; 0x34
 800afdc:	00db      	lsls	r3, r3, #3
 800afde:	633b      	str	r3, [r7, #48]	; 0x30
 800afe0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800afe4:	eb13 0801 	adds.w	r8, r3, r1
 800afe8:	eb44 0902 	adc.w	r9, r4, r2
 800afec:	4640      	mov	r0, r8
 800afee:	4649      	mov	r1, r9
 800aff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	f04f 0400 	mov.w	r4, #0
 800aff8:	18db      	adds	r3, r3, r3
 800affa:	eb44 0404 	adc.w	r4, r4, r4
 800affe:	461a      	mov	r2, r3
 800b000:	4623      	mov	r3, r4
 800b002:	f7f5 fd77 	bl	8000af4 <__aeabi_uldivmod>
 800b006:	4603      	mov	r3, r0
 800b008:	460c      	mov	r4, r1
 800b00a:	461a      	mov	r2, r3
 800b00c:	4b62      	ldr	r3, [pc, #392]	; (800b198 <UART_SetConfig+0x354>)
 800b00e:	fba3 1302 	umull	r1, r3, r3, r2
 800b012:	095b      	lsrs	r3, r3, #5
 800b014:	2164      	movs	r1, #100	; 0x64
 800b016:	fb01 f303 	mul.w	r3, r1, r3
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	3332      	adds	r3, #50	; 0x32
 800b020:	4a5d      	ldr	r2, [pc, #372]	; (800b198 <UART_SetConfig+0x354>)
 800b022:	fba2 2303 	umull	r2, r3, r2, r3
 800b026:	095b      	lsrs	r3, r3, #5
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	4433      	add	r3, r6
 800b02e:	60ab      	str	r3, [r5, #8]
 800b030:	e240      	b.n	800b4b4 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b032:	f7fd fb9d 	bl	8008770 <HAL_RCC_GetPCLK1Freq>
 800b036:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b03a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	673a      	str	r2, [r7, #112]	; 0x70
 800b040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b044:	4619      	mov	r1, r3
 800b046:	f04f 0200 	mov.w	r2, #0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4614      	mov	r4, r2
 800b04e:	18db      	adds	r3, r3, r3
 800b050:	eb44 0404 	adc.w	r4, r4, r4
 800b054:	185b      	adds	r3, r3, r1
 800b056:	eb44 0402 	adc.w	r4, r4, r2
 800b05a:	00e0      	lsls	r0, r4, #3
 800b05c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b05e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b060:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800b064:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	62bb      	str	r3, [r7, #40]	; 0x28
 800b06a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800b06e:	185d      	adds	r5, r3, r1
 800b070:	eb44 0602 	adc.w	r6, r4, r2
 800b074:	4628      	mov	r0, r5
 800b076:	4631      	mov	r1, r6
 800b078:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	f04f 0400 	mov.w	r4, #0
 800b080:	18db      	adds	r3, r3, r3
 800b082:	eb44 0404 	adc.w	r4, r4, r4
 800b086:	461a      	mov	r2, r3
 800b088:	4623      	mov	r3, r4
 800b08a:	f7f5 fd33 	bl	8000af4 <__aeabi_uldivmod>
 800b08e:	4603      	mov	r3, r0
 800b090:	460c      	mov	r4, r1
 800b092:	461a      	mov	r2, r3
 800b094:	4b40      	ldr	r3, [pc, #256]	; (800b198 <UART_SetConfig+0x354>)
 800b096:	fba3 2302 	umull	r2, r3, r3, r2
 800b09a:	095b      	lsrs	r3, r3, #5
 800b09c:	011e      	lsls	r6, r3, #4
 800b09e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	f04f 0200 	mov.w	r2, #0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	4614      	mov	r4, r2
 800b0ac:	18db      	adds	r3, r3, r3
 800b0ae:	eb44 0404 	adc.w	r4, r4, r4
 800b0b2:	185b      	adds	r3, r3, r1
 800b0b4:	eb44 0402 	adc.w	r4, r4, r2
 800b0b8:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800b0bc:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800b0c0:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 800b0c4:	4653      	mov	r3, sl
 800b0c6:	465c      	mov	r4, fp
 800b0c8:	eb13 0a01 	adds.w	sl, r3, r1
 800b0cc:	eb44 0b02 	adc.w	fp, r4, r2
 800b0d0:	4650      	mov	r0, sl
 800b0d2:	4659      	mov	r1, fp
 800b0d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f04f 0400 	mov.w	r4, #0
 800b0dc:	18db      	adds	r3, r3, r3
 800b0de:	eb44 0404 	adc.w	r4, r4, r4
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	4623      	mov	r3, r4
 800b0e6:	f7f5 fd05 	bl	8000af4 <__aeabi_uldivmod>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	4b29      	ldr	r3, [pc, #164]	; (800b198 <UART_SetConfig+0x354>)
 800b0f2:	fba3 1302 	umull	r1, r3, r3, r2
 800b0f6:	095b      	lsrs	r3, r3, #5
 800b0f8:	2164      	movs	r1, #100	; 0x64
 800b0fa:	fb01 f303 	mul.w	r3, r1, r3
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	00db      	lsls	r3, r3, #3
 800b102:	3332      	adds	r3, #50	; 0x32
 800b104:	4a24      	ldr	r2, [pc, #144]	; (800b198 <UART_SetConfig+0x354>)
 800b106:	fba2 2303 	umull	r2, r3, r2, r3
 800b10a:	095b      	lsrs	r3, r3, #5
 800b10c:	005b      	lsls	r3, r3, #1
 800b10e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b112:	441e      	add	r6, r3
 800b114:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b118:	4619      	mov	r1, r3
 800b11a:	f04f 0200 	mov.w	r2, #0
 800b11e:	460b      	mov	r3, r1
 800b120:	4614      	mov	r4, r2
 800b122:	18db      	adds	r3, r3, r3
 800b124:	eb44 0404 	adc.w	r4, r4, r4
 800b128:	185b      	adds	r3, r3, r1
 800b12a:	eb44 0402 	adc.w	r4, r4, r2
 800b12e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800b132:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800b136:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800b13a:	4643      	mov	r3, r8
 800b13c:	464c      	mov	r4, r9
 800b13e:	eb13 0801 	adds.w	r8, r3, r1
 800b142:	eb44 0902 	adc.w	r9, r4, r2
 800b146:	4640      	mov	r0, r8
 800b148:	4649      	mov	r1, r9
 800b14a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f04f 0400 	mov.w	r4, #0
 800b152:	18db      	adds	r3, r3, r3
 800b154:	eb44 0404 	adc.w	r4, r4, r4
 800b158:	461a      	mov	r2, r3
 800b15a:	4623      	mov	r3, r4
 800b15c:	f7f5 fcca 	bl	8000af4 <__aeabi_uldivmod>
 800b160:	4603      	mov	r3, r0
 800b162:	460c      	mov	r4, r1
 800b164:	461a      	mov	r2, r3
 800b166:	4b0c      	ldr	r3, [pc, #48]	; (800b198 <UART_SetConfig+0x354>)
 800b168:	fba3 1302 	umull	r1, r3, r3, r2
 800b16c:	095b      	lsrs	r3, r3, #5
 800b16e:	2164      	movs	r1, #100	; 0x64
 800b170:	fb01 f303 	mul.w	r3, r1, r3
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	00db      	lsls	r3, r3, #3
 800b178:	3332      	adds	r3, #50	; 0x32
 800b17a:	4a07      	ldr	r2, [pc, #28]	; (800b198 <UART_SetConfig+0x354>)
 800b17c:	fba2 2303 	umull	r2, r3, r2, r3
 800b180:	095b      	lsrs	r3, r3, #5
 800b182:	f003 0307 	and.w	r3, r3, #7
 800b186:	4433      	add	r3, r6
 800b188:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b18a:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b18c:	e192      	b.n	800b4b4 <UART_SetConfig+0x670>
 800b18e:	bf00      	nop
 800b190:	40011000 	.word	0x40011000
 800b194:	40011400 	.word	0x40011400
 800b198:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b19c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	4bc1      	ldr	r3, [pc, #772]	; (800b4a8 <UART_SetConfig+0x664>)
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d005      	beq.n	800b1b2 <UART_SetConfig+0x36e>
 800b1a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	4bc0      	ldr	r3, [pc, #768]	; (800b4ac <UART_SetConfig+0x668>)
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	f040 80bf 	bne.w	800b330 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b1b2:	f7fd faf1 	bl	8008798 <HAL_RCC_GetPCLK2Freq>
 800b1b6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b1ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b1bc:	681e      	ldr	r6, [r3, #0]
 800b1be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	f04f 0200 	mov.w	r2, #0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	4614      	mov	r4, r2
 800b1cc:	18db      	adds	r3, r3, r3
 800b1ce:	eb44 0404 	adc.w	r4, r4, r4
 800b1d2:	185b      	adds	r3, r3, r1
 800b1d4:	eb44 0402 	adc.w	r4, r4, r2
 800b1d8:	00e0      	lsls	r0, r4, #3
 800b1da:	6278      	str	r0, [r7, #36]	; 0x24
 800b1dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1de:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800b1e2:	6278      	str	r0, [r7, #36]	; 0x24
 800b1e4:	00db      	lsls	r3, r3, #3
 800b1e6:	623b      	str	r3, [r7, #32]
 800b1e8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b1ec:	eb13 0801 	adds.w	r8, r3, r1
 800b1f0:	eb44 0902 	adc.w	r9, r4, r2
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f04f 0400 	mov.w	r4, #0
 800b200:	00a2      	lsls	r2, r4, #2
 800b202:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b204:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b206:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800b20a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b210:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b214:	f7f5 fc6e 	bl	8000af4 <__aeabi_uldivmod>
 800b218:	4603      	mov	r3, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	461a      	mov	r2, r3
 800b21e:	4ba4      	ldr	r3, [pc, #656]	; (800b4b0 <UART_SetConfig+0x66c>)
 800b220:	fba3 2302 	umull	r2, r3, r3, r2
 800b224:	095b      	lsrs	r3, r3, #5
 800b226:	011d      	lsls	r5, r3, #4
 800b228:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b22c:	4619      	mov	r1, r3
 800b22e:	f04f 0200 	mov.w	r2, #0
 800b232:	460b      	mov	r3, r1
 800b234:	4614      	mov	r4, r2
 800b236:	18db      	adds	r3, r3, r3
 800b238:	eb44 0404 	adc.w	r4, r4, r4
 800b23c:	185b      	adds	r3, r3, r1
 800b23e:	eb44 0402 	adc.w	r4, r4, r2
 800b242:	00e0      	lsls	r0, r4, #3
 800b244:	61f8      	str	r0, [r7, #28]
 800b246:	69f8      	ldr	r0, [r7, #28]
 800b248:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800b24c:	61f8      	str	r0, [r7, #28]
 800b24e:	00db      	lsls	r3, r3, #3
 800b250:	61bb      	str	r3, [r7, #24]
 800b252:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b256:	eb13 0801 	adds.w	r8, r3, r1
 800b25a:	eb44 0902 	adc.w	r9, r4, r2
 800b25e:	4640      	mov	r0, r8
 800b260:	4649      	mov	r1, r9
 800b262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f04f 0400 	mov.w	r4, #0
 800b26a:	00a2      	lsls	r2, r4, #2
 800b26c:	657a      	str	r2, [r7, #84]	; 0x54
 800b26e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b270:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800b274:	657a      	str	r2, [r7, #84]	; 0x54
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	653b      	str	r3, [r7, #80]	; 0x50
 800b27a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b27e:	f7f5 fc39 	bl	8000af4 <__aeabi_uldivmod>
 800b282:	4603      	mov	r3, r0
 800b284:	460c      	mov	r4, r1
 800b286:	461a      	mov	r2, r3
 800b288:	4b89      	ldr	r3, [pc, #548]	; (800b4b0 <UART_SetConfig+0x66c>)
 800b28a:	fba3 1302 	umull	r1, r3, r3, r2
 800b28e:	095b      	lsrs	r3, r3, #5
 800b290:	2164      	movs	r1, #100	; 0x64
 800b292:	fb01 f303 	mul.w	r3, r1, r3
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	011b      	lsls	r3, r3, #4
 800b29a:	3332      	adds	r3, #50	; 0x32
 800b29c:	4a84      	ldr	r2, [pc, #528]	; (800b4b0 <UART_SetConfig+0x66c>)
 800b29e:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a2:	095b      	lsrs	r3, r3, #5
 800b2a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2a8:	441d      	add	r5, r3
 800b2aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	f04f 0200 	mov.w	r2, #0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	4614      	mov	r4, r2
 800b2b8:	18db      	adds	r3, r3, r3
 800b2ba:	eb44 0404 	adc.w	r4, r4, r4
 800b2be:	185b      	adds	r3, r3, r1
 800b2c0:	eb44 0402 	adc.w	r4, r4, r2
 800b2c4:	00e0      	lsls	r0, r4, #3
 800b2c6:	6178      	str	r0, [r7, #20]
 800b2c8:	6978      	ldr	r0, [r7, #20]
 800b2ca:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800b2ce:	6178      	str	r0, [r7, #20]
 800b2d0:	00db      	lsls	r3, r3, #3
 800b2d2:	613b      	str	r3, [r7, #16]
 800b2d4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b2d8:	eb13 0801 	adds.w	r8, r3, r1
 800b2dc:	eb44 0902 	adc.w	r9, r4, r2
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	f04f 0400 	mov.w	r4, #0
 800b2ec:	00a2      	lsls	r2, r4, #2
 800b2ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b2f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2f2:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800b2f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b300:	f7f5 fbf8 	bl	8000af4 <__aeabi_uldivmod>
 800b304:	4603      	mov	r3, r0
 800b306:	460c      	mov	r4, r1
 800b308:	461a      	mov	r2, r3
 800b30a:	4b69      	ldr	r3, [pc, #420]	; (800b4b0 <UART_SetConfig+0x66c>)
 800b30c:	fba3 1302 	umull	r1, r3, r3, r2
 800b310:	095b      	lsrs	r3, r3, #5
 800b312:	2164      	movs	r1, #100	; 0x64
 800b314:	fb01 f303 	mul.w	r3, r1, r3
 800b318:	1ad3      	subs	r3, r2, r3
 800b31a:	011b      	lsls	r3, r3, #4
 800b31c:	3332      	adds	r3, #50	; 0x32
 800b31e:	4a64      	ldr	r2, [pc, #400]	; (800b4b0 <UART_SetConfig+0x66c>)
 800b320:	fba2 2303 	umull	r2, r3, r2, r3
 800b324:	095b      	lsrs	r3, r3, #5
 800b326:	f003 030f 	and.w	r3, r3, #15
 800b32a:	442b      	add	r3, r5
 800b32c:	60b3      	str	r3, [r6, #8]
 800b32e:	e0c1      	b.n	800b4b4 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b330:	f7fd fa1e 	bl	8008770 <HAL_RCC_GetPCLK1Freq>
 800b334:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b33e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b342:	4619      	mov	r1, r3
 800b344:	f04f 0200 	mov.w	r2, #0
 800b348:	460b      	mov	r3, r1
 800b34a:	4614      	mov	r4, r2
 800b34c:	18db      	adds	r3, r3, r3
 800b34e:	eb44 0404 	adc.w	r4, r4, r4
 800b352:	185b      	adds	r3, r3, r1
 800b354:	eb44 0402 	adc.w	r4, r4, r2
 800b358:	00e6      	lsls	r6, r4, #3
 800b35a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800b35e:	00dd      	lsls	r5, r3, #3
 800b360:	462b      	mov	r3, r5
 800b362:	4634      	mov	r4, r6
 800b364:	185d      	adds	r5, r3, r1
 800b366:	eb44 0602 	adc.w	r6, r4, r2
 800b36a:	4628      	mov	r0, r5
 800b36c:	4631      	mov	r1, r6
 800b36e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	f04f 0400 	mov.w	r4, #0
 800b376:	00a5      	lsls	r5, r4, #2
 800b378:	677d      	str	r5, [r7, #116]	; 0x74
 800b37a:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 800b37c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 800b380:	677d      	str	r5, [r7, #116]	; 0x74
 800b382:	009c      	lsls	r4, r3, #2
 800b384:	673c      	str	r4, [r7, #112]	; 0x70
 800b386:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800b38a:	f7f5 fbb3 	bl	8000af4 <__aeabi_uldivmod>
 800b38e:	4603      	mov	r3, r0
 800b390:	460c      	mov	r4, r1
 800b392:	461a      	mov	r2, r3
 800b394:	4b46      	ldr	r3, [pc, #280]	; (800b4b0 <UART_SetConfig+0x66c>)
 800b396:	fba3 1302 	umull	r1, r3, r3, r2
 800b39a:	095b      	lsrs	r3, r3, #5
 800b39c:	011d      	lsls	r5, r3, #4
 800b39e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	f04f 0200 	mov.w	r2, #0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4614      	mov	r4, r2
 800b3ac:	18db      	adds	r3, r3, r3
 800b3ae:	eb44 0404 	adc.w	r4, r4, r4
 800b3b2:	185b      	adds	r3, r3, r1
 800b3b4:	eb44 0402 	adc.w	r4, r4, r2
 800b3b8:	00e0      	lsls	r0, r4, #3
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	00d8      	lsls	r0, r3, #3
 800b3c6:	60b8      	str	r0, [r7, #8]
 800b3c8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b3cc:	eb13 0801 	adds.w	r8, r3, r1
 800b3d0:	eb44 0902 	adc.w	r9, r4, r2
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f04f 0400 	mov.w	r4, #0
 800b3e0:	00a6      	lsls	r6, r4, #2
 800b3e2:	66fe      	str	r6, [r7, #108]	; 0x6c
 800b3e4:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 800b3e6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800b3ea:	66fe      	str	r6, [r7, #108]	; 0x6c
 800b3ec:	009c      	lsls	r4, r3, #2
 800b3ee:	66bc      	str	r4, [r7, #104]	; 0x68
 800b3f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b3f4:	f7f5 fb7e 	bl	8000af4 <__aeabi_uldivmod>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	4b2c      	ldr	r3, [pc, #176]	; (800b4b0 <UART_SetConfig+0x66c>)
 800b400:	fba3 1302 	umull	r1, r3, r3, r2
 800b404:	095b      	lsrs	r3, r3, #5
 800b406:	2164      	movs	r1, #100	; 0x64
 800b408:	fb01 f303 	mul.w	r3, r1, r3
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	011b      	lsls	r3, r3, #4
 800b410:	3332      	adds	r3, #50	; 0x32
 800b412:	4a27      	ldr	r2, [pc, #156]	; (800b4b0 <UART_SetConfig+0x66c>)
 800b414:	fba2 1303 	umull	r1, r3, r2, r3
 800b418:	095b      	lsrs	r3, r3, #5
 800b41a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b41e:	441d      	add	r5, r3
 800b420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b424:	4619      	mov	r1, r3
 800b426:	f04f 0200 	mov.w	r2, #0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4614      	mov	r4, r2
 800b42e:	18db      	adds	r3, r3, r3
 800b430:	eb44 0404 	adc.w	r4, r4, r4
 800b434:	185b      	adds	r3, r3, r1
 800b436:	eb44 0402 	adc.w	r4, r4, r2
 800b43a:	00e0      	lsls	r0, r4, #3
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	00d8      	lsls	r0, r3, #3
 800b448:	6038      	str	r0, [r7, #0]
 800b44a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800b44e:	eb13 0801 	adds.w	r8, r3, r1
 800b452:	eb44 0902 	adc.w	r9, r4, r2
 800b456:	4640      	mov	r0, r8
 800b458:	4649      	mov	r1, r9
 800b45a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	f04f 0400 	mov.w	r4, #0
 800b462:	00a6      	lsls	r6, r4, #2
 800b464:	667e      	str	r6, [r7, #100]	; 0x64
 800b466:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800b468:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800b46c:	667e      	str	r6, [r7, #100]	; 0x64
 800b46e:	009c      	lsls	r4, r3, #2
 800b470:	663c      	str	r4, [r7, #96]	; 0x60
 800b472:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b476:	f7f5 fb3d 	bl	8000af4 <__aeabi_uldivmod>
 800b47a:	4603      	mov	r3, r0
 800b47c:	460c      	mov	r4, r1
 800b47e:	461a      	mov	r2, r3
 800b480:	4b0b      	ldr	r3, [pc, #44]	; (800b4b0 <UART_SetConfig+0x66c>)
 800b482:	fba3 1302 	umull	r1, r3, r3, r2
 800b486:	095b      	lsrs	r3, r3, #5
 800b488:	2164      	movs	r1, #100	; 0x64
 800b48a:	fb01 f303 	mul.w	r3, r1, r3
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	011b      	lsls	r3, r3, #4
 800b492:	3332      	adds	r3, #50	; 0x32
 800b494:	4a06      	ldr	r2, [pc, #24]	; (800b4b0 <UART_SetConfig+0x66c>)
 800b496:	fba2 1303 	umull	r1, r3, r2, r3
 800b49a:	095b      	lsrs	r3, r3, #5
 800b49c:	f003 030f 	and.w	r3, r3, #15
 800b4a0:	442b      	add	r3, r5
 800b4a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4a4:	6093      	str	r3, [r2, #8]
}
 800b4a6:	e005      	b.n	800b4b4 <UART_SetConfig+0x670>
 800b4a8:	40011000 	.word	0x40011000
 800b4ac:	40011400 	.word	0x40011400
 800b4b0:	51eb851f 	.word	0x51eb851f
 800b4b4:	bf00      	nop
 800b4b6:	378c      	adds	r7, #140	; 0x8c
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4be:	bf00      	nop

0800b4c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b4c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b4f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b4c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b4c6:	e003      	b.n	800b4d0 <LoopCopyDataInit>

0800b4c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b4c8:	4b0c      	ldr	r3, [pc, #48]	; (800b4fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b4ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b4cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b4ce:	3104      	adds	r1, #4

0800b4d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b4d0:	480b      	ldr	r0, [pc, #44]	; (800b500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b4d2:	4b0c      	ldr	r3, [pc, #48]	; (800b504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b4d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b4d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b4d8:	d3f6      	bcc.n	800b4c8 <CopyDataInit>
  ldr  r2, =_sbss
 800b4da:	4a0b      	ldr	r2, [pc, #44]	; (800b508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b4dc:	e002      	b.n	800b4e4 <LoopFillZerobss>

0800b4de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b4de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b4e0:	f842 3b04 	str.w	r3, [r2], #4

0800b4e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b4e4:	4b09      	ldr	r3, [pc, #36]	; (800b50c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b4e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b4e8:	d3f9      	bcc.n	800b4de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b4ea:	f7fa fdeb 	bl	80060c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b4ee:	f000 f817 	bl	800b520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b4f2:	f7f5 feb3 	bl	800125c <main>
  bx  lr    
 800b4f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b4f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b4fc:	0800c978 	.word	0x0800c978
  ldr  r0, =_sdata
 800b500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b504:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 800b508:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 800b50c:	200007c0 	.word	0x200007c0

0800b510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b510:	e7fe      	b.n	800b510 <ADC_IRQHandler>
	...

0800b514 <__errno>:
 800b514:	4b01      	ldr	r3, [pc, #4]	; (800b51c <__errno+0x8>)
 800b516:	6818      	ldr	r0, [r3, #0]
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	20000050 	.word	0x20000050

0800b520 <__libc_init_array>:
 800b520:	b570      	push	{r4, r5, r6, lr}
 800b522:	4e0d      	ldr	r6, [pc, #52]	; (800b558 <__libc_init_array+0x38>)
 800b524:	4c0d      	ldr	r4, [pc, #52]	; (800b55c <__libc_init_array+0x3c>)
 800b526:	1ba4      	subs	r4, r4, r6
 800b528:	10a4      	asrs	r4, r4, #2
 800b52a:	2500      	movs	r5, #0
 800b52c:	42a5      	cmp	r5, r4
 800b52e:	d109      	bne.n	800b544 <__libc_init_array+0x24>
 800b530:	4e0b      	ldr	r6, [pc, #44]	; (800b560 <__libc_init_array+0x40>)
 800b532:	4c0c      	ldr	r4, [pc, #48]	; (800b564 <__libc_init_array+0x44>)
 800b534:	f001 f8e2 	bl	800c6fc <_init>
 800b538:	1ba4      	subs	r4, r4, r6
 800b53a:	10a4      	asrs	r4, r4, #2
 800b53c:	2500      	movs	r5, #0
 800b53e:	42a5      	cmp	r5, r4
 800b540:	d105      	bne.n	800b54e <__libc_init_array+0x2e>
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b548:	4798      	blx	r3
 800b54a:	3501      	adds	r5, #1
 800b54c:	e7ee      	b.n	800b52c <__libc_init_array+0xc>
 800b54e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b552:	4798      	blx	r3
 800b554:	3501      	adds	r5, #1
 800b556:	e7f2      	b.n	800b53e <__libc_init_array+0x1e>
 800b558:	0800c970 	.word	0x0800c970
 800b55c:	0800c970 	.word	0x0800c970
 800b560:	0800c970 	.word	0x0800c970
 800b564:	0800c974 	.word	0x0800c974

0800b568 <memcpy>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	1e43      	subs	r3, r0, #1
 800b56c:	440a      	add	r2, r1
 800b56e:	4291      	cmp	r1, r2
 800b570:	d100      	bne.n	800b574 <memcpy+0xc>
 800b572:	bd10      	pop	{r4, pc}
 800b574:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b57c:	e7f7      	b.n	800b56e <memcpy+0x6>

0800b57e <memset>:
 800b57e:	4402      	add	r2, r0
 800b580:	4603      	mov	r3, r0
 800b582:	4293      	cmp	r3, r2
 800b584:	d100      	bne.n	800b588 <memset+0xa>
 800b586:	4770      	bx	lr
 800b588:	f803 1b01 	strb.w	r1, [r3], #1
 800b58c:	e7f9      	b.n	800b582 <memset+0x4>
	...

0800b590 <iprintf>:
 800b590:	b40f      	push	{r0, r1, r2, r3}
 800b592:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <iprintf+0x2c>)
 800b594:	b513      	push	{r0, r1, r4, lr}
 800b596:	681c      	ldr	r4, [r3, #0]
 800b598:	b124      	cbz	r4, 800b5a4 <iprintf+0x14>
 800b59a:	69a3      	ldr	r3, [r4, #24]
 800b59c:	b913      	cbnz	r3, 800b5a4 <iprintf+0x14>
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 f872 	bl	800b688 <__sinit>
 800b5a4:	ab05      	add	r3, sp, #20
 800b5a6:	9a04      	ldr	r2, [sp, #16]
 800b5a8:	68a1      	ldr	r1, [r4, #8]
 800b5aa:	9301      	str	r3, [sp, #4]
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f000 facd 	bl	800bb4c <_vfiprintf_r>
 800b5b2:	b002      	add	sp, #8
 800b5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5b8:	b004      	add	sp, #16
 800b5ba:	4770      	bx	lr
 800b5bc:	20000050 	.word	0x20000050

0800b5c0 <siprintf>:
 800b5c0:	b40e      	push	{r1, r2, r3}
 800b5c2:	b500      	push	{lr}
 800b5c4:	b09c      	sub	sp, #112	; 0x70
 800b5c6:	f44f 7102 	mov.w	r1, #520	; 0x208
 800b5ca:	ab1d      	add	r3, sp, #116	; 0x74
 800b5cc:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b5d0:	9002      	str	r0, [sp, #8]
 800b5d2:	9006      	str	r0, [sp, #24]
 800b5d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5d8:	480a      	ldr	r0, [pc, #40]	; (800b604 <siprintf+0x44>)
 800b5da:	9104      	str	r1, [sp, #16]
 800b5dc:	9107      	str	r1, [sp, #28]
 800b5de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5e6:	f8ad 1016 	strh.w	r1, [sp, #22]
 800b5ea:	6800      	ldr	r0, [r0, #0]
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	a902      	add	r1, sp, #8
 800b5f0:	f000 f98e 	bl	800b910 <_svfiprintf_r>
 800b5f4:	9b02      	ldr	r3, [sp, #8]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	701a      	strb	r2, [r3, #0]
 800b5fa:	b01c      	add	sp, #112	; 0x70
 800b5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b600:	b003      	add	sp, #12
 800b602:	4770      	bx	lr
 800b604:	20000050 	.word	0x20000050

0800b608 <_cleanup_r>:
 800b608:	4901      	ldr	r1, [pc, #4]	; (800b610 <_cleanup_r+0x8>)
 800b60a:	f000 b8a9 	b.w	800b760 <_fwalk_reent>
 800b60e:	bf00      	nop
 800b610:	0800c421 	.word	0x0800c421

0800b614 <std.isra.0>:
 800b614:	2300      	movs	r3, #0
 800b616:	b510      	push	{r4, lr}
 800b618:	4604      	mov	r4, r0
 800b61a:	6003      	str	r3, [r0, #0]
 800b61c:	6043      	str	r3, [r0, #4]
 800b61e:	6083      	str	r3, [r0, #8]
 800b620:	8181      	strh	r1, [r0, #12]
 800b622:	6643      	str	r3, [r0, #100]	; 0x64
 800b624:	81c2      	strh	r2, [r0, #14]
 800b626:	6103      	str	r3, [r0, #16]
 800b628:	6143      	str	r3, [r0, #20]
 800b62a:	6183      	str	r3, [r0, #24]
 800b62c:	4619      	mov	r1, r3
 800b62e:	2208      	movs	r2, #8
 800b630:	305c      	adds	r0, #92	; 0x5c
 800b632:	f7ff ffa4 	bl	800b57e <memset>
 800b636:	4b05      	ldr	r3, [pc, #20]	; (800b64c <std.isra.0+0x38>)
 800b638:	6263      	str	r3, [r4, #36]	; 0x24
 800b63a:	4b05      	ldr	r3, [pc, #20]	; (800b650 <std.isra.0+0x3c>)
 800b63c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b63e:	4b05      	ldr	r3, [pc, #20]	; (800b654 <std.isra.0+0x40>)
 800b640:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b642:	4b05      	ldr	r3, [pc, #20]	; (800b658 <std.isra.0+0x44>)
 800b644:	6224      	str	r4, [r4, #32]
 800b646:	6323      	str	r3, [r4, #48]	; 0x30
 800b648:	bd10      	pop	{r4, pc}
 800b64a:	bf00      	nop
 800b64c:	0800c0c5 	.word	0x0800c0c5
 800b650:	0800c0e7 	.word	0x0800c0e7
 800b654:	0800c11f 	.word	0x0800c11f
 800b658:	0800c143 	.word	0x0800c143

0800b65c <__sfmoreglue>:
 800b65c:	b570      	push	{r4, r5, r6, lr}
 800b65e:	1e4a      	subs	r2, r1, #1
 800b660:	2568      	movs	r5, #104	; 0x68
 800b662:	4355      	muls	r5, r2
 800b664:	460e      	mov	r6, r1
 800b666:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b66a:	f000 f897 	bl	800b79c <_malloc_r>
 800b66e:	4604      	mov	r4, r0
 800b670:	b140      	cbz	r0, 800b684 <__sfmoreglue+0x28>
 800b672:	2100      	movs	r1, #0
 800b674:	e880 0042 	stmia.w	r0, {r1, r6}
 800b678:	300c      	adds	r0, #12
 800b67a:	60a0      	str	r0, [r4, #8]
 800b67c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b680:	f7ff ff7d 	bl	800b57e <memset>
 800b684:	4620      	mov	r0, r4
 800b686:	bd70      	pop	{r4, r5, r6, pc}

0800b688 <__sinit>:
 800b688:	6983      	ldr	r3, [r0, #24]
 800b68a:	b510      	push	{r4, lr}
 800b68c:	4604      	mov	r4, r0
 800b68e:	bb33      	cbnz	r3, 800b6de <__sinit+0x56>
 800b690:	6483      	str	r3, [r0, #72]	; 0x48
 800b692:	64c3      	str	r3, [r0, #76]	; 0x4c
 800b694:	6503      	str	r3, [r0, #80]	; 0x50
 800b696:	4b12      	ldr	r3, [pc, #72]	; (800b6e0 <__sinit+0x58>)
 800b698:	4a12      	ldr	r2, [pc, #72]	; (800b6e4 <__sinit+0x5c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	6282      	str	r2, [r0, #40]	; 0x28
 800b69e:	4298      	cmp	r0, r3
 800b6a0:	bf04      	itt	eq
 800b6a2:	2301      	moveq	r3, #1
 800b6a4:	6183      	streq	r3, [r0, #24]
 800b6a6:	f000 f81f 	bl	800b6e8 <__sfp>
 800b6aa:	6060      	str	r0, [r4, #4]
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f000 f81b 	bl	800b6e8 <__sfp>
 800b6b2:	60a0      	str	r0, [r4, #8]
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f000 f817 	bl	800b6e8 <__sfp>
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	60e0      	str	r0, [r4, #12]
 800b6be:	2104      	movs	r1, #4
 800b6c0:	6860      	ldr	r0, [r4, #4]
 800b6c2:	f7ff ffa7 	bl	800b614 <std.isra.0>
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	2109      	movs	r1, #9
 800b6ca:	68a0      	ldr	r0, [r4, #8]
 800b6cc:	f7ff ffa2 	bl	800b614 <std.isra.0>
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	2112      	movs	r1, #18
 800b6d4:	68e0      	ldr	r0, [r4, #12]
 800b6d6:	f7ff ff9d 	bl	800b614 <std.isra.0>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	61a3      	str	r3, [r4, #24]
 800b6de:	bd10      	pop	{r4, pc}
 800b6e0:	0800c8d0 	.word	0x0800c8d0
 800b6e4:	0800b609 	.word	0x0800b609

0800b6e8 <__sfp>:
 800b6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ea:	4b1c      	ldr	r3, [pc, #112]	; (800b75c <__sfp+0x74>)
 800b6ec:	681e      	ldr	r6, [r3, #0]
 800b6ee:	69b3      	ldr	r3, [r6, #24]
 800b6f0:	4607      	mov	r7, r0
 800b6f2:	b913      	cbnz	r3, 800b6fa <__sfp+0x12>
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f7ff ffc7 	bl	800b688 <__sinit>
 800b6fa:	3648      	adds	r6, #72	; 0x48
 800b6fc:	68b4      	ldr	r4, [r6, #8]
 800b6fe:	6873      	ldr	r3, [r6, #4]
 800b700:	3b01      	subs	r3, #1
 800b702:	d503      	bpl.n	800b70c <__sfp+0x24>
 800b704:	6833      	ldr	r3, [r6, #0]
 800b706:	b133      	cbz	r3, 800b716 <__sfp+0x2e>
 800b708:	6836      	ldr	r6, [r6, #0]
 800b70a:	e7f7      	b.n	800b6fc <__sfp+0x14>
 800b70c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b710:	b16d      	cbz	r5, 800b72e <__sfp+0x46>
 800b712:	3468      	adds	r4, #104	; 0x68
 800b714:	e7f4      	b.n	800b700 <__sfp+0x18>
 800b716:	2104      	movs	r1, #4
 800b718:	4638      	mov	r0, r7
 800b71a:	f7ff ff9f 	bl	800b65c <__sfmoreglue>
 800b71e:	6030      	str	r0, [r6, #0]
 800b720:	2800      	cmp	r0, #0
 800b722:	d1f1      	bne.n	800b708 <__sfp+0x20>
 800b724:	230c      	movs	r3, #12
 800b726:	603b      	str	r3, [r7, #0]
 800b728:	4604      	mov	r4, r0
 800b72a:	4620      	mov	r0, r4
 800b72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b72e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b732:	81e3      	strh	r3, [r4, #14]
 800b734:	2301      	movs	r3, #1
 800b736:	81a3      	strh	r3, [r4, #12]
 800b738:	6665      	str	r5, [r4, #100]	; 0x64
 800b73a:	6025      	str	r5, [r4, #0]
 800b73c:	60a5      	str	r5, [r4, #8]
 800b73e:	6065      	str	r5, [r4, #4]
 800b740:	6125      	str	r5, [r4, #16]
 800b742:	6165      	str	r5, [r4, #20]
 800b744:	61a5      	str	r5, [r4, #24]
 800b746:	2208      	movs	r2, #8
 800b748:	4629      	mov	r1, r5
 800b74a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b74e:	f7ff ff16 	bl	800b57e <memset>
 800b752:	6365      	str	r5, [r4, #52]	; 0x34
 800b754:	63a5      	str	r5, [r4, #56]	; 0x38
 800b756:	64a5      	str	r5, [r4, #72]	; 0x48
 800b758:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b75a:	e7e6      	b.n	800b72a <__sfp+0x42>
 800b75c:	0800c8d0 	.word	0x0800c8d0

0800b760 <_fwalk_reent>:
 800b760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b764:	4680      	mov	r8, r0
 800b766:	4689      	mov	r9, r1
 800b768:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b76c:	2600      	movs	r6, #0
 800b76e:	b914      	cbnz	r4, 800b776 <_fwalk_reent+0x16>
 800b770:	4630      	mov	r0, r6
 800b772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b776:	68a5      	ldr	r5, [r4, #8]
 800b778:	6867      	ldr	r7, [r4, #4]
 800b77a:	3f01      	subs	r7, #1
 800b77c:	d501      	bpl.n	800b782 <_fwalk_reent+0x22>
 800b77e:	6824      	ldr	r4, [r4, #0]
 800b780:	e7f5      	b.n	800b76e <_fwalk_reent+0xe>
 800b782:	89ab      	ldrh	r3, [r5, #12]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d907      	bls.n	800b798 <_fwalk_reent+0x38>
 800b788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b78c:	3301      	adds	r3, #1
 800b78e:	d003      	beq.n	800b798 <_fwalk_reent+0x38>
 800b790:	4629      	mov	r1, r5
 800b792:	4640      	mov	r0, r8
 800b794:	47c8      	blx	r9
 800b796:	4306      	orrs	r6, r0
 800b798:	3568      	adds	r5, #104	; 0x68
 800b79a:	e7ee      	b.n	800b77a <_fwalk_reent+0x1a>

0800b79c <_malloc_r>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	1ccd      	adds	r5, r1, #3
 800b7a0:	f025 0503 	bic.w	r5, r5, #3
 800b7a4:	3508      	adds	r5, #8
 800b7a6:	2d0c      	cmp	r5, #12
 800b7a8:	bf38      	it	cc
 800b7aa:	250c      	movcc	r5, #12
 800b7ac:	2d00      	cmp	r5, #0
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	db01      	blt.n	800b7b6 <_malloc_r+0x1a>
 800b7b2:	42a9      	cmp	r1, r5
 800b7b4:	d903      	bls.n	800b7be <_malloc_r+0x22>
 800b7b6:	230c      	movs	r3, #12
 800b7b8:	6033      	str	r3, [r6, #0]
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	bd70      	pop	{r4, r5, r6, pc}
 800b7be:	f000 fee9 	bl	800c594 <__malloc_lock>
 800b7c2:	4a23      	ldr	r2, [pc, #140]	; (800b850 <_malloc_r+0xb4>)
 800b7c4:	6814      	ldr	r4, [r2, #0]
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	b991      	cbnz	r1, 800b7f0 <_malloc_r+0x54>
 800b7ca:	4c22      	ldr	r4, [pc, #136]	; (800b854 <_malloc_r+0xb8>)
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	b91b      	cbnz	r3, 800b7d8 <_malloc_r+0x3c>
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f000 fc67 	bl	800c0a4 <_sbrk_r>
 800b7d6:	6020      	str	r0, [r4, #0]
 800b7d8:	4629      	mov	r1, r5
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f000 fc62 	bl	800c0a4 <_sbrk_r>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d126      	bne.n	800b832 <_malloc_r+0x96>
 800b7e4:	230c      	movs	r3, #12
 800b7e6:	6033      	str	r3, [r6, #0]
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f000 fed4 	bl	800c596 <__malloc_unlock>
 800b7ee:	e7e4      	b.n	800b7ba <_malloc_r+0x1e>
 800b7f0:	680b      	ldr	r3, [r1, #0]
 800b7f2:	1b5b      	subs	r3, r3, r5
 800b7f4:	d41a      	bmi.n	800b82c <_malloc_r+0x90>
 800b7f6:	2b0b      	cmp	r3, #11
 800b7f8:	d90f      	bls.n	800b81a <_malloc_r+0x7e>
 800b7fa:	600b      	str	r3, [r1, #0]
 800b7fc:	50cd      	str	r5, [r1, r3]
 800b7fe:	18cc      	adds	r4, r1, r3
 800b800:	4630      	mov	r0, r6
 800b802:	f000 fec8 	bl	800c596 <__malloc_unlock>
 800b806:	f104 000b 	add.w	r0, r4, #11
 800b80a:	1d23      	adds	r3, r4, #4
 800b80c:	f020 0007 	bic.w	r0, r0, #7
 800b810:	1ac3      	subs	r3, r0, r3
 800b812:	d01b      	beq.n	800b84c <_malloc_r+0xb0>
 800b814:	425a      	negs	r2, r3
 800b816:	50e2      	str	r2, [r4, r3]
 800b818:	bd70      	pop	{r4, r5, r6, pc}
 800b81a:	428c      	cmp	r4, r1
 800b81c:	bf0d      	iteet	eq
 800b81e:	6863      	ldreq	r3, [r4, #4]
 800b820:	684b      	ldrne	r3, [r1, #4]
 800b822:	6063      	strne	r3, [r4, #4]
 800b824:	6013      	streq	r3, [r2, #0]
 800b826:	bf18      	it	ne
 800b828:	460c      	movne	r4, r1
 800b82a:	e7e9      	b.n	800b800 <_malloc_r+0x64>
 800b82c:	460c      	mov	r4, r1
 800b82e:	6849      	ldr	r1, [r1, #4]
 800b830:	e7ca      	b.n	800b7c8 <_malloc_r+0x2c>
 800b832:	1cc4      	adds	r4, r0, #3
 800b834:	f024 0403 	bic.w	r4, r4, #3
 800b838:	42a0      	cmp	r0, r4
 800b83a:	d005      	beq.n	800b848 <_malloc_r+0xac>
 800b83c:	1a21      	subs	r1, r4, r0
 800b83e:	4630      	mov	r0, r6
 800b840:	f000 fc30 	bl	800c0a4 <_sbrk_r>
 800b844:	3001      	adds	r0, #1
 800b846:	d0cd      	beq.n	800b7e4 <_malloc_r+0x48>
 800b848:	6025      	str	r5, [r4, #0]
 800b84a:	e7d9      	b.n	800b800 <_malloc_r+0x64>
 800b84c:	bd70      	pop	{r4, r5, r6, pc}
 800b84e:	bf00      	nop
 800b850:	2000017c 	.word	0x2000017c
 800b854:	20000180 	.word	0x20000180

0800b858 <__ssputs_r>:
 800b858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b85c:	688e      	ldr	r6, [r1, #8]
 800b85e:	429e      	cmp	r6, r3
 800b860:	4682      	mov	sl, r0
 800b862:	460c      	mov	r4, r1
 800b864:	4691      	mov	r9, r2
 800b866:	4698      	mov	r8, r3
 800b868:	d835      	bhi.n	800b8d6 <__ssputs_r+0x7e>
 800b86a:	898a      	ldrh	r2, [r1, #12]
 800b86c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b870:	d031      	beq.n	800b8d6 <__ssputs_r+0x7e>
 800b872:	6825      	ldr	r5, [r4, #0]
 800b874:	6909      	ldr	r1, [r1, #16]
 800b876:	1a6f      	subs	r7, r5, r1
 800b878:	6965      	ldr	r5, [r4, #20]
 800b87a:	2302      	movs	r3, #2
 800b87c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b880:	fb95 f5f3 	sdiv	r5, r5, r3
 800b884:	f108 0301 	add.w	r3, r8, #1
 800b888:	443b      	add	r3, r7
 800b88a:	429d      	cmp	r5, r3
 800b88c:	bf38      	it	cc
 800b88e:	461d      	movcc	r5, r3
 800b890:	0553      	lsls	r3, r2, #21
 800b892:	d531      	bpl.n	800b8f8 <__ssputs_r+0xa0>
 800b894:	4629      	mov	r1, r5
 800b896:	f7ff ff81 	bl	800b79c <_malloc_r>
 800b89a:	4606      	mov	r6, r0
 800b89c:	b950      	cbnz	r0, 800b8b4 <__ssputs_r+0x5c>
 800b89e:	230c      	movs	r3, #12
 800b8a0:	f8ca 3000 	str.w	r3, [sl]
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8aa:	81a3      	strh	r3, [r4, #12]
 800b8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b4:	463a      	mov	r2, r7
 800b8b6:	6921      	ldr	r1, [r4, #16]
 800b8b8:	f7ff fe56 	bl	800b568 <memcpy>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	6126      	str	r6, [r4, #16]
 800b8ca:	6165      	str	r5, [r4, #20]
 800b8cc:	443e      	add	r6, r7
 800b8ce:	1bed      	subs	r5, r5, r7
 800b8d0:	6026      	str	r6, [r4, #0]
 800b8d2:	60a5      	str	r5, [r4, #8]
 800b8d4:	4646      	mov	r6, r8
 800b8d6:	4546      	cmp	r6, r8
 800b8d8:	bf28      	it	cs
 800b8da:	4646      	movcs	r6, r8
 800b8dc:	4632      	mov	r2, r6
 800b8de:	4649      	mov	r1, r9
 800b8e0:	6820      	ldr	r0, [r4, #0]
 800b8e2:	f000 fe3d 	bl	800c560 <memmove>
 800b8e6:	68a3      	ldr	r3, [r4, #8]
 800b8e8:	1b9b      	subs	r3, r3, r6
 800b8ea:	60a3      	str	r3, [r4, #8]
 800b8ec:	6823      	ldr	r3, [r4, #0]
 800b8ee:	441e      	add	r6, r3
 800b8f0:	6026      	str	r6, [r4, #0]
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f8:	462a      	mov	r2, r5
 800b8fa:	f000 fe9b 	bl	800c634 <_realloc_r>
 800b8fe:	4606      	mov	r6, r0
 800b900:	2800      	cmp	r0, #0
 800b902:	d1e1      	bne.n	800b8c8 <__ssputs_r+0x70>
 800b904:	6921      	ldr	r1, [r4, #16]
 800b906:	4650      	mov	r0, sl
 800b908:	f000 fe46 	bl	800c598 <_free_r>
 800b90c:	e7c7      	b.n	800b89e <__ssputs_r+0x46>
	...

0800b910 <_svfiprintf_r>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	b09d      	sub	sp, #116	; 0x74
 800b916:	4680      	mov	r8, r0
 800b918:	9303      	str	r3, [sp, #12]
 800b91a:	898b      	ldrh	r3, [r1, #12]
 800b91c:	061c      	lsls	r4, r3, #24
 800b91e:	460d      	mov	r5, r1
 800b920:	4616      	mov	r6, r2
 800b922:	d50f      	bpl.n	800b944 <_svfiprintf_r+0x34>
 800b924:	690b      	ldr	r3, [r1, #16]
 800b926:	b96b      	cbnz	r3, 800b944 <_svfiprintf_r+0x34>
 800b928:	2140      	movs	r1, #64	; 0x40
 800b92a:	f7ff ff37 	bl	800b79c <_malloc_r>
 800b92e:	6028      	str	r0, [r5, #0]
 800b930:	6128      	str	r0, [r5, #16]
 800b932:	b928      	cbnz	r0, 800b940 <_svfiprintf_r+0x30>
 800b934:	230c      	movs	r3, #12
 800b936:	f8c8 3000 	str.w	r3, [r8]
 800b93a:	f04f 30ff 	mov.w	r0, #4294967295
 800b93e:	e0c5      	b.n	800bacc <_svfiprintf_r+0x1bc>
 800b940:	2340      	movs	r3, #64	; 0x40
 800b942:	616b      	str	r3, [r5, #20]
 800b944:	2300      	movs	r3, #0
 800b946:	9309      	str	r3, [sp, #36]	; 0x24
 800b948:	2320      	movs	r3, #32
 800b94a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b94e:	2330      	movs	r3, #48	; 0x30
 800b950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b954:	f04f 0b01 	mov.w	fp, #1
 800b958:	4637      	mov	r7, r6
 800b95a:	463c      	mov	r4, r7
 800b95c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b960:	2b00      	cmp	r3, #0
 800b962:	d13c      	bne.n	800b9de <_svfiprintf_r+0xce>
 800b964:	ebb7 0a06 	subs.w	sl, r7, r6
 800b968:	d00b      	beq.n	800b982 <_svfiprintf_r+0x72>
 800b96a:	4653      	mov	r3, sl
 800b96c:	4632      	mov	r2, r6
 800b96e:	4629      	mov	r1, r5
 800b970:	4640      	mov	r0, r8
 800b972:	f7ff ff71 	bl	800b858 <__ssputs_r>
 800b976:	3001      	adds	r0, #1
 800b978:	f000 80a3 	beq.w	800bac2 <_svfiprintf_r+0x1b2>
 800b97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b97e:	4453      	add	r3, sl
 800b980:	9309      	str	r3, [sp, #36]	; 0x24
 800b982:	783b      	ldrb	r3, [r7, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 809c 	beq.w	800bac2 <_svfiprintf_r+0x1b2>
 800b98a:	2300      	movs	r3, #0
 800b98c:	f04f 32ff 	mov.w	r2, #4294967295
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	9307      	str	r3, [sp, #28]
 800b994:	9205      	str	r2, [sp, #20]
 800b996:	9306      	str	r3, [sp, #24]
 800b998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b99c:	931a      	str	r3, [sp, #104]	; 0x68
 800b99e:	2205      	movs	r2, #5
 800b9a0:	7821      	ldrb	r1, [r4, #0]
 800b9a2:	4850      	ldr	r0, [pc, #320]	; (800bae4 <_svfiprintf_r+0x1d4>)
 800b9a4:	f7f4 fc3c 	bl	8000220 <memchr>
 800b9a8:	1c67      	adds	r7, r4, #1
 800b9aa:	9b04      	ldr	r3, [sp, #16]
 800b9ac:	b9d8      	cbnz	r0, 800b9e6 <_svfiprintf_r+0xd6>
 800b9ae:	06d9      	lsls	r1, r3, #27
 800b9b0:	bf44      	itt	mi
 800b9b2:	2220      	movmi	r2, #32
 800b9b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9b8:	071a      	lsls	r2, r3, #28
 800b9ba:	bf44      	itt	mi
 800b9bc:	222b      	movmi	r2, #43	; 0x2b
 800b9be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9c2:	7822      	ldrb	r2, [r4, #0]
 800b9c4:	2a2a      	cmp	r2, #42	; 0x2a
 800b9c6:	d016      	beq.n	800b9f6 <_svfiprintf_r+0xe6>
 800b9c8:	9a07      	ldr	r2, [sp, #28]
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	200a      	movs	r0, #10
 800b9ce:	4627      	mov	r7, r4
 800b9d0:	3401      	adds	r4, #1
 800b9d2:	783b      	ldrb	r3, [r7, #0]
 800b9d4:	3b30      	subs	r3, #48	; 0x30
 800b9d6:	2b09      	cmp	r3, #9
 800b9d8:	d951      	bls.n	800ba7e <_svfiprintf_r+0x16e>
 800b9da:	b1c9      	cbz	r1, 800ba10 <_svfiprintf_r+0x100>
 800b9dc:	e011      	b.n	800ba02 <_svfiprintf_r+0xf2>
 800b9de:	2b25      	cmp	r3, #37	; 0x25
 800b9e0:	d0c0      	beq.n	800b964 <_svfiprintf_r+0x54>
 800b9e2:	4627      	mov	r7, r4
 800b9e4:	e7b9      	b.n	800b95a <_svfiprintf_r+0x4a>
 800b9e6:	4a3f      	ldr	r2, [pc, #252]	; (800bae4 <_svfiprintf_r+0x1d4>)
 800b9e8:	1a80      	subs	r0, r0, r2
 800b9ea:	fa0b f000 	lsl.w	r0, fp, r0
 800b9ee:	4318      	orrs	r0, r3
 800b9f0:	9004      	str	r0, [sp, #16]
 800b9f2:	463c      	mov	r4, r7
 800b9f4:	e7d3      	b.n	800b99e <_svfiprintf_r+0x8e>
 800b9f6:	9a03      	ldr	r2, [sp, #12]
 800b9f8:	1d11      	adds	r1, r2, #4
 800b9fa:	6812      	ldr	r2, [r2, #0]
 800b9fc:	9103      	str	r1, [sp, #12]
 800b9fe:	2a00      	cmp	r2, #0
 800ba00:	db01      	blt.n	800ba06 <_svfiprintf_r+0xf6>
 800ba02:	9207      	str	r2, [sp, #28]
 800ba04:	e004      	b.n	800ba10 <_svfiprintf_r+0x100>
 800ba06:	4252      	negs	r2, r2
 800ba08:	f043 0302 	orr.w	r3, r3, #2
 800ba0c:	9207      	str	r2, [sp, #28]
 800ba0e:	9304      	str	r3, [sp, #16]
 800ba10:	783b      	ldrb	r3, [r7, #0]
 800ba12:	2b2e      	cmp	r3, #46	; 0x2e
 800ba14:	d10e      	bne.n	800ba34 <_svfiprintf_r+0x124>
 800ba16:	787b      	ldrb	r3, [r7, #1]
 800ba18:	2b2a      	cmp	r3, #42	; 0x2a
 800ba1a:	f107 0101 	add.w	r1, r7, #1
 800ba1e:	d132      	bne.n	800ba86 <_svfiprintf_r+0x176>
 800ba20:	9b03      	ldr	r3, [sp, #12]
 800ba22:	1d1a      	adds	r2, r3, #4
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	9203      	str	r2, [sp, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	bfb8      	it	lt
 800ba2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba30:	3702      	adds	r7, #2
 800ba32:	9305      	str	r3, [sp, #20]
 800ba34:	4c2c      	ldr	r4, [pc, #176]	; (800bae8 <_svfiprintf_r+0x1d8>)
 800ba36:	7839      	ldrb	r1, [r7, #0]
 800ba38:	2203      	movs	r2, #3
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f7f4 fbf0 	bl	8000220 <memchr>
 800ba40:	b138      	cbz	r0, 800ba52 <_svfiprintf_r+0x142>
 800ba42:	2340      	movs	r3, #64	; 0x40
 800ba44:	1b00      	subs	r0, r0, r4
 800ba46:	fa03 f000 	lsl.w	r0, r3, r0
 800ba4a:	9b04      	ldr	r3, [sp, #16]
 800ba4c:	4303      	orrs	r3, r0
 800ba4e:	9304      	str	r3, [sp, #16]
 800ba50:	3701      	adds	r7, #1
 800ba52:	7839      	ldrb	r1, [r7, #0]
 800ba54:	4825      	ldr	r0, [pc, #148]	; (800baec <_svfiprintf_r+0x1dc>)
 800ba56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba5a:	2206      	movs	r2, #6
 800ba5c:	1c7e      	adds	r6, r7, #1
 800ba5e:	f7f4 fbdf 	bl	8000220 <memchr>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d035      	beq.n	800bad2 <_svfiprintf_r+0x1c2>
 800ba66:	4b22      	ldr	r3, [pc, #136]	; (800baf0 <_svfiprintf_r+0x1e0>)
 800ba68:	b9fb      	cbnz	r3, 800baaa <_svfiprintf_r+0x19a>
 800ba6a:	9b03      	ldr	r3, [sp, #12]
 800ba6c:	3307      	adds	r3, #7
 800ba6e:	f023 0307 	bic.w	r3, r3, #7
 800ba72:	3308      	adds	r3, #8
 800ba74:	9303      	str	r3, [sp, #12]
 800ba76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba78:	444b      	add	r3, r9
 800ba7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba7c:	e76c      	b.n	800b958 <_svfiprintf_r+0x48>
 800ba7e:	fb00 3202 	mla	r2, r0, r2, r3
 800ba82:	2101      	movs	r1, #1
 800ba84:	e7a3      	b.n	800b9ce <_svfiprintf_r+0xbe>
 800ba86:	2300      	movs	r3, #0
 800ba88:	9305      	str	r3, [sp, #20]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	240a      	movs	r4, #10
 800ba8e:	460f      	mov	r7, r1
 800ba90:	3101      	adds	r1, #1
 800ba92:	783a      	ldrb	r2, [r7, #0]
 800ba94:	3a30      	subs	r2, #48	; 0x30
 800ba96:	2a09      	cmp	r2, #9
 800ba98:	d903      	bls.n	800baa2 <_svfiprintf_r+0x192>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d0ca      	beq.n	800ba34 <_svfiprintf_r+0x124>
 800ba9e:	9005      	str	r0, [sp, #20]
 800baa0:	e7c8      	b.n	800ba34 <_svfiprintf_r+0x124>
 800baa2:	fb04 2000 	mla	r0, r4, r0, r2
 800baa6:	2301      	movs	r3, #1
 800baa8:	e7f1      	b.n	800ba8e <_svfiprintf_r+0x17e>
 800baaa:	ab03      	add	r3, sp, #12
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	462a      	mov	r2, r5
 800bab0:	4b10      	ldr	r3, [pc, #64]	; (800baf4 <_svfiprintf_r+0x1e4>)
 800bab2:	a904      	add	r1, sp, #16
 800bab4:	4640      	mov	r0, r8
 800bab6:	f3af 8000 	nop.w
 800baba:	f1b0 3fff 	cmp.w	r0, #4294967295
 800babe:	4681      	mov	r9, r0
 800bac0:	d1d9      	bne.n	800ba76 <_svfiprintf_r+0x166>
 800bac2:	89ab      	ldrh	r3, [r5, #12]
 800bac4:	065b      	lsls	r3, r3, #25
 800bac6:	f53f af38 	bmi.w	800b93a <_svfiprintf_r+0x2a>
 800baca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bacc:	b01d      	add	sp, #116	; 0x74
 800bace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad2:	ab03      	add	r3, sp, #12
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	462a      	mov	r2, r5
 800bad8:	4b06      	ldr	r3, [pc, #24]	; (800baf4 <_svfiprintf_r+0x1e4>)
 800bada:	a904      	add	r1, sp, #16
 800badc:	4640      	mov	r0, r8
 800bade:	f000 f9c1 	bl	800be64 <_printf_i>
 800bae2:	e7ea      	b.n	800baba <_svfiprintf_r+0x1aa>
 800bae4:	0800c934 	.word	0x0800c934
 800bae8:	0800c93a 	.word	0x0800c93a
 800baec:	0800c93e 	.word	0x0800c93e
 800baf0:	00000000 	.word	0x00000000
 800baf4:	0800b859 	.word	0x0800b859

0800baf8 <__sfputc_r>:
 800baf8:	6893      	ldr	r3, [r2, #8]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	b410      	push	{r4}
 800bb00:	6093      	str	r3, [r2, #8]
 800bb02:	da09      	bge.n	800bb18 <__sfputc_r+0x20>
 800bb04:	6994      	ldr	r4, [r2, #24]
 800bb06:	42a3      	cmp	r3, r4
 800bb08:	db02      	blt.n	800bb10 <__sfputc_r+0x18>
 800bb0a:	b2cb      	uxtb	r3, r1
 800bb0c:	2b0a      	cmp	r3, #10
 800bb0e:	d103      	bne.n	800bb18 <__sfputc_r+0x20>
 800bb10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb14:	f000 bb1a 	b.w	800c14c <__swbuf_r>
 800bb18:	6813      	ldr	r3, [r2, #0]
 800bb1a:	1c58      	adds	r0, r3, #1
 800bb1c:	6010      	str	r0, [r2, #0]
 800bb1e:	7019      	strb	r1, [r3, #0]
 800bb20:	b2c8      	uxtb	r0, r1
 800bb22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <__sfputs_r>:
 800bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	460f      	mov	r7, r1
 800bb2e:	4614      	mov	r4, r2
 800bb30:	18d5      	adds	r5, r2, r3
 800bb32:	42ac      	cmp	r4, r5
 800bb34:	d101      	bne.n	800bb3a <__sfputs_r+0x12>
 800bb36:	2000      	movs	r0, #0
 800bb38:	e007      	b.n	800bb4a <__sfputs_r+0x22>
 800bb3a:	463a      	mov	r2, r7
 800bb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb40:	4630      	mov	r0, r6
 800bb42:	f7ff ffd9 	bl	800baf8 <__sfputc_r>
 800bb46:	1c43      	adds	r3, r0, #1
 800bb48:	d1f3      	bne.n	800bb32 <__sfputs_r+0xa>
 800bb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb4c <_vfiprintf_r>:
 800bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb50:	b09d      	sub	sp, #116	; 0x74
 800bb52:	460c      	mov	r4, r1
 800bb54:	4617      	mov	r7, r2
 800bb56:	9303      	str	r3, [sp, #12]
 800bb58:	4606      	mov	r6, r0
 800bb5a:	b118      	cbz	r0, 800bb64 <_vfiprintf_r+0x18>
 800bb5c:	6983      	ldr	r3, [r0, #24]
 800bb5e:	b90b      	cbnz	r3, 800bb64 <_vfiprintf_r+0x18>
 800bb60:	f7ff fd92 	bl	800b688 <__sinit>
 800bb64:	4b7c      	ldr	r3, [pc, #496]	; (800bd58 <_vfiprintf_r+0x20c>)
 800bb66:	429c      	cmp	r4, r3
 800bb68:	d157      	bne.n	800bc1a <_vfiprintf_r+0xce>
 800bb6a:	6874      	ldr	r4, [r6, #4]
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	0718      	lsls	r0, r3, #28
 800bb70:	d55d      	bpl.n	800bc2e <_vfiprintf_r+0xe2>
 800bb72:	6923      	ldr	r3, [r4, #16]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d05a      	beq.n	800bc2e <_vfiprintf_r+0xe2>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb7c:	2320      	movs	r3, #32
 800bb7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb82:	2330      	movs	r3, #48	; 0x30
 800bb84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb88:	f04f 0b01 	mov.w	fp, #1
 800bb8c:	46b8      	mov	r8, r7
 800bb8e:	4645      	mov	r5, r8
 800bb90:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d155      	bne.n	800bc44 <_vfiprintf_r+0xf8>
 800bb98:	ebb8 0a07 	subs.w	sl, r8, r7
 800bb9c:	d00b      	beq.n	800bbb6 <_vfiprintf_r+0x6a>
 800bb9e:	4653      	mov	r3, sl
 800bba0:	463a      	mov	r2, r7
 800bba2:	4621      	mov	r1, r4
 800bba4:	4630      	mov	r0, r6
 800bba6:	f7ff ffbf 	bl	800bb28 <__sfputs_r>
 800bbaa:	3001      	adds	r0, #1
 800bbac:	f000 80c4 	beq.w	800bd38 <_vfiprintf_r+0x1ec>
 800bbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb2:	4453      	add	r3, sl
 800bbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbb6:	f898 3000 	ldrb.w	r3, [r8]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 80bc 	beq.w	800bd38 <_vfiprintf_r+0x1ec>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	9307      	str	r3, [sp, #28]
 800bbca:	9205      	str	r2, [sp, #20]
 800bbcc:	9306      	str	r3, [sp, #24]
 800bbce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbd2:	931a      	str	r3, [sp, #104]	; 0x68
 800bbd4:	2205      	movs	r2, #5
 800bbd6:	7829      	ldrb	r1, [r5, #0]
 800bbd8:	4860      	ldr	r0, [pc, #384]	; (800bd5c <_vfiprintf_r+0x210>)
 800bbda:	f7f4 fb21 	bl	8000220 <memchr>
 800bbde:	f105 0801 	add.w	r8, r5, #1
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d131      	bne.n	800bc4c <_vfiprintf_r+0x100>
 800bbe8:	06d9      	lsls	r1, r3, #27
 800bbea:	bf44      	itt	mi
 800bbec:	2220      	movmi	r2, #32
 800bbee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bbf2:	071a      	lsls	r2, r3, #28
 800bbf4:	bf44      	itt	mi
 800bbf6:	222b      	movmi	r2, #43	; 0x2b
 800bbf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bbfc:	782a      	ldrb	r2, [r5, #0]
 800bbfe:	2a2a      	cmp	r2, #42	; 0x2a
 800bc00:	d02c      	beq.n	800bc5c <_vfiprintf_r+0x110>
 800bc02:	9a07      	ldr	r2, [sp, #28]
 800bc04:	2100      	movs	r1, #0
 800bc06:	200a      	movs	r0, #10
 800bc08:	46a8      	mov	r8, r5
 800bc0a:	3501      	adds	r5, #1
 800bc0c:	f898 3000 	ldrb.w	r3, [r8]
 800bc10:	3b30      	subs	r3, #48	; 0x30
 800bc12:	2b09      	cmp	r3, #9
 800bc14:	d96d      	bls.n	800bcf2 <_vfiprintf_r+0x1a6>
 800bc16:	b371      	cbz	r1, 800bc76 <_vfiprintf_r+0x12a>
 800bc18:	e026      	b.n	800bc68 <_vfiprintf_r+0x11c>
 800bc1a:	4b51      	ldr	r3, [pc, #324]	; (800bd60 <_vfiprintf_r+0x214>)
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	d101      	bne.n	800bc24 <_vfiprintf_r+0xd8>
 800bc20:	68b4      	ldr	r4, [r6, #8]
 800bc22:	e7a3      	b.n	800bb6c <_vfiprintf_r+0x20>
 800bc24:	4b4f      	ldr	r3, [pc, #316]	; (800bd64 <_vfiprintf_r+0x218>)
 800bc26:	429c      	cmp	r4, r3
 800bc28:	bf08      	it	eq
 800bc2a:	68f4      	ldreq	r4, [r6, #12]
 800bc2c:	e79e      	b.n	800bb6c <_vfiprintf_r+0x20>
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4630      	mov	r0, r6
 800bc32:	f000 faef 	bl	800c214 <__swsetup_r>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d09e      	beq.n	800bb78 <_vfiprintf_r+0x2c>
 800bc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3e:	b01d      	add	sp, #116	; 0x74
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc44:	2b25      	cmp	r3, #37	; 0x25
 800bc46:	d0a7      	beq.n	800bb98 <_vfiprintf_r+0x4c>
 800bc48:	46a8      	mov	r8, r5
 800bc4a:	e7a0      	b.n	800bb8e <_vfiprintf_r+0x42>
 800bc4c:	4a43      	ldr	r2, [pc, #268]	; (800bd5c <_vfiprintf_r+0x210>)
 800bc4e:	1a80      	subs	r0, r0, r2
 800bc50:	fa0b f000 	lsl.w	r0, fp, r0
 800bc54:	4318      	orrs	r0, r3
 800bc56:	9004      	str	r0, [sp, #16]
 800bc58:	4645      	mov	r5, r8
 800bc5a:	e7bb      	b.n	800bbd4 <_vfiprintf_r+0x88>
 800bc5c:	9a03      	ldr	r2, [sp, #12]
 800bc5e:	1d11      	adds	r1, r2, #4
 800bc60:	6812      	ldr	r2, [r2, #0]
 800bc62:	9103      	str	r1, [sp, #12]
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	db01      	blt.n	800bc6c <_vfiprintf_r+0x120>
 800bc68:	9207      	str	r2, [sp, #28]
 800bc6a:	e004      	b.n	800bc76 <_vfiprintf_r+0x12a>
 800bc6c:	4252      	negs	r2, r2
 800bc6e:	f043 0302 	orr.w	r3, r3, #2
 800bc72:	9207      	str	r2, [sp, #28]
 800bc74:	9304      	str	r3, [sp, #16]
 800bc76:	f898 3000 	ldrb.w	r3, [r8]
 800bc7a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc7c:	d110      	bne.n	800bca0 <_vfiprintf_r+0x154>
 800bc7e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bc82:	2b2a      	cmp	r3, #42	; 0x2a
 800bc84:	f108 0101 	add.w	r1, r8, #1
 800bc88:	d137      	bne.n	800bcfa <_vfiprintf_r+0x1ae>
 800bc8a:	9b03      	ldr	r3, [sp, #12]
 800bc8c:	1d1a      	adds	r2, r3, #4
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	9203      	str	r2, [sp, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bfb8      	it	lt
 800bc96:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc9a:	f108 0802 	add.w	r8, r8, #2
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	4d31      	ldr	r5, [pc, #196]	; (800bd68 <_vfiprintf_r+0x21c>)
 800bca2:	f898 1000 	ldrb.w	r1, [r8]
 800bca6:	2203      	movs	r2, #3
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f7f4 fab9 	bl	8000220 <memchr>
 800bcae:	b140      	cbz	r0, 800bcc2 <_vfiprintf_r+0x176>
 800bcb0:	2340      	movs	r3, #64	; 0x40
 800bcb2:	1b40      	subs	r0, r0, r5
 800bcb4:	fa03 f000 	lsl.w	r0, r3, r0
 800bcb8:	9b04      	ldr	r3, [sp, #16]
 800bcba:	4303      	orrs	r3, r0
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	f108 0801 	add.w	r8, r8, #1
 800bcc2:	f898 1000 	ldrb.w	r1, [r8]
 800bcc6:	4829      	ldr	r0, [pc, #164]	; (800bd6c <_vfiprintf_r+0x220>)
 800bcc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bccc:	2206      	movs	r2, #6
 800bcce:	f108 0701 	add.w	r7, r8, #1
 800bcd2:	f7f4 faa5 	bl	8000220 <memchr>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d034      	beq.n	800bd44 <_vfiprintf_r+0x1f8>
 800bcda:	4b25      	ldr	r3, [pc, #148]	; (800bd70 <_vfiprintf_r+0x224>)
 800bcdc:	bb03      	cbnz	r3, 800bd20 <_vfiprintf_r+0x1d4>
 800bcde:	9b03      	ldr	r3, [sp, #12]
 800bce0:	3307      	adds	r3, #7
 800bce2:	f023 0307 	bic.w	r3, r3, #7
 800bce6:	3308      	adds	r3, #8
 800bce8:	9303      	str	r3, [sp, #12]
 800bcea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcec:	444b      	add	r3, r9
 800bcee:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf0:	e74c      	b.n	800bb8c <_vfiprintf_r+0x40>
 800bcf2:	fb00 3202 	mla	r2, r0, r2, r3
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	e786      	b.n	800bc08 <_vfiprintf_r+0xbc>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	9305      	str	r3, [sp, #20]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	250a      	movs	r5, #10
 800bd02:	4688      	mov	r8, r1
 800bd04:	3101      	adds	r1, #1
 800bd06:	f898 2000 	ldrb.w	r2, [r8]
 800bd0a:	3a30      	subs	r2, #48	; 0x30
 800bd0c:	2a09      	cmp	r2, #9
 800bd0e:	d903      	bls.n	800bd18 <_vfiprintf_r+0x1cc>
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d0c5      	beq.n	800bca0 <_vfiprintf_r+0x154>
 800bd14:	9005      	str	r0, [sp, #20]
 800bd16:	e7c3      	b.n	800bca0 <_vfiprintf_r+0x154>
 800bd18:	fb05 2000 	mla	r0, r5, r0, r2
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e7f0      	b.n	800bd02 <_vfiprintf_r+0x1b6>
 800bd20:	ab03      	add	r3, sp, #12
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	4622      	mov	r2, r4
 800bd26:	4b13      	ldr	r3, [pc, #76]	; (800bd74 <_vfiprintf_r+0x228>)
 800bd28:	a904      	add	r1, sp, #16
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f3af 8000 	nop.w
 800bd30:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bd34:	4681      	mov	r9, r0
 800bd36:	d1d8      	bne.n	800bcea <_vfiprintf_r+0x19e>
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	065b      	lsls	r3, r3, #25
 800bd3c:	f53f af7d 	bmi.w	800bc3a <_vfiprintf_r+0xee>
 800bd40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd42:	e77c      	b.n	800bc3e <_vfiprintf_r+0xf2>
 800bd44:	ab03      	add	r3, sp, #12
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	4622      	mov	r2, r4
 800bd4a:	4b0a      	ldr	r3, [pc, #40]	; (800bd74 <_vfiprintf_r+0x228>)
 800bd4c:	a904      	add	r1, sp, #16
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f000 f888 	bl	800be64 <_printf_i>
 800bd54:	e7ec      	b.n	800bd30 <_vfiprintf_r+0x1e4>
 800bd56:	bf00      	nop
 800bd58:	0800c8f4 	.word	0x0800c8f4
 800bd5c:	0800c934 	.word	0x0800c934
 800bd60:	0800c914 	.word	0x0800c914
 800bd64:	0800c8d4 	.word	0x0800c8d4
 800bd68:	0800c93a 	.word	0x0800c93a
 800bd6c:	0800c93e 	.word	0x0800c93e
 800bd70:	00000000 	.word	0x00000000
 800bd74:	0800bb29 	.word	0x0800bb29

0800bd78 <_printf_common>:
 800bd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd7c:	4691      	mov	r9, r2
 800bd7e:	461f      	mov	r7, r3
 800bd80:	688a      	ldr	r2, [r1, #8]
 800bd82:	690b      	ldr	r3, [r1, #16]
 800bd84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	bfb8      	it	lt
 800bd8c:	4613      	movlt	r3, r2
 800bd8e:	f8c9 3000 	str.w	r3, [r9]
 800bd92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd96:	4606      	mov	r6, r0
 800bd98:	460c      	mov	r4, r1
 800bd9a:	b112      	cbz	r2, 800bda2 <_printf_common+0x2a>
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	f8c9 3000 	str.w	r3, [r9]
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	0699      	lsls	r1, r3, #26
 800bda6:	bf42      	ittt	mi
 800bda8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bdac:	3302      	addmi	r3, #2
 800bdae:	f8c9 3000 	strmi.w	r3, [r9]
 800bdb2:	6825      	ldr	r5, [r4, #0]
 800bdb4:	f015 0506 	ands.w	r5, r5, #6
 800bdb8:	d107      	bne.n	800bdca <_printf_common+0x52>
 800bdba:	f104 0a19 	add.w	sl, r4, #25
 800bdbe:	68e3      	ldr	r3, [r4, #12]
 800bdc0:	f8d9 2000 	ldr.w	r2, [r9]
 800bdc4:	1a9b      	subs	r3, r3, r2
 800bdc6:	429d      	cmp	r5, r3
 800bdc8:	db29      	blt.n	800be1e <_printf_common+0xa6>
 800bdca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bdce:	6822      	ldr	r2, [r4, #0]
 800bdd0:	3300      	adds	r3, #0
 800bdd2:	bf18      	it	ne
 800bdd4:	2301      	movne	r3, #1
 800bdd6:	0692      	lsls	r2, r2, #26
 800bdd8:	d42e      	bmi.n	800be38 <_printf_common+0xc0>
 800bdda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdde:	4639      	mov	r1, r7
 800bde0:	4630      	mov	r0, r6
 800bde2:	47c0      	blx	r8
 800bde4:	3001      	adds	r0, #1
 800bde6:	d021      	beq.n	800be2c <_printf_common+0xb4>
 800bde8:	6823      	ldr	r3, [r4, #0]
 800bdea:	68e5      	ldr	r5, [r4, #12]
 800bdec:	f8d9 2000 	ldr.w	r2, [r9]
 800bdf0:	f003 0306 	and.w	r3, r3, #6
 800bdf4:	2b04      	cmp	r3, #4
 800bdf6:	bf08      	it	eq
 800bdf8:	1aad      	subeq	r5, r5, r2
 800bdfa:	68a3      	ldr	r3, [r4, #8]
 800bdfc:	6922      	ldr	r2, [r4, #16]
 800bdfe:	bf0c      	ite	eq
 800be00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be04:	2500      	movne	r5, #0
 800be06:	4293      	cmp	r3, r2
 800be08:	bfc4      	itt	gt
 800be0a:	1a9b      	subgt	r3, r3, r2
 800be0c:	18ed      	addgt	r5, r5, r3
 800be0e:	f04f 0900 	mov.w	r9, #0
 800be12:	341a      	adds	r4, #26
 800be14:	454d      	cmp	r5, r9
 800be16:	d11b      	bne.n	800be50 <_printf_common+0xd8>
 800be18:	2000      	movs	r0, #0
 800be1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be1e:	2301      	movs	r3, #1
 800be20:	4652      	mov	r2, sl
 800be22:	4639      	mov	r1, r7
 800be24:	4630      	mov	r0, r6
 800be26:	47c0      	blx	r8
 800be28:	3001      	adds	r0, #1
 800be2a:	d103      	bne.n	800be34 <_printf_common+0xbc>
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be34:	3501      	adds	r5, #1
 800be36:	e7c2      	b.n	800bdbe <_printf_common+0x46>
 800be38:	18e1      	adds	r1, r4, r3
 800be3a:	1c5a      	adds	r2, r3, #1
 800be3c:	2030      	movs	r0, #48	; 0x30
 800be3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be42:	4422      	add	r2, r4
 800be44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be4c:	3302      	adds	r3, #2
 800be4e:	e7c4      	b.n	800bdda <_printf_common+0x62>
 800be50:	2301      	movs	r3, #1
 800be52:	4622      	mov	r2, r4
 800be54:	4639      	mov	r1, r7
 800be56:	4630      	mov	r0, r6
 800be58:	47c0      	blx	r8
 800be5a:	3001      	adds	r0, #1
 800be5c:	d0e6      	beq.n	800be2c <_printf_common+0xb4>
 800be5e:	f109 0901 	add.w	r9, r9, #1
 800be62:	e7d7      	b.n	800be14 <_printf_common+0x9c>

0800be64 <_printf_i>:
 800be64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be68:	4617      	mov	r7, r2
 800be6a:	7e0a      	ldrb	r2, [r1, #24]
 800be6c:	b085      	sub	sp, #20
 800be6e:	2a6e      	cmp	r2, #110	; 0x6e
 800be70:	4698      	mov	r8, r3
 800be72:	4606      	mov	r6, r0
 800be74:	460c      	mov	r4, r1
 800be76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be78:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800be7c:	f000 80bc 	beq.w	800bff8 <_printf_i+0x194>
 800be80:	d81a      	bhi.n	800beb8 <_printf_i+0x54>
 800be82:	2a63      	cmp	r2, #99	; 0x63
 800be84:	d02e      	beq.n	800bee4 <_printf_i+0x80>
 800be86:	d80a      	bhi.n	800be9e <_printf_i+0x3a>
 800be88:	2a00      	cmp	r2, #0
 800be8a:	f000 80c8 	beq.w	800c01e <_printf_i+0x1ba>
 800be8e:	2a58      	cmp	r2, #88	; 0x58
 800be90:	f000 808a 	beq.w	800bfa8 <_printf_i+0x144>
 800be94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800be9c:	e02a      	b.n	800bef4 <_printf_i+0x90>
 800be9e:	2a64      	cmp	r2, #100	; 0x64
 800bea0:	d001      	beq.n	800bea6 <_printf_i+0x42>
 800bea2:	2a69      	cmp	r2, #105	; 0x69
 800bea4:	d1f6      	bne.n	800be94 <_printf_i+0x30>
 800bea6:	6821      	ldr	r1, [r4, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	f011 0f80 	tst.w	r1, #128	; 0x80
 800beae:	d023      	beq.n	800bef8 <_printf_i+0x94>
 800beb0:	1d11      	adds	r1, r2, #4
 800beb2:	6019      	str	r1, [r3, #0]
 800beb4:	6813      	ldr	r3, [r2, #0]
 800beb6:	e027      	b.n	800bf08 <_printf_i+0xa4>
 800beb8:	2a73      	cmp	r2, #115	; 0x73
 800beba:	f000 80b4 	beq.w	800c026 <_printf_i+0x1c2>
 800bebe:	d808      	bhi.n	800bed2 <_printf_i+0x6e>
 800bec0:	2a6f      	cmp	r2, #111	; 0x6f
 800bec2:	d02a      	beq.n	800bf1a <_printf_i+0xb6>
 800bec4:	2a70      	cmp	r2, #112	; 0x70
 800bec6:	d1e5      	bne.n	800be94 <_printf_i+0x30>
 800bec8:	680a      	ldr	r2, [r1, #0]
 800beca:	f042 0220 	orr.w	r2, r2, #32
 800bece:	600a      	str	r2, [r1, #0]
 800bed0:	e003      	b.n	800beda <_printf_i+0x76>
 800bed2:	2a75      	cmp	r2, #117	; 0x75
 800bed4:	d021      	beq.n	800bf1a <_printf_i+0xb6>
 800bed6:	2a78      	cmp	r2, #120	; 0x78
 800bed8:	d1dc      	bne.n	800be94 <_printf_i+0x30>
 800beda:	2278      	movs	r2, #120	; 0x78
 800bedc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800bee0:	496e      	ldr	r1, [pc, #440]	; (800c09c <_printf_i+0x238>)
 800bee2:	e064      	b.n	800bfae <_printf_i+0x14a>
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800beea:	1d11      	adds	r1, r2, #4
 800beec:	6019      	str	r1, [r3, #0]
 800beee:	6813      	ldr	r3, [r2, #0]
 800bef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bef4:	2301      	movs	r3, #1
 800bef6:	e0a3      	b.n	800c040 <_printf_i+0x1dc>
 800bef8:	f011 0f40 	tst.w	r1, #64	; 0x40
 800befc:	f102 0104 	add.w	r1, r2, #4
 800bf00:	6019      	str	r1, [r3, #0]
 800bf02:	d0d7      	beq.n	800beb4 <_printf_i+0x50>
 800bf04:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	da03      	bge.n	800bf14 <_printf_i+0xb0>
 800bf0c:	222d      	movs	r2, #45	; 0x2d
 800bf0e:	425b      	negs	r3, r3
 800bf10:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bf14:	4962      	ldr	r1, [pc, #392]	; (800c0a0 <_printf_i+0x23c>)
 800bf16:	220a      	movs	r2, #10
 800bf18:	e017      	b.n	800bf4a <_printf_i+0xe6>
 800bf1a:	6820      	ldr	r0, [r4, #0]
 800bf1c:	6819      	ldr	r1, [r3, #0]
 800bf1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800bf22:	d003      	beq.n	800bf2c <_printf_i+0xc8>
 800bf24:	1d08      	adds	r0, r1, #4
 800bf26:	6018      	str	r0, [r3, #0]
 800bf28:	680b      	ldr	r3, [r1, #0]
 800bf2a:	e006      	b.n	800bf3a <_printf_i+0xd6>
 800bf2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf30:	f101 0004 	add.w	r0, r1, #4
 800bf34:	6018      	str	r0, [r3, #0]
 800bf36:	d0f7      	beq.n	800bf28 <_printf_i+0xc4>
 800bf38:	880b      	ldrh	r3, [r1, #0]
 800bf3a:	4959      	ldr	r1, [pc, #356]	; (800c0a0 <_printf_i+0x23c>)
 800bf3c:	2a6f      	cmp	r2, #111	; 0x6f
 800bf3e:	bf14      	ite	ne
 800bf40:	220a      	movne	r2, #10
 800bf42:	2208      	moveq	r2, #8
 800bf44:	2000      	movs	r0, #0
 800bf46:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800bf4a:	6865      	ldr	r5, [r4, #4]
 800bf4c:	60a5      	str	r5, [r4, #8]
 800bf4e:	2d00      	cmp	r5, #0
 800bf50:	f2c0 809c 	blt.w	800c08c <_printf_i+0x228>
 800bf54:	6820      	ldr	r0, [r4, #0]
 800bf56:	f020 0004 	bic.w	r0, r0, #4
 800bf5a:	6020      	str	r0, [r4, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d13f      	bne.n	800bfe0 <_printf_i+0x17c>
 800bf60:	2d00      	cmp	r5, #0
 800bf62:	f040 8095 	bne.w	800c090 <_printf_i+0x22c>
 800bf66:	4675      	mov	r5, lr
 800bf68:	2a08      	cmp	r2, #8
 800bf6a:	d10b      	bne.n	800bf84 <_printf_i+0x120>
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	07da      	lsls	r2, r3, #31
 800bf70:	d508      	bpl.n	800bf84 <_printf_i+0x120>
 800bf72:	6923      	ldr	r3, [r4, #16]
 800bf74:	6862      	ldr	r2, [r4, #4]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	bfde      	ittt	le
 800bf7a:	2330      	movle	r3, #48	; 0x30
 800bf7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf80:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf84:	ebae 0305 	sub.w	r3, lr, r5
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	f8cd 8000 	str.w	r8, [sp]
 800bf8e:	463b      	mov	r3, r7
 800bf90:	aa03      	add	r2, sp, #12
 800bf92:	4621      	mov	r1, r4
 800bf94:	4630      	mov	r0, r6
 800bf96:	f7ff feef 	bl	800bd78 <_printf_common>
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d155      	bne.n	800c04a <_printf_i+0x1e6>
 800bf9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa2:	b005      	add	sp, #20
 800bfa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfa8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800bfac:	493c      	ldr	r1, [pc, #240]	; (800c0a0 <_printf_i+0x23c>)
 800bfae:	6822      	ldr	r2, [r4, #0]
 800bfb0:	6818      	ldr	r0, [r3, #0]
 800bfb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 800bfb6:	f100 0504 	add.w	r5, r0, #4
 800bfba:	601d      	str	r5, [r3, #0]
 800bfbc:	d001      	beq.n	800bfc2 <_printf_i+0x15e>
 800bfbe:	6803      	ldr	r3, [r0, #0]
 800bfc0:	e002      	b.n	800bfc8 <_printf_i+0x164>
 800bfc2:	0655      	lsls	r5, r2, #25
 800bfc4:	d5fb      	bpl.n	800bfbe <_printf_i+0x15a>
 800bfc6:	8803      	ldrh	r3, [r0, #0]
 800bfc8:	07d0      	lsls	r0, r2, #31
 800bfca:	bf44      	itt	mi
 800bfcc:	f042 0220 	orrmi.w	r2, r2, #32
 800bfd0:	6022      	strmi	r2, [r4, #0]
 800bfd2:	b91b      	cbnz	r3, 800bfdc <_printf_i+0x178>
 800bfd4:	6822      	ldr	r2, [r4, #0]
 800bfd6:	f022 0220 	bic.w	r2, r2, #32
 800bfda:	6022      	str	r2, [r4, #0]
 800bfdc:	2210      	movs	r2, #16
 800bfde:	e7b1      	b.n	800bf44 <_printf_i+0xe0>
 800bfe0:	4675      	mov	r5, lr
 800bfe2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfe6:	fb02 3310 	mls	r3, r2, r0, r3
 800bfea:	5ccb      	ldrb	r3, [r1, r3]
 800bfec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bff0:	4603      	mov	r3, r0
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d1f5      	bne.n	800bfe2 <_printf_i+0x17e>
 800bff6:	e7b7      	b.n	800bf68 <_printf_i+0x104>
 800bff8:	6808      	ldr	r0, [r1, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	6949      	ldr	r1, [r1, #20]
 800bffe:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c002:	d004      	beq.n	800c00e <_printf_i+0x1aa>
 800c004:	1d10      	adds	r0, r2, #4
 800c006:	6018      	str	r0, [r3, #0]
 800c008:	6813      	ldr	r3, [r2, #0]
 800c00a:	6019      	str	r1, [r3, #0]
 800c00c:	e007      	b.n	800c01e <_printf_i+0x1ba>
 800c00e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c012:	f102 0004 	add.w	r0, r2, #4
 800c016:	6018      	str	r0, [r3, #0]
 800c018:	6813      	ldr	r3, [r2, #0]
 800c01a:	d0f6      	beq.n	800c00a <_printf_i+0x1a6>
 800c01c:	8019      	strh	r1, [r3, #0]
 800c01e:	2300      	movs	r3, #0
 800c020:	6123      	str	r3, [r4, #16]
 800c022:	4675      	mov	r5, lr
 800c024:	e7b1      	b.n	800bf8a <_printf_i+0x126>
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	1d11      	adds	r1, r2, #4
 800c02a:	6019      	str	r1, [r3, #0]
 800c02c:	6815      	ldr	r5, [r2, #0]
 800c02e:	6862      	ldr	r2, [r4, #4]
 800c030:	2100      	movs	r1, #0
 800c032:	4628      	mov	r0, r5
 800c034:	f7f4 f8f4 	bl	8000220 <memchr>
 800c038:	b108      	cbz	r0, 800c03e <_printf_i+0x1da>
 800c03a:	1b40      	subs	r0, r0, r5
 800c03c:	6060      	str	r0, [r4, #4]
 800c03e:	6863      	ldr	r3, [r4, #4]
 800c040:	6123      	str	r3, [r4, #16]
 800c042:	2300      	movs	r3, #0
 800c044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c048:	e79f      	b.n	800bf8a <_printf_i+0x126>
 800c04a:	6923      	ldr	r3, [r4, #16]
 800c04c:	462a      	mov	r2, r5
 800c04e:	4639      	mov	r1, r7
 800c050:	4630      	mov	r0, r6
 800c052:	47c0      	blx	r8
 800c054:	3001      	adds	r0, #1
 800c056:	d0a2      	beq.n	800bf9e <_printf_i+0x13a>
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	079b      	lsls	r3, r3, #30
 800c05c:	d507      	bpl.n	800c06e <_printf_i+0x20a>
 800c05e:	2500      	movs	r5, #0
 800c060:	f104 0919 	add.w	r9, r4, #25
 800c064:	68e3      	ldr	r3, [r4, #12]
 800c066:	9a03      	ldr	r2, [sp, #12]
 800c068:	1a9b      	subs	r3, r3, r2
 800c06a:	429d      	cmp	r5, r3
 800c06c:	db05      	blt.n	800c07a <_printf_i+0x216>
 800c06e:	68e0      	ldr	r0, [r4, #12]
 800c070:	9b03      	ldr	r3, [sp, #12]
 800c072:	4298      	cmp	r0, r3
 800c074:	bfb8      	it	lt
 800c076:	4618      	movlt	r0, r3
 800c078:	e793      	b.n	800bfa2 <_printf_i+0x13e>
 800c07a:	2301      	movs	r3, #1
 800c07c:	464a      	mov	r2, r9
 800c07e:	4639      	mov	r1, r7
 800c080:	4630      	mov	r0, r6
 800c082:	47c0      	blx	r8
 800c084:	3001      	adds	r0, #1
 800c086:	d08a      	beq.n	800bf9e <_printf_i+0x13a>
 800c088:	3501      	adds	r5, #1
 800c08a:	e7eb      	b.n	800c064 <_printf_i+0x200>
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1a7      	bne.n	800bfe0 <_printf_i+0x17c>
 800c090:	780b      	ldrb	r3, [r1, #0]
 800c092:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c096:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c09a:	e765      	b.n	800bf68 <_printf_i+0x104>
 800c09c:	0800c956 	.word	0x0800c956
 800c0a0:	0800c945 	.word	0x0800c945

0800c0a4 <_sbrk_r>:
 800c0a4:	b538      	push	{r3, r4, r5, lr}
 800c0a6:	4c06      	ldr	r4, [pc, #24]	; (800c0c0 <_sbrk_r+0x1c>)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	4605      	mov	r5, r0
 800c0ac:	4608      	mov	r0, r1
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	f7f9 ffa8 	bl	8006004 <_sbrk>
 800c0b4:	1c43      	adds	r3, r0, #1
 800c0b6:	d102      	bne.n	800c0be <_sbrk_r+0x1a>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	b103      	cbz	r3, 800c0be <_sbrk_r+0x1a>
 800c0bc:	602b      	str	r3, [r5, #0]
 800c0be:	bd38      	pop	{r3, r4, r5, pc}
 800c0c0:	200007bc 	.word	0x200007bc

0800c0c4 <__sread>:
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0cc:	f000 fad8 	bl	800c680 <_read_r>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	bfab      	itete	ge
 800c0d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0d8:	181b      	addge	r3, r3, r0
 800c0da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0de:	bfac      	ite	ge
 800c0e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0e2:	81a3      	strhlt	r3, [r4, #12]
 800c0e4:	bd10      	pop	{r4, pc}

0800c0e6 <__swrite>:
 800c0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ea:	461f      	mov	r7, r3
 800c0ec:	898b      	ldrh	r3, [r1, #12]
 800c0ee:	05db      	lsls	r3, r3, #23
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	4616      	mov	r6, r2
 800c0f6:	d505      	bpl.n	800c104 <__swrite+0x1e>
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c100:	f000 f9b8 	bl	800c474 <_lseek_r>
 800c104:	89a3      	ldrh	r3, [r4, #12]
 800c106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c10a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c10e:	81a3      	strh	r3, [r4, #12]
 800c110:	4632      	mov	r2, r6
 800c112:	463b      	mov	r3, r7
 800c114:	4628      	mov	r0, r5
 800c116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c11a:	f000 b869 	b.w	800c1f0 <_write_r>

0800c11e <__sseek>:
 800c11e:	b510      	push	{r4, lr}
 800c120:	460c      	mov	r4, r1
 800c122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c126:	f000 f9a5 	bl	800c474 <_lseek_r>
 800c12a:	1c43      	adds	r3, r0, #1
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	bf15      	itete	ne
 800c130:	6560      	strne	r0, [r4, #84]	; 0x54
 800c132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c13a:	81a3      	strheq	r3, [r4, #12]
 800c13c:	bf18      	it	ne
 800c13e:	81a3      	strhne	r3, [r4, #12]
 800c140:	bd10      	pop	{r4, pc}

0800c142 <__sclose>:
 800c142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c146:	f000 b8d3 	b.w	800c2f0 <_close_r>
	...

0800c14c <__swbuf_r>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	460e      	mov	r6, r1
 800c150:	4614      	mov	r4, r2
 800c152:	4605      	mov	r5, r0
 800c154:	b118      	cbz	r0, 800c15e <__swbuf_r+0x12>
 800c156:	6983      	ldr	r3, [r0, #24]
 800c158:	b90b      	cbnz	r3, 800c15e <__swbuf_r+0x12>
 800c15a:	f7ff fa95 	bl	800b688 <__sinit>
 800c15e:	4b21      	ldr	r3, [pc, #132]	; (800c1e4 <__swbuf_r+0x98>)
 800c160:	429c      	cmp	r4, r3
 800c162:	d12a      	bne.n	800c1ba <__swbuf_r+0x6e>
 800c164:	686c      	ldr	r4, [r5, #4]
 800c166:	69a3      	ldr	r3, [r4, #24]
 800c168:	60a3      	str	r3, [r4, #8]
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	071a      	lsls	r2, r3, #28
 800c16e:	d52e      	bpl.n	800c1ce <__swbuf_r+0x82>
 800c170:	6923      	ldr	r3, [r4, #16]
 800c172:	b363      	cbz	r3, 800c1ce <__swbuf_r+0x82>
 800c174:	6923      	ldr	r3, [r4, #16]
 800c176:	6820      	ldr	r0, [r4, #0]
 800c178:	1ac0      	subs	r0, r0, r3
 800c17a:	6963      	ldr	r3, [r4, #20]
 800c17c:	b2f6      	uxtb	r6, r6
 800c17e:	4298      	cmp	r0, r3
 800c180:	4637      	mov	r7, r6
 800c182:	db04      	blt.n	800c18e <__swbuf_r+0x42>
 800c184:	4621      	mov	r1, r4
 800c186:	4628      	mov	r0, r5
 800c188:	f000 f94a 	bl	800c420 <_fflush_r>
 800c18c:	bb28      	cbnz	r0, 800c1da <__swbuf_r+0x8e>
 800c18e:	68a3      	ldr	r3, [r4, #8]
 800c190:	3b01      	subs	r3, #1
 800c192:	60a3      	str	r3, [r4, #8]
 800c194:	6823      	ldr	r3, [r4, #0]
 800c196:	1c5a      	adds	r2, r3, #1
 800c198:	6022      	str	r2, [r4, #0]
 800c19a:	701e      	strb	r6, [r3, #0]
 800c19c:	6963      	ldr	r3, [r4, #20]
 800c19e:	3001      	adds	r0, #1
 800c1a0:	4298      	cmp	r0, r3
 800c1a2:	d004      	beq.n	800c1ae <__swbuf_r+0x62>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	07db      	lsls	r3, r3, #31
 800c1a8:	d519      	bpl.n	800c1de <__swbuf_r+0x92>
 800c1aa:	2e0a      	cmp	r6, #10
 800c1ac:	d117      	bne.n	800c1de <__swbuf_r+0x92>
 800c1ae:	4621      	mov	r1, r4
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	f000 f935 	bl	800c420 <_fflush_r>
 800c1b6:	b190      	cbz	r0, 800c1de <__swbuf_r+0x92>
 800c1b8:	e00f      	b.n	800c1da <__swbuf_r+0x8e>
 800c1ba:	4b0b      	ldr	r3, [pc, #44]	; (800c1e8 <__swbuf_r+0x9c>)
 800c1bc:	429c      	cmp	r4, r3
 800c1be:	d101      	bne.n	800c1c4 <__swbuf_r+0x78>
 800c1c0:	68ac      	ldr	r4, [r5, #8]
 800c1c2:	e7d0      	b.n	800c166 <__swbuf_r+0x1a>
 800c1c4:	4b09      	ldr	r3, [pc, #36]	; (800c1ec <__swbuf_r+0xa0>)
 800c1c6:	429c      	cmp	r4, r3
 800c1c8:	bf08      	it	eq
 800c1ca:	68ec      	ldreq	r4, [r5, #12]
 800c1cc:	e7cb      	b.n	800c166 <__swbuf_r+0x1a>
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f000 f81f 	bl	800c214 <__swsetup_r>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d0cc      	beq.n	800c174 <__swbuf_r+0x28>
 800c1da:	f04f 37ff 	mov.w	r7, #4294967295
 800c1de:	4638      	mov	r0, r7
 800c1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	0800c8f4 	.word	0x0800c8f4
 800c1e8:	0800c914 	.word	0x0800c914
 800c1ec:	0800c8d4 	.word	0x0800c8d4

0800c1f0 <_write_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4c07      	ldr	r4, [pc, #28]	; (800c210 <_write_r+0x20>)
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	6022      	str	r2, [r4, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	f7f9 fee3 	bl	8005fca <_write>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	d102      	bne.n	800c20e <_write_r+0x1e>
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	b103      	cbz	r3, 800c20e <_write_r+0x1e>
 800c20c:	602b      	str	r3, [r5, #0]
 800c20e:	bd38      	pop	{r3, r4, r5, pc}
 800c210:	200007bc 	.word	0x200007bc

0800c214 <__swsetup_r>:
 800c214:	4b32      	ldr	r3, [pc, #200]	; (800c2e0 <__swsetup_r+0xcc>)
 800c216:	b570      	push	{r4, r5, r6, lr}
 800c218:	681d      	ldr	r5, [r3, #0]
 800c21a:	4606      	mov	r6, r0
 800c21c:	460c      	mov	r4, r1
 800c21e:	b125      	cbz	r5, 800c22a <__swsetup_r+0x16>
 800c220:	69ab      	ldr	r3, [r5, #24]
 800c222:	b913      	cbnz	r3, 800c22a <__swsetup_r+0x16>
 800c224:	4628      	mov	r0, r5
 800c226:	f7ff fa2f 	bl	800b688 <__sinit>
 800c22a:	4b2e      	ldr	r3, [pc, #184]	; (800c2e4 <__swsetup_r+0xd0>)
 800c22c:	429c      	cmp	r4, r3
 800c22e:	d10f      	bne.n	800c250 <__swsetup_r+0x3c>
 800c230:	686c      	ldr	r4, [r5, #4]
 800c232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c236:	b29a      	uxth	r2, r3
 800c238:	0715      	lsls	r5, r2, #28
 800c23a:	d42c      	bmi.n	800c296 <__swsetup_r+0x82>
 800c23c:	06d0      	lsls	r0, r2, #27
 800c23e:	d411      	bmi.n	800c264 <__swsetup_r+0x50>
 800c240:	2209      	movs	r2, #9
 800c242:	6032      	str	r2, [r6, #0]
 800c244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c248:	81a3      	strh	r3, [r4, #12]
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	bd70      	pop	{r4, r5, r6, pc}
 800c250:	4b25      	ldr	r3, [pc, #148]	; (800c2e8 <__swsetup_r+0xd4>)
 800c252:	429c      	cmp	r4, r3
 800c254:	d101      	bne.n	800c25a <__swsetup_r+0x46>
 800c256:	68ac      	ldr	r4, [r5, #8]
 800c258:	e7eb      	b.n	800c232 <__swsetup_r+0x1e>
 800c25a:	4b24      	ldr	r3, [pc, #144]	; (800c2ec <__swsetup_r+0xd8>)
 800c25c:	429c      	cmp	r4, r3
 800c25e:	bf08      	it	eq
 800c260:	68ec      	ldreq	r4, [r5, #12]
 800c262:	e7e6      	b.n	800c232 <__swsetup_r+0x1e>
 800c264:	0751      	lsls	r1, r2, #29
 800c266:	d512      	bpl.n	800c28e <__swsetup_r+0x7a>
 800c268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c26a:	b141      	cbz	r1, 800c27e <__swsetup_r+0x6a>
 800c26c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c270:	4299      	cmp	r1, r3
 800c272:	d002      	beq.n	800c27a <__swsetup_r+0x66>
 800c274:	4630      	mov	r0, r6
 800c276:	f000 f98f 	bl	800c598 <_free_r>
 800c27a:	2300      	movs	r3, #0
 800c27c:	6363      	str	r3, [r4, #52]	; 0x34
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c284:	81a3      	strh	r3, [r4, #12]
 800c286:	2300      	movs	r3, #0
 800c288:	6063      	str	r3, [r4, #4]
 800c28a:	6923      	ldr	r3, [r4, #16]
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	f043 0308 	orr.w	r3, r3, #8
 800c294:	81a3      	strh	r3, [r4, #12]
 800c296:	6923      	ldr	r3, [r4, #16]
 800c298:	b94b      	cbnz	r3, 800c2ae <__swsetup_r+0x9a>
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2a4:	d003      	beq.n	800c2ae <__swsetup_r+0x9a>
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f000 f919 	bl	800c4e0 <__smakebuf_r>
 800c2ae:	89a2      	ldrh	r2, [r4, #12]
 800c2b0:	f012 0301 	ands.w	r3, r2, #1
 800c2b4:	d00c      	beq.n	800c2d0 <__swsetup_r+0xbc>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	60a3      	str	r3, [r4, #8]
 800c2ba:	6963      	ldr	r3, [r4, #20]
 800c2bc:	425b      	negs	r3, r3
 800c2be:	61a3      	str	r3, [r4, #24]
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	b953      	cbnz	r3, 800c2da <__swsetup_r+0xc6>
 800c2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c2cc:	d1ba      	bne.n	800c244 <__swsetup_r+0x30>
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	0792      	lsls	r2, r2, #30
 800c2d2:	bf58      	it	pl
 800c2d4:	6963      	ldrpl	r3, [r4, #20]
 800c2d6:	60a3      	str	r3, [r4, #8]
 800c2d8:	e7f2      	b.n	800c2c0 <__swsetup_r+0xac>
 800c2da:	2000      	movs	r0, #0
 800c2dc:	e7f7      	b.n	800c2ce <__swsetup_r+0xba>
 800c2de:	bf00      	nop
 800c2e0:	20000050 	.word	0x20000050
 800c2e4:	0800c8f4 	.word	0x0800c8f4
 800c2e8:	0800c914 	.word	0x0800c914
 800c2ec:	0800c8d4 	.word	0x0800c8d4

0800c2f0 <_close_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4c06      	ldr	r4, [pc, #24]	; (800c30c <_close_r+0x1c>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	6023      	str	r3, [r4, #0]
 800c2fc:	f7f9 feae 	bl	800605c <_close>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_close_r+0x1a>
 800c304:	6823      	ldr	r3, [r4, #0]
 800c306:	b103      	cbz	r3, 800c30a <_close_r+0x1a>
 800c308:	602b      	str	r3, [r5, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	200007bc 	.word	0x200007bc

0800c310 <__sflush_r>:
 800c310:	898a      	ldrh	r2, [r1, #12]
 800c312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c316:	4605      	mov	r5, r0
 800c318:	0710      	lsls	r0, r2, #28
 800c31a:	460c      	mov	r4, r1
 800c31c:	d45a      	bmi.n	800c3d4 <__sflush_r+0xc4>
 800c31e:	684b      	ldr	r3, [r1, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	dc05      	bgt.n	800c330 <__sflush_r+0x20>
 800c324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c326:	2b00      	cmp	r3, #0
 800c328:	dc02      	bgt.n	800c330 <__sflush_r+0x20>
 800c32a:	2000      	movs	r0, #0
 800c32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c332:	2e00      	cmp	r6, #0
 800c334:	d0f9      	beq.n	800c32a <__sflush_r+0x1a>
 800c336:	2300      	movs	r3, #0
 800c338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c33c:	682f      	ldr	r7, [r5, #0]
 800c33e:	602b      	str	r3, [r5, #0]
 800c340:	d033      	beq.n	800c3aa <__sflush_r+0x9a>
 800c342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	075a      	lsls	r2, r3, #29
 800c348:	d505      	bpl.n	800c356 <__sflush_r+0x46>
 800c34a:	6863      	ldr	r3, [r4, #4]
 800c34c:	1ac0      	subs	r0, r0, r3
 800c34e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c350:	b10b      	cbz	r3, 800c356 <__sflush_r+0x46>
 800c352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c354:	1ac0      	subs	r0, r0, r3
 800c356:	2300      	movs	r3, #0
 800c358:	4602      	mov	r2, r0
 800c35a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c35c:	6a21      	ldr	r1, [r4, #32]
 800c35e:	4628      	mov	r0, r5
 800c360:	47b0      	blx	r6
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	89a3      	ldrh	r3, [r4, #12]
 800c366:	d106      	bne.n	800c376 <__sflush_r+0x66>
 800c368:	6829      	ldr	r1, [r5, #0]
 800c36a:	291d      	cmp	r1, #29
 800c36c:	d84b      	bhi.n	800c406 <__sflush_r+0xf6>
 800c36e:	4a2b      	ldr	r2, [pc, #172]	; (800c41c <__sflush_r+0x10c>)
 800c370:	40ca      	lsrs	r2, r1
 800c372:	07d6      	lsls	r6, r2, #31
 800c374:	d547      	bpl.n	800c406 <__sflush_r+0xf6>
 800c376:	2200      	movs	r2, #0
 800c378:	6062      	str	r2, [r4, #4]
 800c37a:	04d9      	lsls	r1, r3, #19
 800c37c:	6922      	ldr	r2, [r4, #16]
 800c37e:	6022      	str	r2, [r4, #0]
 800c380:	d504      	bpl.n	800c38c <__sflush_r+0x7c>
 800c382:	1c42      	adds	r2, r0, #1
 800c384:	d101      	bne.n	800c38a <__sflush_r+0x7a>
 800c386:	682b      	ldr	r3, [r5, #0]
 800c388:	b903      	cbnz	r3, 800c38c <__sflush_r+0x7c>
 800c38a:	6560      	str	r0, [r4, #84]	; 0x54
 800c38c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c38e:	602f      	str	r7, [r5, #0]
 800c390:	2900      	cmp	r1, #0
 800c392:	d0ca      	beq.n	800c32a <__sflush_r+0x1a>
 800c394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c398:	4299      	cmp	r1, r3
 800c39a:	d002      	beq.n	800c3a2 <__sflush_r+0x92>
 800c39c:	4628      	mov	r0, r5
 800c39e:	f000 f8fb 	bl	800c598 <_free_r>
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	6360      	str	r0, [r4, #52]	; 0x34
 800c3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3aa:	6a21      	ldr	r1, [r4, #32]
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	47b0      	blx	r6
 800c3b2:	1c41      	adds	r1, r0, #1
 800c3b4:	d1c6      	bne.n	800c344 <__sflush_r+0x34>
 800c3b6:	682b      	ldr	r3, [r5, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d0c3      	beq.n	800c344 <__sflush_r+0x34>
 800c3bc:	2b1d      	cmp	r3, #29
 800c3be:	d001      	beq.n	800c3c4 <__sflush_r+0xb4>
 800c3c0:	2b16      	cmp	r3, #22
 800c3c2:	d101      	bne.n	800c3c8 <__sflush_r+0xb8>
 800c3c4:	602f      	str	r7, [r5, #0]
 800c3c6:	e7b0      	b.n	800c32a <__sflush_r+0x1a>
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ce:	81a3      	strh	r3, [r4, #12]
 800c3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d4:	690f      	ldr	r7, [r1, #16]
 800c3d6:	2f00      	cmp	r7, #0
 800c3d8:	d0a7      	beq.n	800c32a <__sflush_r+0x1a>
 800c3da:	0793      	lsls	r3, r2, #30
 800c3dc:	680e      	ldr	r6, [r1, #0]
 800c3de:	bf08      	it	eq
 800c3e0:	694b      	ldreq	r3, [r1, #20]
 800c3e2:	600f      	str	r7, [r1, #0]
 800c3e4:	bf18      	it	ne
 800c3e6:	2300      	movne	r3, #0
 800c3e8:	eba6 0807 	sub.w	r8, r6, r7
 800c3ec:	608b      	str	r3, [r1, #8]
 800c3ee:	f1b8 0f00 	cmp.w	r8, #0
 800c3f2:	dd9a      	ble.n	800c32a <__sflush_r+0x1a>
 800c3f4:	4643      	mov	r3, r8
 800c3f6:	463a      	mov	r2, r7
 800c3f8:	6a21      	ldr	r1, [r4, #32]
 800c3fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	47b0      	blx	r6
 800c400:	2800      	cmp	r0, #0
 800c402:	dc07      	bgt.n	800c414 <__sflush_r+0x104>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c40a:	81a3      	strh	r3, [r4, #12]
 800c40c:	f04f 30ff 	mov.w	r0, #4294967295
 800c410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c414:	4407      	add	r7, r0
 800c416:	eba8 0800 	sub.w	r8, r8, r0
 800c41a:	e7e8      	b.n	800c3ee <__sflush_r+0xde>
 800c41c:	20400001 	.word	0x20400001

0800c420 <_fflush_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	690b      	ldr	r3, [r1, #16]
 800c424:	4605      	mov	r5, r0
 800c426:	460c      	mov	r4, r1
 800c428:	b1db      	cbz	r3, 800c462 <_fflush_r+0x42>
 800c42a:	b118      	cbz	r0, 800c434 <_fflush_r+0x14>
 800c42c:	6983      	ldr	r3, [r0, #24]
 800c42e:	b90b      	cbnz	r3, 800c434 <_fflush_r+0x14>
 800c430:	f7ff f92a 	bl	800b688 <__sinit>
 800c434:	4b0c      	ldr	r3, [pc, #48]	; (800c468 <_fflush_r+0x48>)
 800c436:	429c      	cmp	r4, r3
 800c438:	d109      	bne.n	800c44e <_fflush_r+0x2e>
 800c43a:	686c      	ldr	r4, [r5, #4]
 800c43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c440:	b17b      	cbz	r3, 800c462 <_fflush_r+0x42>
 800c442:	4621      	mov	r1, r4
 800c444:	4628      	mov	r0, r5
 800c446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c44a:	f7ff bf61 	b.w	800c310 <__sflush_r>
 800c44e:	4b07      	ldr	r3, [pc, #28]	; (800c46c <_fflush_r+0x4c>)
 800c450:	429c      	cmp	r4, r3
 800c452:	d101      	bne.n	800c458 <_fflush_r+0x38>
 800c454:	68ac      	ldr	r4, [r5, #8]
 800c456:	e7f1      	b.n	800c43c <_fflush_r+0x1c>
 800c458:	4b05      	ldr	r3, [pc, #20]	; (800c470 <_fflush_r+0x50>)
 800c45a:	429c      	cmp	r4, r3
 800c45c:	bf08      	it	eq
 800c45e:	68ec      	ldreq	r4, [r5, #12]
 800c460:	e7ec      	b.n	800c43c <_fflush_r+0x1c>
 800c462:	2000      	movs	r0, #0
 800c464:	bd38      	pop	{r3, r4, r5, pc}
 800c466:	bf00      	nop
 800c468:	0800c8f4 	.word	0x0800c8f4
 800c46c:	0800c914 	.word	0x0800c914
 800c470:	0800c8d4 	.word	0x0800c8d4

0800c474 <_lseek_r>:
 800c474:	b538      	push	{r3, r4, r5, lr}
 800c476:	4c07      	ldr	r4, [pc, #28]	; (800c494 <_lseek_r+0x20>)
 800c478:	4605      	mov	r5, r0
 800c47a:	4608      	mov	r0, r1
 800c47c:	4611      	mov	r1, r2
 800c47e:	2200      	movs	r2, #0
 800c480:	6022      	str	r2, [r4, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	f7f9 fe11 	bl	80060aa <_lseek>
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	d102      	bne.n	800c492 <_lseek_r+0x1e>
 800c48c:	6823      	ldr	r3, [r4, #0]
 800c48e:	b103      	cbz	r3, 800c492 <_lseek_r+0x1e>
 800c490:	602b      	str	r3, [r5, #0]
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	200007bc 	.word	0x200007bc

0800c498 <__swhatbuf_r>:
 800c498:	b570      	push	{r4, r5, r6, lr}
 800c49a:	460e      	mov	r6, r1
 800c49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a0:	2900      	cmp	r1, #0
 800c4a2:	b090      	sub	sp, #64	; 0x40
 800c4a4:	4614      	mov	r4, r2
 800c4a6:	461d      	mov	r5, r3
 800c4a8:	da07      	bge.n	800c4ba <__swhatbuf_r+0x22>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	602b      	str	r3, [r5, #0]
 800c4ae:	89b3      	ldrh	r3, [r6, #12]
 800c4b0:	061a      	lsls	r2, r3, #24
 800c4b2:	d410      	bmi.n	800c4d6 <__swhatbuf_r+0x3e>
 800c4b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4b8:	e00e      	b.n	800c4d8 <__swhatbuf_r+0x40>
 800c4ba:	aa01      	add	r2, sp, #4
 800c4bc:	f000 f8f2 	bl	800c6a4 <_fstat_r>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	dbf2      	blt.n	800c4aa <__swhatbuf_r+0x12>
 800c4c4:	9a02      	ldr	r2, [sp, #8]
 800c4c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4ce:	425a      	negs	r2, r3
 800c4d0:	415a      	adcs	r2, r3
 800c4d2:	602a      	str	r2, [r5, #0]
 800c4d4:	e7ee      	b.n	800c4b4 <__swhatbuf_r+0x1c>
 800c4d6:	2340      	movs	r3, #64	; 0x40
 800c4d8:	2000      	movs	r0, #0
 800c4da:	6023      	str	r3, [r4, #0]
 800c4dc:	b010      	add	sp, #64	; 0x40
 800c4de:	bd70      	pop	{r4, r5, r6, pc}

0800c4e0 <__smakebuf_r>:
 800c4e0:	898b      	ldrh	r3, [r1, #12]
 800c4e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4e4:	079d      	lsls	r5, r3, #30
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	460c      	mov	r4, r1
 800c4ea:	d507      	bpl.n	800c4fc <__smakebuf_r+0x1c>
 800c4ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4f0:	6023      	str	r3, [r4, #0]
 800c4f2:	6123      	str	r3, [r4, #16]
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	6163      	str	r3, [r4, #20]
 800c4f8:	b002      	add	sp, #8
 800c4fa:	bd70      	pop	{r4, r5, r6, pc}
 800c4fc:	ab01      	add	r3, sp, #4
 800c4fe:	466a      	mov	r2, sp
 800c500:	f7ff ffca 	bl	800c498 <__swhatbuf_r>
 800c504:	9900      	ldr	r1, [sp, #0]
 800c506:	4605      	mov	r5, r0
 800c508:	4630      	mov	r0, r6
 800c50a:	f7ff f947 	bl	800b79c <_malloc_r>
 800c50e:	b948      	cbnz	r0, 800c524 <__smakebuf_r+0x44>
 800c510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c514:	059a      	lsls	r2, r3, #22
 800c516:	d4ef      	bmi.n	800c4f8 <__smakebuf_r+0x18>
 800c518:	f023 0303 	bic.w	r3, r3, #3
 800c51c:	f043 0302 	orr.w	r3, r3, #2
 800c520:	81a3      	strh	r3, [r4, #12]
 800c522:	e7e3      	b.n	800c4ec <__smakebuf_r+0xc>
 800c524:	4b0d      	ldr	r3, [pc, #52]	; (800c55c <__smakebuf_r+0x7c>)
 800c526:	62b3      	str	r3, [r6, #40]	; 0x28
 800c528:	89a3      	ldrh	r3, [r4, #12]
 800c52a:	6020      	str	r0, [r4, #0]
 800c52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c530:	81a3      	strh	r3, [r4, #12]
 800c532:	9b00      	ldr	r3, [sp, #0]
 800c534:	6163      	str	r3, [r4, #20]
 800c536:	9b01      	ldr	r3, [sp, #4]
 800c538:	6120      	str	r0, [r4, #16]
 800c53a:	b15b      	cbz	r3, 800c554 <__smakebuf_r+0x74>
 800c53c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c540:	4630      	mov	r0, r6
 800c542:	f000 f8c1 	bl	800c6c8 <_isatty_r>
 800c546:	b128      	cbz	r0, 800c554 <__smakebuf_r+0x74>
 800c548:	89a3      	ldrh	r3, [r4, #12]
 800c54a:	f023 0303 	bic.w	r3, r3, #3
 800c54e:	f043 0301 	orr.w	r3, r3, #1
 800c552:	81a3      	strh	r3, [r4, #12]
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	431d      	orrs	r5, r3
 800c558:	81a5      	strh	r5, [r4, #12]
 800c55a:	e7cd      	b.n	800c4f8 <__smakebuf_r+0x18>
 800c55c:	0800b609 	.word	0x0800b609

0800c560 <memmove>:
 800c560:	4288      	cmp	r0, r1
 800c562:	b510      	push	{r4, lr}
 800c564:	eb01 0302 	add.w	r3, r1, r2
 800c568:	d803      	bhi.n	800c572 <memmove+0x12>
 800c56a:	1e42      	subs	r2, r0, #1
 800c56c:	4299      	cmp	r1, r3
 800c56e:	d10c      	bne.n	800c58a <memmove+0x2a>
 800c570:	bd10      	pop	{r4, pc}
 800c572:	4298      	cmp	r0, r3
 800c574:	d2f9      	bcs.n	800c56a <memmove+0xa>
 800c576:	1881      	adds	r1, r0, r2
 800c578:	1ad2      	subs	r2, r2, r3
 800c57a:	42d3      	cmn	r3, r2
 800c57c:	d100      	bne.n	800c580 <memmove+0x20>
 800c57e:	bd10      	pop	{r4, pc}
 800c580:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c584:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c588:	e7f7      	b.n	800c57a <memmove+0x1a>
 800c58a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c58e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c592:	e7eb      	b.n	800c56c <memmove+0xc>

0800c594 <__malloc_lock>:
 800c594:	4770      	bx	lr

0800c596 <__malloc_unlock>:
 800c596:	4770      	bx	lr

0800c598 <_free_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4605      	mov	r5, r0
 800c59c:	2900      	cmp	r1, #0
 800c59e:	d045      	beq.n	800c62c <_free_r+0x94>
 800c5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5a4:	1f0c      	subs	r4, r1, #4
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	bfb8      	it	lt
 800c5aa:	18e4      	addlt	r4, r4, r3
 800c5ac:	f7ff fff2 	bl	800c594 <__malloc_lock>
 800c5b0:	4a1f      	ldr	r2, [pc, #124]	; (800c630 <_free_r+0x98>)
 800c5b2:	6813      	ldr	r3, [r2, #0]
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	b933      	cbnz	r3, 800c5c6 <_free_r+0x2e>
 800c5b8:	6063      	str	r3, [r4, #4]
 800c5ba:	6014      	str	r4, [r2, #0]
 800c5bc:	4628      	mov	r0, r5
 800c5be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5c2:	f7ff bfe8 	b.w	800c596 <__malloc_unlock>
 800c5c6:	42a3      	cmp	r3, r4
 800c5c8:	d90c      	bls.n	800c5e4 <_free_r+0x4c>
 800c5ca:	6821      	ldr	r1, [r4, #0]
 800c5cc:	1862      	adds	r2, r4, r1
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	bf04      	itt	eq
 800c5d2:	681a      	ldreq	r2, [r3, #0]
 800c5d4:	685b      	ldreq	r3, [r3, #4]
 800c5d6:	6063      	str	r3, [r4, #4]
 800c5d8:	bf04      	itt	eq
 800c5da:	1852      	addeq	r2, r2, r1
 800c5dc:	6022      	streq	r2, [r4, #0]
 800c5de:	6004      	str	r4, [r0, #0]
 800c5e0:	e7ec      	b.n	800c5bc <_free_r+0x24>
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	b10a      	cbz	r2, 800c5ec <_free_r+0x54>
 800c5e8:	42a2      	cmp	r2, r4
 800c5ea:	d9fa      	bls.n	800c5e2 <_free_r+0x4a>
 800c5ec:	6819      	ldr	r1, [r3, #0]
 800c5ee:	1858      	adds	r0, r3, r1
 800c5f0:	42a0      	cmp	r0, r4
 800c5f2:	d10b      	bne.n	800c60c <_free_r+0x74>
 800c5f4:	6820      	ldr	r0, [r4, #0]
 800c5f6:	4401      	add	r1, r0
 800c5f8:	1858      	adds	r0, r3, r1
 800c5fa:	4282      	cmp	r2, r0
 800c5fc:	6019      	str	r1, [r3, #0]
 800c5fe:	d1dd      	bne.n	800c5bc <_free_r+0x24>
 800c600:	6810      	ldr	r0, [r2, #0]
 800c602:	6852      	ldr	r2, [r2, #4]
 800c604:	605a      	str	r2, [r3, #4]
 800c606:	4401      	add	r1, r0
 800c608:	6019      	str	r1, [r3, #0]
 800c60a:	e7d7      	b.n	800c5bc <_free_r+0x24>
 800c60c:	d902      	bls.n	800c614 <_free_r+0x7c>
 800c60e:	230c      	movs	r3, #12
 800c610:	602b      	str	r3, [r5, #0]
 800c612:	e7d3      	b.n	800c5bc <_free_r+0x24>
 800c614:	6820      	ldr	r0, [r4, #0]
 800c616:	1821      	adds	r1, r4, r0
 800c618:	428a      	cmp	r2, r1
 800c61a:	bf04      	itt	eq
 800c61c:	6811      	ldreq	r1, [r2, #0]
 800c61e:	6852      	ldreq	r2, [r2, #4]
 800c620:	6062      	str	r2, [r4, #4]
 800c622:	bf04      	itt	eq
 800c624:	1809      	addeq	r1, r1, r0
 800c626:	6021      	streq	r1, [r4, #0]
 800c628:	605c      	str	r4, [r3, #4]
 800c62a:	e7c7      	b.n	800c5bc <_free_r+0x24>
 800c62c:	bd38      	pop	{r3, r4, r5, pc}
 800c62e:	bf00      	nop
 800c630:	2000017c 	.word	0x2000017c

0800c634 <_realloc_r>:
 800c634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c636:	4607      	mov	r7, r0
 800c638:	4614      	mov	r4, r2
 800c63a:	460e      	mov	r6, r1
 800c63c:	b921      	cbnz	r1, 800c648 <_realloc_r+0x14>
 800c63e:	4611      	mov	r1, r2
 800c640:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c644:	f7ff b8aa 	b.w	800b79c <_malloc_r>
 800c648:	b922      	cbnz	r2, 800c654 <_realloc_r+0x20>
 800c64a:	f7ff ffa5 	bl	800c598 <_free_r>
 800c64e:	4625      	mov	r5, r4
 800c650:	4628      	mov	r0, r5
 800c652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c654:	f000 f848 	bl	800c6e8 <_malloc_usable_size_r>
 800c658:	4284      	cmp	r4, r0
 800c65a:	d90f      	bls.n	800c67c <_realloc_r+0x48>
 800c65c:	4621      	mov	r1, r4
 800c65e:	4638      	mov	r0, r7
 800c660:	f7ff f89c 	bl	800b79c <_malloc_r>
 800c664:	4605      	mov	r5, r0
 800c666:	2800      	cmp	r0, #0
 800c668:	d0f2      	beq.n	800c650 <_realloc_r+0x1c>
 800c66a:	4631      	mov	r1, r6
 800c66c:	4622      	mov	r2, r4
 800c66e:	f7fe ff7b 	bl	800b568 <memcpy>
 800c672:	4631      	mov	r1, r6
 800c674:	4638      	mov	r0, r7
 800c676:	f7ff ff8f 	bl	800c598 <_free_r>
 800c67a:	e7e9      	b.n	800c650 <_realloc_r+0x1c>
 800c67c:	4635      	mov	r5, r6
 800c67e:	e7e7      	b.n	800c650 <_realloc_r+0x1c>

0800c680 <_read_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4c07      	ldr	r4, [pc, #28]	; (800c6a0 <_read_r+0x20>)
 800c684:	4605      	mov	r5, r0
 800c686:	4608      	mov	r0, r1
 800c688:	4611      	mov	r1, r2
 800c68a:	2200      	movs	r2, #0
 800c68c:	6022      	str	r2, [r4, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	f7f9 fc7e 	bl	8005f90 <_read>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_read_r+0x1e>
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_read_r+0x1e>
 800c69c:	602b      	str	r3, [r5, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	200007bc 	.word	0x200007bc

0800c6a4 <_fstat_r>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	4c07      	ldr	r4, [pc, #28]	; (800c6c4 <_fstat_r+0x20>)
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	4605      	mov	r5, r0
 800c6ac:	4608      	mov	r0, r1
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	f7f9 fcdf 	bl	8006074 <_fstat>
 800c6b6:	1c43      	adds	r3, r0, #1
 800c6b8:	d102      	bne.n	800c6c0 <_fstat_r+0x1c>
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	b103      	cbz	r3, 800c6c0 <_fstat_r+0x1c>
 800c6be:	602b      	str	r3, [r5, #0]
 800c6c0:	bd38      	pop	{r3, r4, r5, pc}
 800c6c2:	bf00      	nop
 800c6c4:	200007bc 	.word	0x200007bc

0800c6c8 <_isatty_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	4c06      	ldr	r4, [pc, #24]	; (800c6e4 <_isatty_r+0x1c>)
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	4608      	mov	r0, r1
 800c6d2:	6023      	str	r3, [r4, #0]
 800c6d4:	f7f9 fcde 	bl	8006094 <_isatty>
 800c6d8:	1c43      	adds	r3, r0, #1
 800c6da:	d102      	bne.n	800c6e2 <_isatty_r+0x1a>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	b103      	cbz	r3, 800c6e2 <_isatty_r+0x1a>
 800c6e0:	602b      	str	r3, [r5, #0]
 800c6e2:	bd38      	pop	{r3, r4, r5, pc}
 800c6e4:	200007bc 	.word	0x200007bc

0800c6e8 <_malloc_usable_size_r>:
 800c6e8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	f1a0 0004 	sub.w	r0, r0, #4
 800c6f2:	bfbc      	itt	lt
 800c6f4:	580b      	ldrlt	r3, [r1, r0]
 800c6f6:	18c0      	addlt	r0, r0, r3
 800c6f8:	4770      	bx	lr
	...

0800c6fc <_init>:
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	bf00      	nop
 800c700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c702:	bc08      	pop	{r3}
 800c704:	469e      	mov	lr, r3
 800c706:	4770      	bx	lr

0800c708 <_fini>:
 800c708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70a:	bf00      	nop
 800c70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c70e:	bc08      	pop	{r3}
 800c710:	469e      	mov	lr, r3
 800c712:	4770      	bx	lr
